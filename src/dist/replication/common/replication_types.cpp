/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include <dsn/dist/replication/replication_types.h>

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace dsn {
namespace replication {

int _kpartition_statusValues[] = {partition_status::PS_INVALID,
                                  partition_status::PS_INACTIVE,
                                  partition_status::PS_ERROR,
                                  partition_status::PS_PRIMARY,
                                  partition_status::PS_SECONDARY,
                                  partition_status::PS_POTENTIAL_SECONDARY,
                                  partition_status::PS_PARTITION_SPLIT};
const char *_kpartition_statusNames[] = {"PS_INVALID",
                                         "PS_INACTIVE",
                                         "PS_ERROR",
                                         "PS_PRIMARY",
                                         "PS_SECONDARY",
                                         "PS_POTENTIAL_SECONDARY",
                                         "PS_PARTITION_SPLIT"};
const std::map<int, const char *> _partition_status_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(7, _kpartition_statusValues, _kpartition_statusNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kread_semanticValues[] = {read_semantic::ReadInvalid,
                               read_semantic::ReadLastUpdate,
                               read_semantic::ReadOutdated,
                               read_semantic::ReadSnapshot};
const char *_kread_semanticNames[] = {
    "ReadInvalid", "ReadLastUpdate", "ReadOutdated", "ReadSnapshot"};
const std::map<int, const char *> _read_semantic_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(4, _kread_semanticValues, _kread_semanticNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _klearn_typeValues[] = {
    learn_type::LT_INVALID, learn_type::LT_CACHE, learn_type::LT_APP, learn_type::LT_LOG};
const char *_klearn_typeNames[] = {"LT_INVALID", "LT_CACHE", "LT_APP", "LT_LOG"};
const std::map<int, const char *> _learn_type_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(4, _klearn_typeValues, _klearn_typeNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _klearner_statusValues[] = {learner_status::LearningInvalid,
                                learner_status::LearningWithoutPrepare,
                                learner_status::LearningWithPrepareTransient,
                                learner_status::LearningWithPrepare,
                                learner_status::LearningSucceeded,
                                learner_status::LearningFailed};
const char *_klearner_statusNames[] = {"LearningInvalid",
                                       "LearningWithoutPrepare",
                                       "LearningWithPrepareTransient",
                                       "LearningWithPrepare",
                                       "LearningSucceeded",
                                       "LearningFailed"};
const std::map<int, const char *> _learner_status_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(6, _klearner_statusValues, _klearner_statusNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kconfig_typeValues[] = {config_type::CT_INVALID,
                             config_type::CT_ASSIGN_PRIMARY,
                             config_type::CT_UPGRADE_TO_PRIMARY,
                             config_type::CT_ADD_SECONDARY,
                             config_type::CT_UPGRADE_TO_SECONDARY,
                             config_type::CT_DOWNGRADE_TO_SECONDARY,
                             config_type::CT_DOWNGRADE_TO_INACTIVE,
                             config_type::CT_REMOVE,
                             config_type::CT_ADD_SECONDARY_FOR_LB,
                             config_type::CT_PRIMARY_FORCE_UPDATE_BALLOT,
                             config_type::CT_DROP_PARTITION,
                             config_type::CT_REGISTER_CHILD};
const char *_kconfig_typeNames[] = {"CT_INVALID",
                                    "CT_ASSIGN_PRIMARY",
                                    "CT_UPGRADE_TO_PRIMARY",
                                    "CT_ADD_SECONDARY",
                                    "CT_UPGRADE_TO_SECONDARY",
                                    "CT_DOWNGRADE_TO_SECONDARY",
                                    "CT_DOWNGRADE_TO_INACTIVE",
                                    "CT_REMOVE",
                                    "CT_ADD_SECONDARY_FOR_LB",
                                    "CT_PRIMARY_FORCE_UPDATE_BALLOT",
                                    "CT_DROP_PARTITION",
                                    "CT_REGISTER_CHILD"};
const std::map<int, const char *> _config_type_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(12, _kconfig_typeValues, _kconfig_typeNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _knode_statusValues[] = {
    node_status::NS_INVALID, node_status::NS_ALIVE, node_status::NS_UNALIVE};
const char *_knode_statusNames[] = {"NS_INVALID", "NS_ALIVE", "NS_UNALIVE"};
const std::map<int, const char *> _node_status_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(3, _knode_statusValues, _knode_statusNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kmeta_function_levelValues[] = {meta_function_level::fl_stopped,
                                     meta_function_level::fl_blind,
                                     meta_function_level::fl_freezed,
                                     meta_function_level::fl_steady,
                                     meta_function_level::fl_lively,
                                     meta_function_level::fl_invalid};
const char *_kmeta_function_levelNames[] = {
    "fl_stopped", "fl_blind", "fl_freezed", "fl_steady", "fl_lively", "fl_invalid"};
const std::map<int, const char *> _meta_function_level_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(6, _kmeta_function_levelValues, _kmeta_function_levelNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kbalancer_request_typeValues[] = {balancer_request_type::move_primary,
                                       balancer_request_type::copy_primary,
                                       balancer_request_type::copy_secondary};
const char *_kbalancer_request_typeNames[] = {"move_primary", "copy_primary", "copy_secondary"};
const std::map<int, const char *> _balancer_request_type_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(3, _kbalancer_request_typeValues, _kbalancer_request_typeNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kapp_env_operationValues[] = {app_env_operation::APP_ENV_OP_INVALID,
                                   app_env_operation::APP_ENV_OP_SET,
                                   app_env_operation::APP_ENV_OP_DEL,
                                   app_env_operation::APP_ENV_OP_CLEAR};
const char *_kapp_env_operationNames[] = {
    "APP_ENV_OP_INVALID", "APP_ENV_OP_SET", "APP_ENV_OP_DEL", "APP_ENV_OP_CLEAR"};
const std::map<int, const char *> _app_env_operation_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(4, _kapp_env_operationValues, _kapp_env_operationNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kduplication_statusValues[] = {duplication_status::DS_INIT,
                                    duplication_status::DS_START,
                                    duplication_status::DS_PAUSE,
                                    duplication_status::DS_REMOVED};
const char *_kduplication_statusNames[] = {"DS_INIT", "DS_START", "DS_PAUSE", "DS_REMOVED"};
const std::map<int, const char *> _duplication_status_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(4, _kduplication_statusValues, _kduplication_statusNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kduplication_fail_modeValues[] = {duplication_fail_mode::FAIL_SLOW,
                                       duplication_fail_mode::FAIL_SKIP,
                                       duplication_fail_mode::FAIL_FAST};
const char *_kduplication_fail_modeNames[] = {"FAIL_SLOW", "FAIL_SKIP", "FAIL_FAST"};
const std::map<int, const char *> _duplication_fail_mode_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(3, _kduplication_fail_modeValues, _kduplication_fail_modeNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _ksplit_control_typeValues[] = {split_control_type::PSC_INVALID,
                                    split_control_type::PSC_PAUSE,
                                    split_control_type::PSC_RESTART,
                                    split_control_type::PSC_CANCEL};
const char *_ksplit_control_typeNames[] = {"PSC_INVALID", "PSC_PAUSE", "PSC_RESTART", "PSC_CANCEL"};
const std::map<int, const char *> _split_control_type_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(4, _ksplit_control_typeValues, _ksplit_control_typeNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _ksplit_statusValues[] = {split_status::not_split,
                              split_status::splitting,
                              split_status::paused,
                              split_status::canceling};
const char *_ksplit_statusNames[] = {"not_split", "splitting", "paused", "canceling"};
const std::map<int, const char *> _split_status_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(4, _ksplit_statusValues, _ksplit_statusNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

mutation_header::~mutation_header() throw() {}

void mutation_header::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void mutation_header::__set_ballot(const int64_t val) { this->ballot = val; }

void mutation_header::__set_decree(const int64_t val) { this->decree = val; }

void mutation_header::__set_log_offset(const int64_t val) { this->log_offset = val; }

void mutation_header::__set_last_committed_decree(const int64_t val)
{
    this->last_committed_decree = val;
}

void mutation_header::__set_timestamp(const int64_t val) { this->timestamp = val; }

uint32_t mutation_header::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->ballot);
                this->__isset.ballot = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->decree);
                this->__isset.decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->log_offset);
                this->__isset.log_offset = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_committed_decree);
                this->__isset.last_committed_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->timestamp);
                this->__isset.timestamp = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t mutation_header::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("mutation_header");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->ballot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("decree", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("log_offset", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->log_offset);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("last_committed_decree", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->last_committed_decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->timestamp);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(mutation_header &a, mutation_header &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.ballot, b.ballot);
    swap(a.decree, b.decree);
    swap(a.log_offset, b.log_offset);
    swap(a.last_committed_decree, b.last_committed_decree);
    swap(a.timestamp, b.timestamp);
    swap(a.__isset, b.__isset);
}

mutation_header::mutation_header(const mutation_header &other0)
{
    pid = other0.pid;
    ballot = other0.ballot;
    decree = other0.decree;
    log_offset = other0.log_offset;
    last_committed_decree = other0.last_committed_decree;
    timestamp = other0.timestamp;
    __isset = other0.__isset;
}
mutation_header::mutation_header(mutation_header &&other1)
{
    pid = std::move(other1.pid);
    ballot = std::move(other1.ballot);
    decree = std::move(other1.decree);
    log_offset = std::move(other1.log_offset);
    last_committed_decree = std::move(other1.last_committed_decree);
    timestamp = std::move(other1.timestamp);
    __isset = std::move(other1.__isset);
}
mutation_header &mutation_header::operator=(const mutation_header &other2)
{
    pid = other2.pid;
    ballot = other2.ballot;
    decree = other2.decree;
    log_offset = other2.log_offset;
    last_committed_decree = other2.last_committed_decree;
    timestamp = other2.timestamp;
    __isset = other2.__isset;
    return *this;
}
mutation_header &mutation_header::operator=(mutation_header &&other3)
{
    pid = std::move(other3.pid);
    ballot = std::move(other3.ballot);
    decree = std::move(other3.decree);
    log_offset = std::move(other3.log_offset);
    last_committed_decree = std::move(other3.last_committed_decree);
    timestamp = std::move(other3.timestamp);
    __isset = std::move(other3.__isset);
    return *this;
}
void mutation_header::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "mutation_header(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "ballot=" << to_string(ballot);
    out << ", "
        << "decree=" << to_string(decree);
    out << ", "
        << "log_offset=" << to_string(log_offset);
    out << ", "
        << "last_committed_decree=" << to_string(last_committed_decree);
    out << ", "
        << "timestamp=" << to_string(timestamp);
    out << ")";
}

mutation_update::~mutation_update() throw() {}

void mutation_update::__set_code(const ::dsn::task_code &val) { this->code = val; }

void mutation_update::__set_serialization_type(const int32_t val)
{
    this->serialization_type = val;
}

void mutation_update::__set_data(const ::dsn::blob &val) { this->data = val; }

void mutation_update::__set_start_time_ns(const int64_t val)
{
    this->start_time_ns = val;
    __isset.start_time_ns = true;
}

uint32_t mutation_update::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->code.read(iprot);
                this->__isset.code = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->serialization_type);
                this->__isset.serialization_type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->data.read(iprot);
                this->__isset.data = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->start_time_ns);
                this->__isset.start_time_ns = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t mutation_update::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("mutation_update");

    xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->code.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("serialization_type", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->serialization_type);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->data.write(oprot);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.start_time_ns) {
        xfer += oprot->writeFieldBegin("start_time_ns", ::apache::thrift::protocol::T_I64, 4);
        xfer += oprot->writeI64(this->start_time_ns);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(mutation_update &a, mutation_update &b)
{
    using ::std::swap;
    swap(a.code, b.code);
    swap(a.serialization_type, b.serialization_type);
    swap(a.data, b.data);
    swap(a.start_time_ns, b.start_time_ns);
    swap(a.__isset, b.__isset);
}

mutation_update::mutation_update(const mutation_update &other4)
{
    code = other4.code;
    serialization_type = other4.serialization_type;
    data = other4.data;
    start_time_ns = other4.start_time_ns;
    __isset = other4.__isset;
}
mutation_update::mutation_update(mutation_update &&other5)
{
    code = std::move(other5.code);
    serialization_type = std::move(other5.serialization_type);
    data = std::move(other5.data);
    start_time_ns = std::move(other5.start_time_ns);
    __isset = std::move(other5.__isset);
}
mutation_update &mutation_update::operator=(const mutation_update &other6)
{
    code = other6.code;
    serialization_type = other6.serialization_type;
    data = other6.data;
    start_time_ns = other6.start_time_ns;
    __isset = other6.__isset;
    return *this;
}
mutation_update &mutation_update::operator=(mutation_update &&other7)
{
    code = std::move(other7.code);
    serialization_type = std::move(other7.serialization_type);
    data = std::move(other7.data);
    start_time_ns = std::move(other7.start_time_ns);
    __isset = std::move(other7.__isset);
    return *this;
}
void mutation_update::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "mutation_update(";
    out << "code=" << to_string(code);
    out << ", "
        << "serialization_type=" << to_string(serialization_type);
    out << ", "
        << "data=" << to_string(data);
    out << ", "
        << "start_time_ns=";
    (__isset.start_time_ns ? (out << to_string(start_time_ns)) : (out << "<null>"));
    out << ")";
}

mutation_data::~mutation_data() throw() {}

void mutation_data::__set_header(const mutation_header &val) { this->header = val; }

void mutation_data::__set_updates(const std::vector<mutation_update> &val) { this->updates = val; }

uint32_t mutation_data::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->header.read(iprot);
                this->__isset.header = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->updates.clear();
                    uint32_t _size8;
                    ::apache::thrift::protocol::TType _etype11;
                    xfer += iprot->readListBegin(_etype11, _size8);
                    this->updates.resize(_size8);
                    uint32_t _i12;
                    for (_i12 = 0; _i12 < _size8; ++_i12) {
                        xfer += this->updates[_i12].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.updates = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t mutation_data::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("mutation_data");

    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("updates", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->updates.size()));
        std::vector<mutation_update>::const_iterator _iter13;
        for (_iter13 = this->updates.begin(); _iter13 != this->updates.end(); ++_iter13) {
            xfer += (*_iter13).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(mutation_data &a, mutation_data &b)
{
    using ::std::swap;
    swap(a.header, b.header);
    swap(a.updates, b.updates);
    swap(a.__isset, b.__isset);
}

mutation_data::mutation_data(const mutation_data &other14)
{
    header = other14.header;
    updates = other14.updates;
    __isset = other14.__isset;
}
mutation_data::mutation_data(mutation_data &&other15)
{
    header = std::move(other15.header);
    updates = std::move(other15.updates);
    __isset = std::move(other15.__isset);
}
mutation_data &mutation_data::operator=(const mutation_data &other16)
{
    header = other16.header;
    updates = other16.updates;
    __isset = other16.__isset;
    return *this;
}
mutation_data &mutation_data::operator=(mutation_data &&other17)
{
    header = std::move(other17.header);
    updates = std::move(other17.updates);
    __isset = std::move(other17.__isset);
    return *this;
}
void mutation_data::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "mutation_data(";
    out << "header=" << to_string(header);
    out << ", "
        << "updates=" << to_string(updates);
    out << ")";
}

replica_configuration::~replica_configuration() throw() {}

void replica_configuration::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void replica_configuration::__set_ballot(const int64_t val) { this->ballot = val; }

void replica_configuration::__set_primary(const ::dsn::rpc_address &val) { this->primary = val; }

void replica_configuration::__set_status(const partition_status::type val) { this->status = val; }

void replica_configuration::__set_learner_signature(const int64_t val)
{
    this->learner_signature = val;
}

void replica_configuration::__set_split_sync_to_child(const bool val)
{
    this->split_sync_to_child = val;
    __isset.split_sync_to_child = true;
}

uint32_t replica_configuration::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->ballot);
                this->__isset.ballot = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->primary.read(iprot);
                this->__isset.primary = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast18;
                xfer += iprot->readI32(ecast18);
                this->status = (partition_status::type)ecast18;
                this->__isset.status = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->learner_signature);
                this->__isset.learner_signature = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->split_sync_to_child);
                this->__isset.split_sync_to_child = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t replica_configuration::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("replica_configuration");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->ballot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("primary", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->primary.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("learner_signature", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->learner_signature);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.split_sync_to_child) {
        xfer +=
            oprot->writeFieldBegin("split_sync_to_child", ::apache::thrift::protocol::T_BOOL, 6);
        xfer += oprot->writeBool(this->split_sync_to_child);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(replica_configuration &a, replica_configuration &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.ballot, b.ballot);
    swap(a.primary, b.primary);
    swap(a.status, b.status);
    swap(a.learner_signature, b.learner_signature);
    swap(a.split_sync_to_child, b.split_sync_to_child);
    swap(a.__isset, b.__isset);
}

replica_configuration::replica_configuration(const replica_configuration &other19)
{
    pid = other19.pid;
    ballot = other19.ballot;
    primary = other19.primary;
    status = other19.status;
    learner_signature = other19.learner_signature;
    split_sync_to_child = other19.split_sync_to_child;
    __isset = other19.__isset;
}
replica_configuration::replica_configuration(replica_configuration &&other20)
{
    pid = std::move(other20.pid);
    ballot = std::move(other20.ballot);
    primary = std::move(other20.primary);
    status = std::move(other20.status);
    learner_signature = std::move(other20.learner_signature);
    split_sync_to_child = std::move(other20.split_sync_to_child);
    __isset = std::move(other20.__isset);
}
replica_configuration &replica_configuration::operator=(const replica_configuration &other21)
{
    pid = other21.pid;
    ballot = other21.ballot;
    primary = other21.primary;
    status = other21.status;
    learner_signature = other21.learner_signature;
    split_sync_to_child = other21.split_sync_to_child;
    __isset = other21.__isset;
    return *this;
}
replica_configuration &replica_configuration::operator=(replica_configuration &&other22)
{
    pid = std::move(other22.pid);
    ballot = std::move(other22.ballot);
    primary = std::move(other22.primary);
    status = std::move(other22.status);
    learner_signature = std::move(other22.learner_signature);
    split_sync_to_child = std::move(other22.split_sync_to_child);
    __isset = std::move(other22.__isset);
    return *this;
}
void replica_configuration::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "replica_configuration(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "ballot=" << to_string(ballot);
    out << ", "
        << "primary=" << to_string(primary);
    out << ", "
        << "status=" << to_string(status);
    out << ", "
        << "learner_signature=" << to_string(learner_signature);
    out << ", "
        << "split_sync_to_child=";
    (__isset.split_sync_to_child ? (out << to_string(split_sync_to_child)) : (out << "<null>"));
    out << ")";
}

prepare_msg::~prepare_msg() throw() {}

void prepare_msg::__set_config(const replica_configuration &val) { this->config = val; }

void prepare_msg::__set_mu(const mutation_data &val) { this->mu = val; }

uint32_t prepare_msg::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->config.read(iprot);
                this->__isset.config = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->mu.read(iprot);
                this->__isset.mu = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t prepare_msg::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("prepare_msg");

    xfer += oprot->writeFieldBegin("config", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->config.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("mu", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->mu.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(prepare_msg &a, prepare_msg &b)
{
    using ::std::swap;
    swap(a.config, b.config);
    swap(a.mu, b.mu);
    swap(a.__isset, b.__isset);
}

prepare_msg::prepare_msg(const prepare_msg &other23)
{
    config = other23.config;
    mu = other23.mu;
    __isset = other23.__isset;
}
prepare_msg::prepare_msg(prepare_msg &&other24)
{
    config = std::move(other24.config);
    mu = std::move(other24.mu);
    __isset = std::move(other24.__isset);
}
prepare_msg &prepare_msg::operator=(const prepare_msg &other25)
{
    config = other25.config;
    mu = other25.mu;
    __isset = other25.__isset;
    return *this;
}
prepare_msg &prepare_msg::operator=(prepare_msg &&other26)
{
    config = std::move(other26.config);
    mu = std::move(other26.mu);
    __isset = std::move(other26.__isset);
    return *this;
}
void prepare_msg::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "prepare_msg(";
    out << "config=" << to_string(config);
    out << ", "
        << "mu=" << to_string(mu);
    out << ")";
}

read_request_header::~read_request_header() throw() {}

void read_request_header::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void read_request_header::__set_code(const ::dsn::task_code &val) { this->code = val; }

void read_request_header::__set_semantic(const read_semantic::type val) { this->semantic = val; }

void read_request_header::__set_version_decree(const int64_t val) { this->version_decree = val; }

uint32_t read_request_header::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->code.read(iprot);
                this->__isset.code = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast27;
                xfer += iprot->readI32(ecast27);
                this->semantic = (read_semantic::type)ecast27;
                this->__isset.semantic = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->version_decree);
                this->__isset.version_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t read_request_header::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("read_request_header");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->code.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("semantic", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->semantic);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("version_decree", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->version_decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(read_request_header &a, read_request_header &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.code, b.code);
    swap(a.semantic, b.semantic);
    swap(a.version_decree, b.version_decree);
    swap(a.__isset, b.__isset);
}

read_request_header::read_request_header(const read_request_header &other28)
{
    pid = other28.pid;
    code = other28.code;
    semantic = other28.semantic;
    version_decree = other28.version_decree;
    __isset = other28.__isset;
}
read_request_header::read_request_header(read_request_header &&other29)
{
    pid = std::move(other29.pid);
    code = std::move(other29.code);
    semantic = std::move(other29.semantic);
    version_decree = std::move(other29.version_decree);
    __isset = std::move(other29.__isset);
}
read_request_header &read_request_header::operator=(const read_request_header &other30)
{
    pid = other30.pid;
    code = other30.code;
    semantic = other30.semantic;
    version_decree = other30.version_decree;
    __isset = other30.__isset;
    return *this;
}
read_request_header &read_request_header::operator=(read_request_header &&other31)
{
    pid = std::move(other31.pid);
    code = std::move(other31.code);
    semantic = std::move(other31.semantic);
    version_decree = std::move(other31.version_decree);
    __isset = std::move(other31.__isset);
    return *this;
}
void read_request_header::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "read_request_header(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "code=" << to_string(code);
    out << ", "
        << "semantic=" << to_string(semantic);
    out << ", "
        << "version_decree=" << to_string(version_decree);
    out << ")";
}

write_request_header::~write_request_header() throw() {}

void write_request_header::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void write_request_header::__set_code(const ::dsn::task_code &val) { this->code = val; }

uint32_t write_request_header::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->code.read(iprot);
                this->__isset.code = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t write_request_header::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("write_request_header");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->code.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(write_request_header &a, write_request_header &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.code, b.code);
    swap(a.__isset, b.__isset);
}

write_request_header::write_request_header(const write_request_header &other32)
{
    pid = other32.pid;
    code = other32.code;
    __isset = other32.__isset;
}
write_request_header::write_request_header(write_request_header &&other33)
{
    pid = std::move(other33.pid);
    code = std::move(other33.code);
    __isset = std::move(other33.__isset);
}
write_request_header &write_request_header::operator=(const write_request_header &other34)
{
    pid = other34.pid;
    code = other34.code;
    __isset = other34.__isset;
    return *this;
}
write_request_header &write_request_header::operator=(write_request_header &&other35)
{
    pid = std::move(other35.pid);
    code = std::move(other35.code);
    __isset = std::move(other35.__isset);
    return *this;
}
void write_request_header::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "write_request_header(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "code=" << to_string(code);
    out << ")";
}

rw_response_header::~rw_response_header() throw() {}

void rw_response_header::__set_err(const ::dsn::error_code &val) { this->err = val; }

uint32_t rw_response_header::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t rw_response_header::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("rw_response_header");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(rw_response_header &a, rw_response_header &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.__isset, b.__isset);
}

rw_response_header::rw_response_header(const rw_response_header &other36)
{
    err = other36.err;
    __isset = other36.__isset;
}
rw_response_header::rw_response_header(rw_response_header &&other37)
{
    err = std::move(other37.err);
    __isset = std::move(other37.__isset);
}
rw_response_header &rw_response_header::operator=(const rw_response_header &other38)
{
    err = other38.err;
    __isset = other38.__isset;
    return *this;
}
rw_response_header &rw_response_header::operator=(rw_response_header &&other39)
{
    err = std::move(other39.err);
    __isset = std::move(other39.__isset);
    return *this;
}
void rw_response_header::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "rw_response_header(";
    out << "err=" << to_string(err);
    out << ")";
}

prepare_ack::~prepare_ack() throw() {}

void prepare_ack::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void prepare_ack::__set_err(const ::dsn::error_code &val) { this->err = val; }

void prepare_ack::__set_ballot(const int64_t val) { this->ballot = val; }

void prepare_ack::__set_decree(const int64_t val) { this->decree = val; }

void prepare_ack::__set_last_committed_decree_in_app(const int64_t val)
{
    this->last_committed_decree_in_app = val;
}

void prepare_ack::__set_last_committed_decree_in_prepare_list(const int64_t val)
{
    this->last_committed_decree_in_prepare_list = val;
}

uint32_t prepare_ack::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->ballot);
                this->__isset.ballot = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->decree);
                this->__isset.decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_committed_decree_in_app);
                this->__isset.last_committed_decree_in_app = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_committed_decree_in_prepare_list);
                this->__isset.last_committed_decree_in_prepare_list = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t prepare_ack::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("prepare_ack");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->ballot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("decree", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "last_committed_decree_in_app", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->last_committed_decree_in_app);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "last_committed_decree_in_prepare_list", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->last_committed_decree_in_prepare_list);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(prepare_ack &a, prepare_ack &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.err, b.err);
    swap(a.ballot, b.ballot);
    swap(a.decree, b.decree);
    swap(a.last_committed_decree_in_app, b.last_committed_decree_in_app);
    swap(a.last_committed_decree_in_prepare_list, b.last_committed_decree_in_prepare_list);
    swap(a.__isset, b.__isset);
}

prepare_ack::prepare_ack(const prepare_ack &other40)
{
    pid = other40.pid;
    err = other40.err;
    ballot = other40.ballot;
    decree = other40.decree;
    last_committed_decree_in_app = other40.last_committed_decree_in_app;
    last_committed_decree_in_prepare_list = other40.last_committed_decree_in_prepare_list;
    __isset = other40.__isset;
}
prepare_ack::prepare_ack(prepare_ack &&other41)
{
    pid = std::move(other41.pid);
    err = std::move(other41.err);
    ballot = std::move(other41.ballot);
    decree = std::move(other41.decree);
    last_committed_decree_in_app = std::move(other41.last_committed_decree_in_app);
    last_committed_decree_in_prepare_list =
        std::move(other41.last_committed_decree_in_prepare_list);
    __isset = std::move(other41.__isset);
}
prepare_ack &prepare_ack::operator=(const prepare_ack &other42)
{
    pid = other42.pid;
    err = other42.err;
    ballot = other42.ballot;
    decree = other42.decree;
    last_committed_decree_in_app = other42.last_committed_decree_in_app;
    last_committed_decree_in_prepare_list = other42.last_committed_decree_in_prepare_list;
    __isset = other42.__isset;
    return *this;
}
prepare_ack &prepare_ack::operator=(prepare_ack &&other43)
{
    pid = std::move(other43.pid);
    err = std::move(other43.err);
    ballot = std::move(other43.ballot);
    decree = std::move(other43.decree);
    last_committed_decree_in_app = std::move(other43.last_committed_decree_in_app);
    last_committed_decree_in_prepare_list =
        std::move(other43.last_committed_decree_in_prepare_list);
    __isset = std::move(other43.__isset);
    return *this;
}
void prepare_ack::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "prepare_ack(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "err=" << to_string(err);
    out << ", "
        << "ballot=" << to_string(ballot);
    out << ", "
        << "decree=" << to_string(decree);
    out << ", "
        << "last_committed_decree_in_app=" << to_string(last_committed_decree_in_app);
    out << ", "
        << "last_committed_decree_in_prepare_list="
        << to_string(last_committed_decree_in_prepare_list);
    out << ")";
}

learn_state::~learn_state() throw() {}

void learn_state::__set_from_decree_excluded(const int64_t val)
{
    this->from_decree_excluded = val;
}

void learn_state::__set_to_decree_included(const int64_t val) { this->to_decree_included = val; }

void learn_state::__set_meta(const ::dsn::blob &val) { this->meta = val; }

void learn_state::__set_files(const std::vector<std::string> &val) { this->files = val; }

void learn_state::__set_learn_start_decree(const int64_t val)
{
    this->learn_start_decree = val;
    __isset.learn_start_decree = true;
}

uint32_t learn_state::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->from_decree_excluded);
                this->__isset.from_decree_excluded = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->to_decree_included);
                this->__isset.to_decree_included = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->meta.read(iprot);
                this->__isset.meta = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->files.clear();
                    uint32_t _size44;
                    ::apache::thrift::protocol::TType _etype47;
                    xfer += iprot->readListBegin(_etype47, _size44);
                    this->files.resize(_size44);
                    uint32_t _i48;
                    for (_i48 = 0; _i48 < _size44; ++_i48) {
                        xfer += iprot->readString(this->files[_i48]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.files = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->learn_start_decree);
                this->__isset.learn_start_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t learn_state::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("learn_state");

    xfer += oprot->writeFieldBegin("from_decree_excluded", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->from_decree_excluded);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("to_decree_included", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->to_decree_included);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("meta", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->meta.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("files", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING,
                                      static_cast<uint32_t>(this->files.size()));
        std::vector<std::string>::const_iterator _iter49;
        for (_iter49 = this->files.begin(); _iter49 != this->files.end(); ++_iter49) {
            xfer += oprot->writeString((*_iter49));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    if (this->__isset.learn_start_decree) {
        xfer += oprot->writeFieldBegin("learn_start_decree", ::apache::thrift::protocol::T_I64, 5);
        xfer += oprot->writeI64(this->learn_start_decree);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(learn_state &a, learn_state &b)
{
    using ::std::swap;
    swap(a.from_decree_excluded, b.from_decree_excluded);
    swap(a.to_decree_included, b.to_decree_included);
    swap(a.meta, b.meta);
    swap(a.files, b.files);
    swap(a.learn_start_decree, b.learn_start_decree);
    swap(a.__isset, b.__isset);
}

learn_state::learn_state(const learn_state &other50)
{
    from_decree_excluded = other50.from_decree_excluded;
    to_decree_included = other50.to_decree_included;
    meta = other50.meta;
    files = other50.files;
    learn_start_decree = other50.learn_start_decree;
    __isset = other50.__isset;
}
learn_state::learn_state(learn_state &&other51)
{
    from_decree_excluded = std::move(other51.from_decree_excluded);
    to_decree_included = std::move(other51.to_decree_included);
    meta = std::move(other51.meta);
    files = std::move(other51.files);
    learn_start_decree = std::move(other51.learn_start_decree);
    __isset = std::move(other51.__isset);
}
learn_state &learn_state::operator=(const learn_state &other52)
{
    from_decree_excluded = other52.from_decree_excluded;
    to_decree_included = other52.to_decree_included;
    meta = other52.meta;
    files = other52.files;
    learn_start_decree = other52.learn_start_decree;
    __isset = other52.__isset;
    return *this;
}
learn_state &learn_state::operator=(learn_state &&other53)
{
    from_decree_excluded = std::move(other53.from_decree_excluded);
    to_decree_included = std::move(other53.to_decree_included);
    meta = std::move(other53.meta);
    files = std::move(other53.files);
    learn_start_decree = std::move(other53.learn_start_decree);
    __isset = std::move(other53.__isset);
    return *this;
}
void learn_state::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "learn_state(";
    out << "from_decree_excluded=" << to_string(from_decree_excluded);
    out << ", "
        << "to_decree_included=" << to_string(to_decree_included);
    out << ", "
        << "meta=" << to_string(meta);
    out << ", "
        << "files=" << to_string(files);
    out << ", "
        << "learn_start_decree=";
    (__isset.learn_start_decree ? (out << to_string(learn_start_decree)) : (out << "<null>"));
    out << ")";
}

learn_request::~learn_request() throw() {}

void learn_request::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void learn_request::__set_learner(const ::dsn::rpc_address &val) { this->learner = val; }

void learn_request::__set_signature(const int64_t val) { this->signature = val; }

void learn_request::__set_last_committed_decree_in_app(const int64_t val)
{
    this->last_committed_decree_in_app = val;
}

void learn_request::__set_last_committed_decree_in_prepare_list(const int64_t val)
{
    this->last_committed_decree_in_prepare_list = val;
}

void learn_request::__set_app_specific_learn_request(const ::dsn::blob &val)
{
    this->app_specific_learn_request = val;
}

void learn_request::__set_max_gced_decree(const int64_t val)
{
    this->max_gced_decree = val;
    __isset.max_gced_decree = true;
}

uint32_t learn_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->learner.read(iprot);
                this->__isset.learner = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->signature);
                this->__isset.signature = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_committed_decree_in_app);
                this->__isset.last_committed_decree_in_app = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_committed_decree_in_prepare_list);
                this->__isset.last_committed_decree_in_prepare_list = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->app_specific_learn_request.read(iprot);
                this->__isset.app_specific_learn_request = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 7:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->max_gced_decree);
                this->__isset.max_gced_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t learn_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("learn_request");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("learner", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->learner.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("signature", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->signature);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "last_committed_decree_in_app", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->last_committed_decree_in_app);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "last_committed_decree_in_prepare_list", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->last_committed_decree_in_prepare_list);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "app_specific_learn_request", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->app_specific_learn_request.write(oprot);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.max_gced_decree) {
        xfer += oprot->writeFieldBegin("max_gced_decree", ::apache::thrift::protocol::T_I64, 7);
        xfer += oprot->writeI64(this->max_gced_decree);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(learn_request &a, learn_request &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.learner, b.learner);
    swap(a.signature, b.signature);
    swap(a.last_committed_decree_in_app, b.last_committed_decree_in_app);
    swap(a.last_committed_decree_in_prepare_list, b.last_committed_decree_in_prepare_list);
    swap(a.app_specific_learn_request, b.app_specific_learn_request);
    swap(a.max_gced_decree, b.max_gced_decree);
    swap(a.__isset, b.__isset);
}

learn_request::learn_request(const learn_request &other54)
{
    pid = other54.pid;
    learner = other54.learner;
    signature = other54.signature;
    last_committed_decree_in_app = other54.last_committed_decree_in_app;
    last_committed_decree_in_prepare_list = other54.last_committed_decree_in_prepare_list;
    app_specific_learn_request = other54.app_specific_learn_request;
    max_gced_decree = other54.max_gced_decree;
    __isset = other54.__isset;
}
learn_request::learn_request(learn_request &&other55)
{
    pid = std::move(other55.pid);
    learner = std::move(other55.learner);
    signature = std::move(other55.signature);
    last_committed_decree_in_app = std::move(other55.last_committed_decree_in_app);
    last_committed_decree_in_prepare_list =
        std::move(other55.last_committed_decree_in_prepare_list);
    app_specific_learn_request = std::move(other55.app_specific_learn_request);
    max_gced_decree = std::move(other55.max_gced_decree);
    __isset = std::move(other55.__isset);
}
learn_request &learn_request::operator=(const learn_request &other56)
{
    pid = other56.pid;
    learner = other56.learner;
    signature = other56.signature;
    last_committed_decree_in_app = other56.last_committed_decree_in_app;
    last_committed_decree_in_prepare_list = other56.last_committed_decree_in_prepare_list;
    app_specific_learn_request = other56.app_specific_learn_request;
    max_gced_decree = other56.max_gced_decree;
    __isset = other56.__isset;
    return *this;
}
learn_request &learn_request::operator=(learn_request &&other57)
{
    pid = std::move(other57.pid);
    learner = std::move(other57.learner);
    signature = std::move(other57.signature);
    last_committed_decree_in_app = std::move(other57.last_committed_decree_in_app);
    last_committed_decree_in_prepare_list =
        std::move(other57.last_committed_decree_in_prepare_list);
    app_specific_learn_request = std::move(other57.app_specific_learn_request);
    max_gced_decree = std::move(other57.max_gced_decree);
    __isset = std::move(other57.__isset);
    return *this;
}
void learn_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "learn_request(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "learner=" << to_string(learner);
    out << ", "
        << "signature=" << to_string(signature);
    out << ", "
        << "last_committed_decree_in_app=" << to_string(last_committed_decree_in_app);
    out << ", "
        << "last_committed_decree_in_prepare_list="
        << to_string(last_committed_decree_in_prepare_list);
    out << ", "
        << "app_specific_learn_request=" << to_string(app_specific_learn_request);
    out << ", "
        << "max_gced_decree=";
    (__isset.max_gced_decree ? (out << to_string(max_gced_decree)) : (out << "<null>"));
    out << ")";
}

learn_response::~learn_response() throw() {}

void learn_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void learn_response::__set_config(const replica_configuration &val) { this->config = val; }

void learn_response::__set_last_committed_decree(const int64_t val)
{
    this->last_committed_decree = val;
}

void learn_response::__set_prepare_start_decree(const int64_t val)
{
    this->prepare_start_decree = val;
}

void learn_response::__set_type(const learn_type::type val) { this->type = val; }

void learn_response::__set_state(const learn_state &val) { this->state = val; }

void learn_response::__set_address(const ::dsn::rpc_address &val) { this->address = val; }

void learn_response::__set_base_local_dir(const std::string &val) { this->base_local_dir = val; }

uint32_t learn_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->config.read(iprot);
                this->__isset.config = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_committed_decree);
                this->__isset.last_committed_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->prepare_start_decree);
                this->__isset.prepare_start_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast58;
                xfer += iprot->readI32(ecast58);
                this->type = (learn_type::type)ecast58;
                this->__isset.type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->state.read(iprot);
                this->__isset.state = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 7:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->address.read(iprot);
                this->__isset.address = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 8:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->base_local_dir);
                this->__isset.base_local_dir = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t learn_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("learn_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("config", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->config.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("last_committed_decree", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->last_committed_decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("prepare_start_decree", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->prepare_start_decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->state.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->address.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("base_local_dir", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->base_local_dir);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(learn_response &a, learn_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.config, b.config);
    swap(a.last_committed_decree, b.last_committed_decree);
    swap(a.prepare_start_decree, b.prepare_start_decree);
    swap(a.type, b.type);
    swap(a.state, b.state);
    swap(a.address, b.address);
    swap(a.base_local_dir, b.base_local_dir);
    swap(a.__isset, b.__isset);
}

learn_response::learn_response(const learn_response &other59)
{
    err = other59.err;
    config = other59.config;
    last_committed_decree = other59.last_committed_decree;
    prepare_start_decree = other59.prepare_start_decree;
    type = other59.type;
    state = other59.state;
    address = other59.address;
    base_local_dir = other59.base_local_dir;
    __isset = other59.__isset;
}
learn_response::learn_response(learn_response &&other60)
{
    err = std::move(other60.err);
    config = std::move(other60.config);
    last_committed_decree = std::move(other60.last_committed_decree);
    prepare_start_decree = std::move(other60.prepare_start_decree);
    type = std::move(other60.type);
    state = std::move(other60.state);
    address = std::move(other60.address);
    base_local_dir = std::move(other60.base_local_dir);
    __isset = std::move(other60.__isset);
}
learn_response &learn_response::operator=(const learn_response &other61)
{
    err = other61.err;
    config = other61.config;
    last_committed_decree = other61.last_committed_decree;
    prepare_start_decree = other61.prepare_start_decree;
    type = other61.type;
    state = other61.state;
    address = other61.address;
    base_local_dir = other61.base_local_dir;
    __isset = other61.__isset;
    return *this;
}
learn_response &learn_response::operator=(learn_response &&other62)
{
    err = std::move(other62.err);
    config = std::move(other62.config);
    last_committed_decree = std::move(other62.last_committed_decree);
    prepare_start_decree = std::move(other62.prepare_start_decree);
    type = std::move(other62.type);
    state = std::move(other62.state);
    address = std::move(other62.address);
    base_local_dir = std::move(other62.base_local_dir);
    __isset = std::move(other62.__isset);
    return *this;
}
void learn_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "learn_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "config=" << to_string(config);
    out << ", "
        << "last_committed_decree=" << to_string(last_committed_decree);
    out << ", "
        << "prepare_start_decree=" << to_string(prepare_start_decree);
    out << ", "
        << "type=" << to_string(type);
    out << ", "
        << "state=" << to_string(state);
    out << ", "
        << "address=" << to_string(address);
    out << ", "
        << "base_local_dir=" << to_string(base_local_dir);
    out << ")";
}

learn_notify_response::~learn_notify_response() throw() {}

void learn_notify_response::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void learn_notify_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void learn_notify_response::__set_signature(const int64_t val) { this->signature = val; }

uint32_t learn_notify_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->signature);
                this->__isset.signature = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t learn_notify_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("learn_notify_response");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("signature", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->signature);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(learn_notify_response &a, learn_notify_response &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.err, b.err);
    swap(a.signature, b.signature);
    swap(a.__isset, b.__isset);
}

learn_notify_response::learn_notify_response(const learn_notify_response &other63)
{
    pid = other63.pid;
    err = other63.err;
    signature = other63.signature;
    __isset = other63.__isset;
}
learn_notify_response::learn_notify_response(learn_notify_response &&other64)
{
    pid = std::move(other64.pid);
    err = std::move(other64.err);
    signature = std::move(other64.signature);
    __isset = std::move(other64.__isset);
}
learn_notify_response &learn_notify_response::operator=(const learn_notify_response &other65)
{
    pid = other65.pid;
    err = other65.err;
    signature = other65.signature;
    __isset = other65.__isset;
    return *this;
}
learn_notify_response &learn_notify_response::operator=(learn_notify_response &&other66)
{
    pid = std::move(other66.pid);
    err = std::move(other66.err);
    signature = std::move(other66.signature);
    __isset = std::move(other66.__isset);
    return *this;
}
void learn_notify_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "learn_notify_response(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "err=" << to_string(err);
    out << ", "
        << "signature=" << to_string(signature);
    out << ")";
}

group_check_request::~group_check_request() throw() {}

void group_check_request::__set_app(const ::dsn::app_info &val) { this->app = val; }

void group_check_request::__set_node(const ::dsn::rpc_address &val) { this->node = val; }

void group_check_request::__set_config(const replica_configuration &val) { this->config = val; }

void group_check_request::__set_last_committed_decree(const int64_t val)
{
    this->last_committed_decree = val;
}

void group_check_request::__set_confirmed_decree(const int64_t val)
{
    this->confirmed_decree = val;
    __isset.confirmed_decree = true;
}

void group_check_request::__set_child_gpid(const ::dsn::gpid &val)
{
    this->child_gpid = val;
    __isset.child_gpid = true;
}

uint32_t group_check_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->app.read(iprot);
                this->__isset.app = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->node.read(iprot);
                this->__isset.node = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->config.read(iprot);
                this->__isset.config = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_committed_decree);
                this->__isset.last_committed_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->confirmed_decree);
                this->__isset.confirmed_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->child_gpid.read(iprot);
                this->__isset.child_gpid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t group_check_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("group_check_request");

    xfer += oprot->writeFieldBegin("app", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->app.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->node.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("config", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->config.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("last_committed_decree", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->last_committed_decree);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.confirmed_decree) {
        xfer += oprot->writeFieldBegin("confirmed_decree", ::apache::thrift::protocol::T_I64, 5);
        xfer += oprot->writeI64(this->confirmed_decree);
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.child_gpid) {
        xfer += oprot->writeFieldBegin("child_gpid", ::apache::thrift::protocol::T_STRUCT, 6);
        xfer += this->child_gpid.write(oprot);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(group_check_request &a, group_check_request &b)
{
    using ::std::swap;
    swap(a.app, b.app);
    swap(a.node, b.node);
    swap(a.config, b.config);
    swap(a.last_committed_decree, b.last_committed_decree);
    swap(a.confirmed_decree, b.confirmed_decree);
    swap(a.child_gpid, b.child_gpid);
    swap(a.__isset, b.__isset);
}

group_check_request::group_check_request(const group_check_request &other67)
{
    app = other67.app;
    node = other67.node;
    config = other67.config;
    last_committed_decree = other67.last_committed_decree;
    confirmed_decree = other67.confirmed_decree;
    child_gpid = other67.child_gpid;
    __isset = other67.__isset;
}
group_check_request::group_check_request(group_check_request &&other68)
{
    app = std::move(other68.app);
    node = std::move(other68.node);
    config = std::move(other68.config);
    last_committed_decree = std::move(other68.last_committed_decree);
    confirmed_decree = std::move(other68.confirmed_decree);
    child_gpid = std::move(other68.child_gpid);
    __isset = std::move(other68.__isset);
}
group_check_request &group_check_request::operator=(const group_check_request &other69)
{
    app = other69.app;
    node = other69.node;
    config = other69.config;
    last_committed_decree = other69.last_committed_decree;
    confirmed_decree = other69.confirmed_decree;
    child_gpid = other69.child_gpid;
    __isset = other69.__isset;
    return *this;
}
group_check_request &group_check_request::operator=(group_check_request &&other70)
{
    app = std::move(other70.app);
    node = std::move(other70.node);
    config = std::move(other70.config);
    last_committed_decree = std::move(other70.last_committed_decree);
    confirmed_decree = std::move(other70.confirmed_decree);
    child_gpid = std::move(other70.child_gpid);
    __isset = std::move(other70.__isset);
    return *this;
}
void group_check_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "group_check_request(";
    out << "app=" << to_string(app);
    out << ", "
        << "node=" << to_string(node);
    out << ", "
        << "config=" << to_string(config);
    out << ", "
        << "last_committed_decree=" << to_string(last_committed_decree);
    out << ", "
        << "confirmed_decree=";
    (__isset.confirmed_decree ? (out << to_string(confirmed_decree)) : (out << "<null>"));
    out << ", "
        << "child_gpid=";
    (__isset.child_gpid ? (out << to_string(child_gpid)) : (out << "<null>"));
    out << ")";
}

group_check_response::~group_check_response() throw() {}

void group_check_response::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void group_check_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void group_check_response::__set_last_committed_decree_in_app(const int64_t val)
{
    this->last_committed_decree_in_app = val;
}

void group_check_response::__set_last_committed_decree_in_prepare_list(const int64_t val)
{
    this->last_committed_decree_in_prepare_list = val;
}

void group_check_response::__set_learner_status_(const learner_status::type val)
{
    this->learner_status_ = val;
}

void group_check_response::__set_learner_signature(const int64_t val)
{
    this->learner_signature = val;
}

void group_check_response::__set_node(const ::dsn::rpc_address &val) { this->node = val; }

uint32_t group_check_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_committed_decree_in_app);
                this->__isset.last_committed_decree_in_app = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_committed_decree_in_prepare_list);
                this->__isset.last_committed_decree_in_prepare_list = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast71;
                xfer += iprot->readI32(ecast71);
                this->learner_status_ = (learner_status::type)ecast71;
                this->__isset.learner_status_ = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->learner_signature);
                this->__isset.learner_signature = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 7:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->node.read(iprot);
                this->__isset.node = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t group_check_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("group_check_response");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "last_committed_decree_in_app", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->last_committed_decree_in_app);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "last_committed_decree_in_prepare_list", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->last_committed_decree_in_prepare_list);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("learner_status_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32((int32_t)this->learner_status_);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("learner_signature", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->learner_signature);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->node.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(group_check_response &a, group_check_response &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.err, b.err);
    swap(a.last_committed_decree_in_app, b.last_committed_decree_in_app);
    swap(a.last_committed_decree_in_prepare_list, b.last_committed_decree_in_prepare_list);
    swap(a.learner_status_, b.learner_status_);
    swap(a.learner_signature, b.learner_signature);
    swap(a.node, b.node);
    swap(a.__isset, b.__isset);
}

group_check_response::group_check_response(const group_check_response &other72)
{
    pid = other72.pid;
    err = other72.err;
    last_committed_decree_in_app = other72.last_committed_decree_in_app;
    last_committed_decree_in_prepare_list = other72.last_committed_decree_in_prepare_list;
    learner_status_ = other72.learner_status_;
    learner_signature = other72.learner_signature;
    node = other72.node;
    __isset = other72.__isset;
}
group_check_response::group_check_response(group_check_response &&other73)
{
    pid = std::move(other73.pid);
    err = std::move(other73.err);
    last_committed_decree_in_app = std::move(other73.last_committed_decree_in_app);
    last_committed_decree_in_prepare_list =
        std::move(other73.last_committed_decree_in_prepare_list);
    learner_status_ = std::move(other73.learner_status_);
    learner_signature = std::move(other73.learner_signature);
    node = std::move(other73.node);
    __isset = std::move(other73.__isset);
}
group_check_response &group_check_response::operator=(const group_check_response &other74)
{
    pid = other74.pid;
    err = other74.err;
    last_committed_decree_in_app = other74.last_committed_decree_in_app;
    last_committed_decree_in_prepare_list = other74.last_committed_decree_in_prepare_list;
    learner_status_ = other74.learner_status_;
    learner_signature = other74.learner_signature;
    node = other74.node;
    __isset = other74.__isset;
    return *this;
}
group_check_response &group_check_response::operator=(group_check_response &&other75)
{
    pid = std::move(other75.pid);
    err = std::move(other75.err);
    last_committed_decree_in_app = std::move(other75.last_committed_decree_in_app);
    last_committed_decree_in_prepare_list =
        std::move(other75.last_committed_decree_in_prepare_list);
    learner_status_ = std::move(other75.learner_status_);
    learner_signature = std::move(other75.learner_signature);
    node = std::move(other75.node);
    __isset = std::move(other75.__isset);
    return *this;
}
void group_check_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "group_check_response(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "err=" << to_string(err);
    out << ", "
        << "last_committed_decree_in_app=" << to_string(last_committed_decree_in_app);
    out << ", "
        << "last_committed_decree_in_prepare_list="
        << to_string(last_committed_decree_in_prepare_list);
    out << ", "
        << "learner_status_=" << to_string(learner_status_);
    out << ", "
        << "learner_signature=" << to_string(learner_signature);
    out << ", "
        << "node=" << to_string(node);
    out << ")";
}

node_info::~node_info() throw() {}

void node_info::__set_status(const node_status::type val) { this->status = val; }

void node_info::__set_address(const ::dsn::rpc_address &val) { this->address = val; }

uint32_t node_info::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast76;
                xfer += iprot->readI32(ecast76);
                this->status = (node_status::type)ecast76;
                this->__isset.status = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->address.read(iprot);
                this->__isset.address = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t node_info::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("node_info");

    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->address.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(node_info &a, node_info &b)
{
    using ::std::swap;
    swap(a.status, b.status);
    swap(a.address, b.address);
    swap(a.__isset, b.__isset);
}

node_info::node_info(const node_info &other77)
{
    status = other77.status;
    address = other77.address;
    __isset = other77.__isset;
}
node_info::node_info(node_info &&other78)
{
    status = std::move(other78.status);
    address = std::move(other78.address);
    __isset = std::move(other78.__isset);
}
node_info &node_info::operator=(const node_info &other79)
{
    status = other79.status;
    address = other79.address;
    __isset = other79.__isset;
    return *this;
}
node_info &node_info::operator=(node_info &&other80)
{
    status = std::move(other80.status);
    address = std::move(other80.address);
    __isset = std::move(other80.__isset);
    return *this;
}
void node_info::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "node_info(";
    out << "status=" << to_string(status);
    out << ", "
        << "address=" << to_string(address);
    out << ")";
}

configuration_update_request::~configuration_update_request() throw() {}

void configuration_update_request::__set_info(const ::dsn::app_info &val) { this->info = val; }

void configuration_update_request::__set_config(const ::dsn::partition_configuration &val)
{
    this->config = val;
}

void configuration_update_request::__set_type(const config_type::type val) { this->type = val; }

void configuration_update_request::__set_node(const ::dsn::rpc_address &val) { this->node = val; }

void configuration_update_request::__set_host_node(const ::dsn::rpc_address &val)
{
    this->host_node = val;
}

uint32_t configuration_update_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->info.read(iprot);
                this->__isset.info = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->config.read(iprot);
                this->__isset.config = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast81;
                xfer += iprot->readI32(ecast81);
                this->type = (config_type::type)ecast81;
                this->__isset.type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->node.read(iprot);
                this->__isset.node = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->host_node.read(iprot);
                this->__isset.host_node = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_update_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_update_request");

    xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->info.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("config", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->config.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->node.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("host_node", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->host_node.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_update_request &a, configuration_update_request &b)
{
    using ::std::swap;
    swap(a.info, b.info);
    swap(a.config, b.config);
    swap(a.type, b.type);
    swap(a.node, b.node);
    swap(a.host_node, b.host_node);
    swap(a.__isset, b.__isset);
}

configuration_update_request::configuration_update_request(
    const configuration_update_request &other82)
{
    info = other82.info;
    config = other82.config;
    type = other82.type;
    node = other82.node;
    host_node = other82.host_node;
    __isset = other82.__isset;
}
configuration_update_request::configuration_update_request(configuration_update_request &&other83)
{
    info = std::move(other83.info);
    config = std::move(other83.config);
    type = std::move(other83.type);
    node = std::move(other83.node);
    host_node = std::move(other83.host_node);
    __isset = std::move(other83.__isset);
}
configuration_update_request &configuration_update_request::
operator=(const configuration_update_request &other84)
{
    info = other84.info;
    config = other84.config;
    type = other84.type;
    node = other84.node;
    host_node = other84.host_node;
    __isset = other84.__isset;
    return *this;
}
configuration_update_request &configuration_update_request::
operator=(configuration_update_request &&other85)
{
    info = std::move(other85.info);
    config = std::move(other85.config);
    type = std::move(other85.type);
    node = std::move(other85.node);
    host_node = std::move(other85.host_node);
    __isset = std::move(other85.__isset);
    return *this;
}
void configuration_update_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_update_request(";
    out << "info=" << to_string(info);
    out << ", "
        << "config=" << to_string(config);
    out << ", "
        << "type=" << to_string(type);
    out << ", "
        << "node=" << to_string(node);
    out << ", "
        << "host_node=" << to_string(host_node);
    out << ")";
}

configuration_update_response::~configuration_update_response() throw() {}

void configuration_update_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void configuration_update_response::__set_config(const ::dsn::partition_configuration &val)
{
    this->config = val;
}

uint32_t configuration_update_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->config.read(iprot);
                this->__isset.config = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_update_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_update_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("config", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->config.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_update_response &a, configuration_update_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.config, b.config);
    swap(a.__isset, b.__isset);
}

configuration_update_response::configuration_update_response(
    const configuration_update_response &other86)
{
    err = other86.err;
    config = other86.config;
    __isset = other86.__isset;
}
configuration_update_response::configuration_update_response(
    configuration_update_response &&other87)
{
    err = std::move(other87.err);
    config = std::move(other87.config);
    __isset = std::move(other87.__isset);
}
configuration_update_response &configuration_update_response::
operator=(const configuration_update_response &other88)
{
    err = other88.err;
    config = other88.config;
    __isset = other88.__isset;
    return *this;
}
configuration_update_response &configuration_update_response::
operator=(configuration_update_response &&other89)
{
    err = std::move(other89.err);
    config = std::move(other89.config);
    __isset = std::move(other89.__isset);
    return *this;
}
void configuration_update_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_update_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "config=" << to_string(config);
    out << ")";
}

replica_server_info::~replica_server_info() throw() {}

void replica_server_info::__set_geo_tags(const std::map<std::string, std::string> &val)
{
    this->geo_tags = val;
}

void replica_server_info::__set_total_capacity_mb(const int64_t val)
{
    this->total_capacity_mb = val;
}

uint32_t replica_server_info::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->geo_tags.clear();
                    uint32_t _size90;
                    ::apache::thrift::protocol::TType _ktype91;
                    ::apache::thrift::protocol::TType _vtype92;
                    xfer += iprot->readMapBegin(_ktype91, _vtype92, _size90);
                    uint32_t _i94;
                    for (_i94 = 0; _i94 < _size90; ++_i94) {
                        std::string _key95;
                        xfer += iprot->readString(_key95);
                        std::string &_val96 = this->geo_tags[_key95];
                        xfer += iprot->readString(_val96);
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.geo_tags = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->total_capacity_mb);
                this->__isset.total_capacity_mb = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t replica_server_info::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("replica_server_info");

    xfer += oprot->writeFieldBegin("geo_tags", ::apache::thrift::protocol::T_MAP, 1);
    {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING,
                                     ::apache::thrift::protocol::T_STRING,
                                     static_cast<uint32_t>(this->geo_tags.size()));
        std::map<std::string, std::string>::const_iterator _iter97;
        for (_iter97 = this->geo_tags.begin(); _iter97 != this->geo_tags.end(); ++_iter97) {
            xfer += oprot->writeString(_iter97->first);
            xfer += oprot->writeString(_iter97->second);
        }
        xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("total_capacity_mb", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->total_capacity_mb);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(replica_server_info &a, replica_server_info &b)
{
    using ::std::swap;
    swap(a.geo_tags, b.geo_tags);
    swap(a.total_capacity_mb, b.total_capacity_mb);
    swap(a.__isset, b.__isset);
}

replica_server_info::replica_server_info(const replica_server_info &other98)
{
    geo_tags = other98.geo_tags;
    total_capacity_mb = other98.total_capacity_mb;
    __isset = other98.__isset;
}
replica_server_info::replica_server_info(replica_server_info &&other99)
{
    geo_tags = std::move(other99.geo_tags);
    total_capacity_mb = std::move(other99.total_capacity_mb);
    __isset = std::move(other99.__isset);
}
replica_server_info &replica_server_info::operator=(const replica_server_info &other100)
{
    geo_tags = other100.geo_tags;
    total_capacity_mb = other100.total_capacity_mb;
    __isset = other100.__isset;
    return *this;
}
replica_server_info &replica_server_info::operator=(replica_server_info &&other101)
{
    geo_tags = std::move(other101.geo_tags);
    total_capacity_mb = std::move(other101.total_capacity_mb);
    __isset = std::move(other101.__isset);
    return *this;
}
void replica_server_info::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "replica_server_info(";
    out << "geo_tags=" << to_string(geo_tags);
    out << ", "
        << "total_capacity_mb=" << to_string(total_capacity_mb);
    out << ")";
}

configuration_query_by_node_request::~configuration_query_by_node_request() throw() {}

void configuration_query_by_node_request::__set_node(const ::dsn::rpc_address &val)
{
    this->node = val;
}

void configuration_query_by_node_request::__set_stored_replicas(
    const std::vector<replica_info> &val)
{
    this->stored_replicas = val;
    __isset.stored_replicas = true;
}

void configuration_query_by_node_request::__set_info(const replica_server_info &val)
{
    this->info = val;
    __isset.info = true;
}

uint32_t configuration_query_by_node_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->node.read(iprot);
                this->__isset.node = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->stored_replicas.clear();
                    uint32_t _size102;
                    ::apache::thrift::protocol::TType _etype105;
                    xfer += iprot->readListBegin(_etype105, _size102);
                    this->stored_replicas.resize(_size102);
                    uint32_t _i106;
                    for (_i106 = 0; _i106 < _size102; ++_i106) {
                        xfer += this->stored_replicas[_i106].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.stored_replicas = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->info.read(iprot);
                this->__isset.info = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_query_by_node_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_query_by_node_request");

    xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->node.write(oprot);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.stored_replicas) {
        xfer += oprot->writeFieldBegin("stored_replicas", ::apache::thrift::protocol::T_LIST, 2);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                          static_cast<uint32_t>(this->stored_replicas.size()));
            std::vector<replica_info>::const_iterator _iter107;
            for (_iter107 = this->stored_replicas.begin(); _iter107 != this->stored_replicas.end();
                 ++_iter107) {
                xfer += (*_iter107).write(oprot);
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.info) {
        xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRUCT, 3);
        xfer += this->info.write(oprot);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_query_by_node_request &a, configuration_query_by_node_request &b)
{
    using ::std::swap;
    swap(a.node, b.node);
    swap(a.stored_replicas, b.stored_replicas);
    swap(a.info, b.info);
    swap(a.__isset, b.__isset);
}

configuration_query_by_node_request::configuration_query_by_node_request(
    const configuration_query_by_node_request &other108)
{
    node = other108.node;
    stored_replicas = other108.stored_replicas;
    info = other108.info;
    __isset = other108.__isset;
}
configuration_query_by_node_request::configuration_query_by_node_request(
    configuration_query_by_node_request &&other109)
{
    node = std::move(other109.node);
    stored_replicas = std::move(other109.stored_replicas);
    info = std::move(other109.info);
    __isset = std::move(other109.__isset);
}
configuration_query_by_node_request &configuration_query_by_node_request::
operator=(const configuration_query_by_node_request &other110)
{
    node = other110.node;
    stored_replicas = other110.stored_replicas;
    info = other110.info;
    __isset = other110.__isset;
    return *this;
}
configuration_query_by_node_request &configuration_query_by_node_request::
operator=(configuration_query_by_node_request &&other111)
{
    node = std::move(other111.node);
    stored_replicas = std::move(other111.stored_replicas);
    info = std::move(other111.info);
    __isset = std::move(other111.__isset);
    return *this;
}
void configuration_query_by_node_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_query_by_node_request(";
    out << "node=" << to_string(node);
    out << ", "
        << "stored_replicas=";
    (__isset.stored_replicas ? (out << to_string(stored_replicas)) : (out << "<null>"));
    out << ", "
        << "info=";
    (__isset.info ? (out << to_string(info)) : (out << "<null>"));
    out << ")";
}

configuration_query_by_node_response::~configuration_query_by_node_response() throw() {}

void configuration_query_by_node_response::__set_err(const ::dsn::error_code &val)
{
    this->err = val;
}

void configuration_query_by_node_response::__set_partitions(
    const std::vector<configuration_update_request> &val)
{
    this->partitions = val;
}

void configuration_query_by_node_response::__set_gc_replicas(const std::vector<replica_info> &val)
{
    this->gc_replicas = val;
    __isset.gc_replicas = true;
}

void configuration_query_by_node_response::__set_splitting_replicas(
    const std::set<::dsn::gpid> &val)
{
    this->splitting_replicas = val;
    __isset.splitting_replicas = true;
}

uint32_t configuration_query_by_node_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->partitions.clear();
                    uint32_t _size112;
                    ::apache::thrift::protocol::TType _etype115;
                    xfer += iprot->readListBegin(_etype115, _size112);
                    this->partitions.resize(_size112);
                    uint32_t _i116;
                    for (_i116 = 0; _i116 < _size112; ++_i116) {
                        xfer += this->partitions[_i116].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.partitions = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->gc_replicas.clear();
                    uint32_t _size117;
                    ::apache::thrift::protocol::TType _etype120;
                    xfer += iprot->readListBegin(_etype120, _size117);
                    this->gc_replicas.resize(_size117);
                    uint32_t _i121;
                    for (_i121 = 0; _i121 < _size117; ++_i121) {
                        xfer += this->gc_replicas[_i121].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.gc_replicas = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_SET) {
                {
                    this->splitting_replicas.clear();
                    uint32_t _size122;
                    ::apache::thrift::protocol::TType _etype125;
                    xfer += iprot->readSetBegin(_etype125, _size122);
                    uint32_t _i126;
                    for (_i126 = 0; _i126 < _size122; ++_i126) {
                        ::dsn::gpid _elem127;
                        xfer += _elem127.read(iprot);
                        this->splitting_replicas.insert(_elem127);
                    }
                    xfer += iprot->readSetEnd();
                }
                this->__isset.splitting_replicas = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_query_by_node_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_query_by_node_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("partitions", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->partitions.size()));
        std::vector<configuration_update_request>::const_iterator _iter128;
        for (_iter128 = this->partitions.begin(); _iter128 != this->partitions.end(); ++_iter128) {
            xfer += (*_iter128).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    if (this->__isset.gc_replicas) {
        xfer += oprot->writeFieldBegin("gc_replicas", ::apache::thrift::protocol::T_LIST, 3);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                          static_cast<uint32_t>(this->gc_replicas.size()));
            std::vector<replica_info>::const_iterator _iter129;
            for (_iter129 = this->gc_replicas.begin(); _iter129 != this->gc_replicas.end();
                 ++_iter129) {
                xfer += (*_iter129).write(oprot);
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.splitting_replicas) {
        xfer += oprot->writeFieldBegin("splitting_replicas", ::apache::thrift::protocol::T_SET, 4);
        {
            xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRUCT,
                                         static_cast<uint32_t>(this->splitting_replicas.size()));
            std::set<::dsn::gpid>::const_iterator _iter130;
            for (_iter130 = this->splitting_replicas.begin();
                 _iter130 != this->splitting_replicas.end();
                 ++_iter130) {
                xfer += (*_iter130).write(oprot);
            }
            xfer += oprot->writeSetEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_query_by_node_response &a, configuration_query_by_node_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.partitions, b.partitions);
    swap(a.gc_replicas, b.gc_replicas);
    swap(a.splitting_replicas, b.splitting_replicas);
    swap(a.__isset, b.__isset);
}

configuration_query_by_node_response::configuration_query_by_node_response(
    const configuration_query_by_node_response &other131)
{
    err = other131.err;
    partitions = other131.partitions;
    gc_replicas = other131.gc_replicas;
    splitting_replicas = other131.splitting_replicas;
    __isset = other131.__isset;
}
configuration_query_by_node_response::configuration_query_by_node_response(
    configuration_query_by_node_response &&other132)
{
    err = std::move(other132.err);
    partitions = std::move(other132.partitions);
    gc_replicas = std::move(other132.gc_replicas);
    splitting_replicas = std::move(other132.splitting_replicas);
    __isset = std::move(other132.__isset);
}
configuration_query_by_node_response &configuration_query_by_node_response::
operator=(const configuration_query_by_node_response &other133)
{
    err = other133.err;
    partitions = other133.partitions;
    gc_replicas = other133.gc_replicas;
    splitting_replicas = other133.splitting_replicas;
    __isset = other133.__isset;
    return *this;
}
configuration_query_by_node_response &configuration_query_by_node_response::
operator=(configuration_query_by_node_response &&other134)
{
    err = std::move(other134.err);
    partitions = std::move(other134.partitions);
    gc_replicas = std::move(other134.gc_replicas);
    splitting_replicas = std::move(other134.splitting_replicas);
    __isset = std::move(other134.__isset);
    return *this;
}
void configuration_query_by_node_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_query_by_node_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "partitions=" << to_string(partitions);
    out << ", "
        << "gc_replicas=";
    (__isset.gc_replicas ? (out << to_string(gc_replicas)) : (out << "<null>"));
    out << ", "
        << "splitting_replicas=";
    (__isset.splitting_replicas ? (out << to_string(splitting_replicas)) : (out << "<null>"));
    out << ")";
}

create_app_options::~create_app_options() throw() {}

void create_app_options::__set_partition_count(const int32_t val) { this->partition_count = val; }

void create_app_options::__set_replica_count(const int32_t val) { this->replica_count = val; }

void create_app_options::__set_success_if_exist(const bool val) { this->success_if_exist = val; }

void create_app_options::__set_app_type(const std::string &val) { this->app_type = val; }

void create_app_options::__set_is_stateful(const bool val) { this->is_stateful = val; }

void create_app_options::__set_envs(const std::map<std::string, std::string> &val)
{
    this->envs = val;
}

uint32_t create_app_options::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->partition_count);
                this->__isset.partition_count = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->replica_count);
                this->__isset.replica_count = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->success_if_exist);
                this->__isset.success_if_exist = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_type);
                this->__isset.app_type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->is_stateful);
                this->__isset.is_stateful = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->envs.clear();
                    uint32_t _size135;
                    ::apache::thrift::protocol::TType _ktype136;
                    ::apache::thrift::protocol::TType _vtype137;
                    xfer += iprot->readMapBegin(_ktype136, _vtype137, _size135);
                    uint32_t _i139;
                    for (_i139 = 0; _i139 < _size135; ++_i139) {
                        std::string _key140;
                        xfer += iprot->readString(_key140);
                        std::string &_val141 = this->envs[_key140];
                        xfer += iprot->readString(_val141);
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.envs = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t create_app_options::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("create_app_options");

    xfer += oprot->writeFieldBegin("partition_count", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->partition_count);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("replica_count", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->replica_count);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("success_if_exist", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->success_if_exist);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("app_type", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->app_type);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("is_stateful", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->is_stateful);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("envs", ::apache::thrift::protocol::T_MAP, 6);
    {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING,
                                     ::apache::thrift::protocol::T_STRING,
                                     static_cast<uint32_t>(this->envs.size()));
        std::map<std::string, std::string>::const_iterator _iter142;
        for (_iter142 = this->envs.begin(); _iter142 != this->envs.end(); ++_iter142) {
            xfer += oprot->writeString(_iter142->first);
            xfer += oprot->writeString(_iter142->second);
        }
        xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(create_app_options &a, create_app_options &b)
{
    using ::std::swap;
    swap(a.partition_count, b.partition_count);
    swap(a.replica_count, b.replica_count);
    swap(a.success_if_exist, b.success_if_exist);
    swap(a.app_type, b.app_type);
    swap(a.is_stateful, b.is_stateful);
    swap(a.envs, b.envs);
    swap(a.__isset, b.__isset);
}

create_app_options::create_app_options(const create_app_options &other143)
{
    partition_count = other143.partition_count;
    replica_count = other143.replica_count;
    success_if_exist = other143.success_if_exist;
    app_type = other143.app_type;
    is_stateful = other143.is_stateful;
    envs = other143.envs;
    __isset = other143.__isset;
}
create_app_options::create_app_options(create_app_options &&other144)
{
    partition_count = std::move(other144.partition_count);
    replica_count = std::move(other144.replica_count);
    success_if_exist = std::move(other144.success_if_exist);
    app_type = std::move(other144.app_type);
    is_stateful = std::move(other144.is_stateful);
    envs = std::move(other144.envs);
    __isset = std::move(other144.__isset);
}
create_app_options &create_app_options::operator=(const create_app_options &other145)
{
    partition_count = other145.partition_count;
    replica_count = other145.replica_count;
    success_if_exist = other145.success_if_exist;
    app_type = other145.app_type;
    is_stateful = other145.is_stateful;
    envs = other145.envs;
    __isset = other145.__isset;
    return *this;
}
create_app_options &create_app_options::operator=(create_app_options &&other146)
{
    partition_count = std::move(other146.partition_count);
    replica_count = std::move(other146.replica_count);
    success_if_exist = std::move(other146.success_if_exist);
    app_type = std::move(other146.app_type);
    is_stateful = std::move(other146.is_stateful);
    envs = std::move(other146.envs);
    __isset = std::move(other146.__isset);
    return *this;
}
void create_app_options::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "create_app_options(";
    out << "partition_count=" << to_string(partition_count);
    out << ", "
        << "replica_count=" << to_string(replica_count);
    out << ", "
        << "success_if_exist=" << to_string(success_if_exist);
    out << ", "
        << "app_type=" << to_string(app_type);
    out << ", "
        << "is_stateful=" << to_string(is_stateful);
    out << ", "
        << "envs=" << to_string(envs);
    out << ")";
}

configuration_create_app_request::~configuration_create_app_request() throw() {}

void configuration_create_app_request::__set_app_name(const std::string &val)
{
    this->app_name = val;
}

void configuration_create_app_request::__set_options(const create_app_options &val)
{
    this->options = val;
}

uint32_t configuration_create_app_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->options.read(iprot);
                this->__isset.options = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_create_app_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_create_app_request");

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("options", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->options.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_create_app_request &a, configuration_create_app_request &b)
{
    using ::std::swap;
    swap(a.app_name, b.app_name);
    swap(a.options, b.options);
    swap(a.__isset, b.__isset);
}

configuration_create_app_request::configuration_create_app_request(
    const configuration_create_app_request &other147)
{
    app_name = other147.app_name;
    options = other147.options;
    __isset = other147.__isset;
}
configuration_create_app_request::configuration_create_app_request(
    configuration_create_app_request &&other148)
{
    app_name = std::move(other148.app_name);
    options = std::move(other148.options);
    __isset = std::move(other148.__isset);
}
configuration_create_app_request &configuration_create_app_request::
operator=(const configuration_create_app_request &other149)
{
    app_name = other149.app_name;
    options = other149.options;
    __isset = other149.__isset;
    return *this;
}
configuration_create_app_request &configuration_create_app_request::
operator=(configuration_create_app_request &&other150)
{
    app_name = std::move(other150.app_name);
    options = std::move(other150.options);
    __isset = std::move(other150.__isset);
    return *this;
}
void configuration_create_app_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_create_app_request(";
    out << "app_name=" << to_string(app_name);
    out << ", "
        << "options=" << to_string(options);
    out << ")";
}

drop_app_options::~drop_app_options() throw() {}

void drop_app_options::__set_success_if_not_exist(const bool val)
{
    this->success_if_not_exist = val;
}

void drop_app_options::__set_reserve_seconds(const int64_t val)
{
    this->reserve_seconds = val;
    __isset.reserve_seconds = true;
}

uint32_t drop_app_options::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->success_if_not_exist);
                this->__isset.success_if_not_exist = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->reserve_seconds);
                this->__isset.reserve_seconds = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t drop_app_options::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("drop_app_options");

    xfer += oprot->writeFieldBegin("success_if_not_exist", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->success_if_not_exist);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.reserve_seconds) {
        xfer += oprot->writeFieldBegin("reserve_seconds", ::apache::thrift::protocol::T_I64, 2);
        xfer += oprot->writeI64(this->reserve_seconds);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(drop_app_options &a, drop_app_options &b)
{
    using ::std::swap;
    swap(a.success_if_not_exist, b.success_if_not_exist);
    swap(a.reserve_seconds, b.reserve_seconds);
    swap(a.__isset, b.__isset);
}

drop_app_options::drop_app_options(const drop_app_options &other151)
{
    success_if_not_exist = other151.success_if_not_exist;
    reserve_seconds = other151.reserve_seconds;
    __isset = other151.__isset;
}
drop_app_options::drop_app_options(drop_app_options &&other152)
{
    success_if_not_exist = std::move(other152.success_if_not_exist);
    reserve_seconds = std::move(other152.reserve_seconds);
    __isset = std::move(other152.__isset);
}
drop_app_options &drop_app_options::operator=(const drop_app_options &other153)
{
    success_if_not_exist = other153.success_if_not_exist;
    reserve_seconds = other153.reserve_seconds;
    __isset = other153.__isset;
    return *this;
}
drop_app_options &drop_app_options::operator=(drop_app_options &&other154)
{
    success_if_not_exist = std::move(other154.success_if_not_exist);
    reserve_seconds = std::move(other154.reserve_seconds);
    __isset = std::move(other154.__isset);
    return *this;
}
void drop_app_options::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "drop_app_options(";
    out << "success_if_not_exist=" << to_string(success_if_not_exist);
    out << ", "
        << "reserve_seconds=";
    (__isset.reserve_seconds ? (out << to_string(reserve_seconds)) : (out << "<null>"));
    out << ")";
}

configuration_drop_app_request::~configuration_drop_app_request() throw() {}

void configuration_drop_app_request::__set_app_name(const std::string &val)
{
    this->app_name = val;
}

void configuration_drop_app_request::__set_options(const drop_app_options &val)
{
    this->options = val;
}

uint32_t configuration_drop_app_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->options.read(iprot);
                this->__isset.options = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_drop_app_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_drop_app_request");

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("options", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->options.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_drop_app_request &a, configuration_drop_app_request &b)
{
    using ::std::swap;
    swap(a.app_name, b.app_name);
    swap(a.options, b.options);
    swap(a.__isset, b.__isset);
}

configuration_drop_app_request::configuration_drop_app_request(
    const configuration_drop_app_request &other155)
{
    app_name = other155.app_name;
    options = other155.options;
    __isset = other155.__isset;
}
configuration_drop_app_request::configuration_drop_app_request(
    configuration_drop_app_request &&other156)
{
    app_name = std::move(other156.app_name);
    options = std::move(other156.options);
    __isset = std::move(other156.__isset);
}
configuration_drop_app_request &configuration_drop_app_request::
operator=(const configuration_drop_app_request &other157)
{
    app_name = other157.app_name;
    options = other157.options;
    __isset = other157.__isset;
    return *this;
}
configuration_drop_app_request &configuration_drop_app_request::
operator=(configuration_drop_app_request &&other158)
{
    app_name = std::move(other158.app_name);
    options = std::move(other158.options);
    __isset = std::move(other158.__isset);
    return *this;
}
void configuration_drop_app_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_drop_app_request(";
    out << "app_name=" << to_string(app_name);
    out << ", "
        << "options=" << to_string(options);
    out << ")";
}

configuration_list_apps_request::~configuration_list_apps_request() throw() {}

void configuration_list_apps_request::__set_status(const ::dsn::app_status::type val)
{
    this->status = val;
}

uint32_t configuration_list_apps_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast159;
                xfer += iprot->readI32(ecast159);
                this->status = (::dsn::app_status::type)ecast159;
                this->__isset.status = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_list_apps_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_list_apps_request");

    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_list_apps_request &a, configuration_list_apps_request &b)
{
    using ::std::swap;
    swap(a.status, b.status);
    swap(a.__isset, b.__isset);
}

configuration_list_apps_request::configuration_list_apps_request(
    const configuration_list_apps_request &other160)
{
    status = other160.status;
    __isset = other160.__isset;
}
configuration_list_apps_request::configuration_list_apps_request(
    configuration_list_apps_request &&other161)
{
    status = std::move(other161.status);
    __isset = std::move(other161.__isset);
}
configuration_list_apps_request &configuration_list_apps_request::
operator=(const configuration_list_apps_request &other162)
{
    status = other162.status;
    __isset = other162.__isset;
    return *this;
}
configuration_list_apps_request &configuration_list_apps_request::
operator=(configuration_list_apps_request &&other163)
{
    status = std::move(other163.status);
    __isset = std::move(other163.__isset);
    return *this;
}
void configuration_list_apps_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_list_apps_request(";
    out << "status=" << to_string(status);
    out << ")";
}

configuration_list_nodes_request::~configuration_list_nodes_request() throw() {}

void configuration_list_nodes_request::__set_status(const node_status::type val)
{
    this->status = val;
}

uint32_t configuration_list_nodes_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast164;
                xfer += iprot->readI32(ecast164);
                this->status = (node_status::type)ecast164;
                this->__isset.status = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_list_nodes_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_list_nodes_request");

    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_list_nodes_request &a, configuration_list_nodes_request &b)
{
    using ::std::swap;
    swap(a.status, b.status);
    swap(a.__isset, b.__isset);
}

configuration_list_nodes_request::configuration_list_nodes_request(
    const configuration_list_nodes_request &other165)
{
    status = other165.status;
    __isset = other165.__isset;
}
configuration_list_nodes_request::configuration_list_nodes_request(
    configuration_list_nodes_request &&other166)
{
    status = std::move(other166.status);
    __isset = std::move(other166.__isset);
}
configuration_list_nodes_request &configuration_list_nodes_request::
operator=(const configuration_list_nodes_request &other167)
{
    status = other167.status;
    __isset = other167.__isset;
    return *this;
}
configuration_list_nodes_request &configuration_list_nodes_request::
operator=(configuration_list_nodes_request &&other168)
{
    status = std::move(other168.status);
    __isset = std::move(other168.__isset);
    return *this;
}
void configuration_list_nodes_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_list_nodes_request(";
    out << "status=" << to_string(status);
    out << ")";
}

configuration_cluster_info_request::~configuration_cluster_info_request() throw() {}

uint32_t configuration_cluster_info_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        xfer += iprot->skip(ftype);
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_cluster_info_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_cluster_info_request");

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_cluster_info_request &a, configuration_cluster_info_request &b)
{
    using ::std::swap;
    (void)a;
    (void)b;
}

configuration_cluster_info_request::configuration_cluster_info_request(
    const configuration_cluster_info_request &other169)
{
    (void)other169;
}
configuration_cluster_info_request::configuration_cluster_info_request(
    configuration_cluster_info_request &&other170)
{
    (void)other170;
}
configuration_cluster_info_request &configuration_cluster_info_request::
operator=(const configuration_cluster_info_request &other171)
{
    (void)other171;
    return *this;
}
configuration_cluster_info_request &configuration_cluster_info_request::
operator=(configuration_cluster_info_request &&other172)
{
    (void)other172;
    return *this;
}
void configuration_cluster_info_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_cluster_info_request(";
    out << ")";
}

configuration_recall_app_request::~configuration_recall_app_request() throw() {}

void configuration_recall_app_request::__set_app_id(const int32_t val) { this->app_id = val; }

void configuration_recall_app_request::__set_new_app_name(const std::string &val)
{
    this->new_app_name = val;
}

uint32_t configuration_recall_app_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->app_id);
                this->__isset.app_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->new_app_name);
                this->__isset.new_app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_recall_app_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_recall_app_request");

    xfer += oprot->writeFieldBegin("app_id", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->app_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("new_app_name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->new_app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_recall_app_request &a, configuration_recall_app_request &b)
{
    using ::std::swap;
    swap(a.app_id, b.app_id);
    swap(a.new_app_name, b.new_app_name);
    swap(a.__isset, b.__isset);
}

configuration_recall_app_request::configuration_recall_app_request(
    const configuration_recall_app_request &other173)
{
    app_id = other173.app_id;
    new_app_name = other173.new_app_name;
    __isset = other173.__isset;
}
configuration_recall_app_request::configuration_recall_app_request(
    configuration_recall_app_request &&other174)
{
    app_id = std::move(other174.app_id);
    new_app_name = std::move(other174.new_app_name);
    __isset = std::move(other174.__isset);
}
configuration_recall_app_request &configuration_recall_app_request::
operator=(const configuration_recall_app_request &other175)
{
    app_id = other175.app_id;
    new_app_name = other175.new_app_name;
    __isset = other175.__isset;
    return *this;
}
configuration_recall_app_request &configuration_recall_app_request::
operator=(configuration_recall_app_request &&other176)
{
    app_id = std::move(other176.app_id);
    new_app_name = std::move(other176.new_app_name);
    __isset = std::move(other176.__isset);
    return *this;
}
void configuration_recall_app_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_recall_app_request(";
    out << "app_id=" << to_string(app_id);
    out << ", "
        << "new_app_name=" << to_string(new_app_name);
    out << ")";
}

configuration_create_app_response::~configuration_create_app_response() throw() {}

void configuration_create_app_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void configuration_create_app_response::__set_appid(const int32_t val) { this->appid = val; }

uint32_t configuration_create_app_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->appid);
                this->__isset.appid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_create_app_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_create_app_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("appid", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->appid);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_create_app_response &a, configuration_create_app_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.appid, b.appid);
    swap(a.__isset, b.__isset);
}

configuration_create_app_response::configuration_create_app_response(
    const configuration_create_app_response &other177)
{
    err = other177.err;
    appid = other177.appid;
    __isset = other177.__isset;
}
configuration_create_app_response::configuration_create_app_response(
    configuration_create_app_response &&other178)
{
    err = std::move(other178.err);
    appid = std::move(other178.appid);
    __isset = std::move(other178.__isset);
}
configuration_create_app_response &configuration_create_app_response::
operator=(const configuration_create_app_response &other179)
{
    err = other179.err;
    appid = other179.appid;
    __isset = other179.__isset;
    return *this;
}
configuration_create_app_response &configuration_create_app_response::
operator=(configuration_create_app_response &&other180)
{
    err = std::move(other180.err);
    appid = std::move(other180.appid);
    __isset = std::move(other180.__isset);
    return *this;
}
void configuration_create_app_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_create_app_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "appid=" << to_string(appid);
    out << ")";
}

configuration_meta_control_request::~configuration_meta_control_request() throw() {}

void configuration_meta_control_request::__set_level(const meta_function_level::type val)
{
    this->level = val;
}

uint32_t configuration_meta_control_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast181;
                xfer += iprot->readI32(ecast181);
                this->level = (meta_function_level::type)ecast181;
                this->__isset.level = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_meta_control_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_meta_control_request");

    xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->level);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_meta_control_request &a, configuration_meta_control_request &b)
{
    using ::std::swap;
    swap(a.level, b.level);
    swap(a.__isset, b.__isset);
}

configuration_meta_control_request::configuration_meta_control_request(
    const configuration_meta_control_request &other182)
{
    level = other182.level;
    __isset = other182.__isset;
}
configuration_meta_control_request::configuration_meta_control_request(
    configuration_meta_control_request &&other183)
{
    level = std::move(other183.level);
    __isset = std::move(other183.__isset);
}
configuration_meta_control_request &configuration_meta_control_request::
operator=(const configuration_meta_control_request &other184)
{
    level = other184.level;
    __isset = other184.__isset;
    return *this;
}
configuration_meta_control_request &configuration_meta_control_request::
operator=(configuration_meta_control_request &&other185)
{
    level = std::move(other185.level);
    __isset = std::move(other185.__isset);
    return *this;
}
void configuration_meta_control_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_meta_control_request(";
    out << "level=" << to_string(level);
    out << ")";
}

configuration_meta_control_response::~configuration_meta_control_response() throw() {}

void configuration_meta_control_response::__set_err(const ::dsn::error_code &val)
{
    this->err = val;
}

void configuration_meta_control_response::__set_old_level(const meta_function_level::type val)
{
    this->old_level = val;
}

uint32_t configuration_meta_control_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast186;
                xfer += iprot->readI32(ecast186);
                this->old_level = (meta_function_level::type)ecast186;
                this->__isset.old_level = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_meta_control_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_meta_control_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("old_level", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->old_level);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_meta_control_response &a, configuration_meta_control_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.old_level, b.old_level);
    swap(a.__isset, b.__isset);
}

configuration_meta_control_response::configuration_meta_control_response(
    const configuration_meta_control_response &other187)
{
    err = other187.err;
    old_level = other187.old_level;
    __isset = other187.__isset;
}
configuration_meta_control_response::configuration_meta_control_response(
    configuration_meta_control_response &&other188)
{
    err = std::move(other188.err);
    old_level = std::move(other188.old_level);
    __isset = std::move(other188.__isset);
}
configuration_meta_control_response &configuration_meta_control_response::
operator=(const configuration_meta_control_response &other189)
{
    err = other189.err;
    old_level = other189.old_level;
    __isset = other189.__isset;
    return *this;
}
configuration_meta_control_response &configuration_meta_control_response::
operator=(configuration_meta_control_response &&other190)
{
    err = std::move(other190.err);
    old_level = std::move(other190.old_level);
    __isset = std::move(other190.__isset);
    return *this;
}
void configuration_meta_control_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_meta_control_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "old_level=" << to_string(old_level);
    out << ")";
}

configuration_proposal_action::~configuration_proposal_action() throw() {}

void configuration_proposal_action::__set_target(const ::dsn::rpc_address &val)
{
    this->target = val;
}

void configuration_proposal_action::__set_node(const ::dsn::rpc_address &val) { this->node = val; }

void configuration_proposal_action::__set_type(const config_type::type val) { this->type = val; }

uint32_t configuration_proposal_action::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->target.read(iprot);
                this->__isset.target = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->node.read(iprot);
                this->__isset.node = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast191;
                xfer += iprot->readI32(ecast191);
                this->type = (config_type::type)ecast191;
                this->__isset.type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_proposal_action::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_proposal_action");

    xfer += oprot->writeFieldBegin("target", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->target.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->node.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_proposal_action &a, configuration_proposal_action &b)
{
    using ::std::swap;
    swap(a.target, b.target);
    swap(a.node, b.node);
    swap(a.type, b.type);
    swap(a.__isset, b.__isset);
}

configuration_proposal_action::configuration_proposal_action(
    const configuration_proposal_action &other192)
{
    target = other192.target;
    node = other192.node;
    type = other192.type;
    __isset = other192.__isset;
}
configuration_proposal_action::configuration_proposal_action(
    configuration_proposal_action &&other193)
{
    target = std::move(other193.target);
    node = std::move(other193.node);
    type = std::move(other193.type);
    __isset = std::move(other193.__isset);
}
configuration_proposal_action &configuration_proposal_action::
operator=(const configuration_proposal_action &other194)
{
    target = other194.target;
    node = other194.node;
    type = other194.type;
    __isset = other194.__isset;
    return *this;
}
configuration_proposal_action &configuration_proposal_action::
operator=(configuration_proposal_action &&other195)
{
    target = std::move(other195.target);
    node = std::move(other195.node);
    type = std::move(other195.type);
    __isset = std::move(other195.__isset);
    return *this;
}
void configuration_proposal_action::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_proposal_action(";
    out << "target=" << to_string(target);
    out << ", "
        << "node=" << to_string(node);
    out << ", "
        << "type=" << to_string(type);
    out << ")";
}

configuration_balancer_request::~configuration_balancer_request() throw() {}

void configuration_balancer_request::__set_gpid(const ::dsn::gpid &val) { this->gpid = val; }

void configuration_balancer_request::__set_action_list(
    const std::vector<configuration_proposal_action> &val)
{
    this->action_list = val;
}

void configuration_balancer_request::__set_force(const bool val)
{
    this->force = val;
    __isset.force = true;
}

void configuration_balancer_request::__set_balance_type(const balancer_request_type::type val)
{
    this->balance_type = val;
    __isset.balance_type = true;
}

uint32_t configuration_balancer_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->gpid.read(iprot);
                this->__isset.gpid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->action_list.clear();
                    uint32_t _size196;
                    ::apache::thrift::protocol::TType _etype199;
                    xfer += iprot->readListBegin(_etype199, _size196);
                    this->action_list.resize(_size196);
                    uint32_t _i200;
                    for (_i200 = 0; _i200 < _size196; ++_i200) {
                        xfer += this->action_list[_i200].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.action_list = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->force);
                this->__isset.force = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast201;
                xfer += iprot->readI32(ecast201);
                this->balance_type = (balancer_request_type::type)ecast201;
                this->__isset.balance_type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_balancer_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_balancer_request");

    xfer += oprot->writeFieldBegin("gpid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->gpid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("action_list", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->action_list.size()));
        std::vector<configuration_proposal_action>::const_iterator _iter202;
        for (_iter202 = this->action_list.begin(); _iter202 != this->action_list.end();
             ++_iter202) {
            xfer += (*_iter202).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    if (this->__isset.force) {
        xfer += oprot->writeFieldBegin("force", ::apache::thrift::protocol::T_BOOL, 3);
        xfer += oprot->writeBool(this->force);
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.balance_type) {
        xfer += oprot->writeFieldBegin("balance_type", ::apache::thrift::protocol::T_I32, 4);
        xfer += oprot->writeI32((int32_t)this->balance_type);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_balancer_request &a, configuration_balancer_request &b)
{
    using ::std::swap;
    swap(a.gpid, b.gpid);
    swap(a.action_list, b.action_list);
    swap(a.force, b.force);
    swap(a.balance_type, b.balance_type);
    swap(a.__isset, b.__isset);
}

configuration_balancer_request::configuration_balancer_request(
    const configuration_balancer_request &other203)
{
    gpid = other203.gpid;
    action_list = other203.action_list;
    force = other203.force;
    balance_type = other203.balance_type;
    __isset = other203.__isset;
}
configuration_balancer_request::configuration_balancer_request(
    configuration_balancer_request &&other204)
{
    gpid = std::move(other204.gpid);
    action_list = std::move(other204.action_list);
    force = std::move(other204.force);
    balance_type = std::move(other204.balance_type);
    __isset = std::move(other204.__isset);
}
configuration_balancer_request &configuration_balancer_request::
operator=(const configuration_balancer_request &other205)
{
    gpid = other205.gpid;
    action_list = other205.action_list;
    force = other205.force;
    balance_type = other205.balance_type;
    __isset = other205.__isset;
    return *this;
}
configuration_balancer_request &configuration_balancer_request::
operator=(configuration_balancer_request &&other206)
{
    gpid = std::move(other206.gpid);
    action_list = std::move(other206.action_list);
    force = std::move(other206.force);
    balance_type = std::move(other206.balance_type);
    __isset = std::move(other206.__isset);
    return *this;
}
void configuration_balancer_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_balancer_request(";
    out << "gpid=" << to_string(gpid);
    out << ", "
        << "action_list=" << to_string(action_list);
    out << ", "
        << "force=";
    (__isset.force ? (out << to_string(force)) : (out << "<null>"));
    out << ", "
        << "balance_type=";
    (__isset.balance_type ? (out << to_string(balance_type)) : (out << "<null>"));
    out << ")";
}

configuration_balancer_response::~configuration_balancer_response() throw() {}

void configuration_balancer_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

uint32_t configuration_balancer_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_balancer_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_balancer_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_balancer_response &a, configuration_balancer_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.__isset, b.__isset);
}

configuration_balancer_response::configuration_balancer_response(
    const configuration_balancer_response &other207)
{
    err = other207.err;
    __isset = other207.__isset;
}
configuration_balancer_response::configuration_balancer_response(
    configuration_balancer_response &&other208)
{
    err = std::move(other208.err);
    __isset = std::move(other208.__isset);
}
configuration_balancer_response &configuration_balancer_response::
operator=(const configuration_balancer_response &other209)
{
    err = other209.err;
    __isset = other209.__isset;
    return *this;
}
configuration_balancer_response &configuration_balancer_response::
operator=(configuration_balancer_response &&other210)
{
    err = std::move(other210.err);
    __isset = std::move(other210.__isset);
    return *this;
}
void configuration_balancer_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_balancer_response(";
    out << "err=" << to_string(err);
    out << ")";
}

configuration_drop_app_response::~configuration_drop_app_response() throw() {}

void configuration_drop_app_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

uint32_t configuration_drop_app_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_drop_app_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_drop_app_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_drop_app_response &a, configuration_drop_app_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.__isset, b.__isset);
}

configuration_drop_app_response::configuration_drop_app_response(
    const configuration_drop_app_response &other211)
{
    err = other211.err;
    __isset = other211.__isset;
}
configuration_drop_app_response::configuration_drop_app_response(
    configuration_drop_app_response &&other212)
{
    err = std::move(other212.err);
    __isset = std::move(other212.__isset);
}
configuration_drop_app_response &configuration_drop_app_response::
operator=(const configuration_drop_app_response &other213)
{
    err = other213.err;
    __isset = other213.__isset;
    return *this;
}
configuration_drop_app_response &configuration_drop_app_response::
operator=(configuration_drop_app_response &&other214)
{
    err = std::move(other214.err);
    __isset = std::move(other214.__isset);
    return *this;
}
void configuration_drop_app_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_drop_app_response(";
    out << "err=" << to_string(err);
    out << ")";
}

configuration_list_apps_response::~configuration_list_apps_response() throw() {}

void configuration_list_apps_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void configuration_list_apps_response::__set_infos(const std::vector<::dsn::app_info> &val)
{
    this->infos = val;
}

uint32_t configuration_list_apps_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->infos.clear();
                    uint32_t _size215;
                    ::apache::thrift::protocol::TType _etype218;
                    xfer += iprot->readListBegin(_etype218, _size215);
                    this->infos.resize(_size215);
                    uint32_t _i219;
                    for (_i219 = 0; _i219 < _size215; ++_i219) {
                        xfer += this->infos[_i219].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.infos = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_list_apps_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_list_apps_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("infos", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->infos.size()));
        std::vector<::dsn::app_info>::const_iterator _iter220;
        for (_iter220 = this->infos.begin(); _iter220 != this->infos.end(); ++_iter220) {
            xfer += (*_iter220).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_list_apps_response &a, configuration_list_apps_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.infos, b.infos);
    swap(a.__isset, b.__isset);
}

configuration_list_apps_response::configuration_list_apps_response(
    const configuration_list_apps_response &other221)
{
    err = other221.err;
    infos = other221.infos;
    __isset = other221.__isset;
}
configuration_list_apps_response::configuration_list_apps_response(
    configuration_list_apps_response &&other222)
{
    err = std::move(other222.err);
    infos = std::move(other222.infos);
    __isset = std::move(other222.__isset);
}
configuration_list_apps_response &configuration_list_apps_response::
operator=(const configuration_list_apps_response &other223)
{
    err = other223.err;
    infos = other223.infos;
    __isset = other223.__isset;
    return *this;
}
configuration_list_apps_response &configuration_list_apps_response::
operator=(configuration_list_apps_response &&other224)
{
    err = std::move(other224.err);
    infos = std::move(other224.infos);
    __isset = std::move(other224.__isset);
    return *this;
}
void configuration_list_apps_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_list_apps_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "infos=" << to_string(infos);
    out << ")";
}

configuration_list_nodes_response::~configuration_list_nodes_response() throw() {}

void configuration_list_nodes_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void configuration_list_nodes_response::__set_infos(const std::vector<node_info> &val)
{
    this->infos = val;
}

uint32_t configuration_list_nodes_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->infos.clear();
                    uint32_t _size225;
                    ::apache::thrift::protocol::TType _etype228;
                    xfer += iprot->readListBegin(_etype228, _size225);
                    this->infos.resize(_size225);
                    uint32_t _i229;
                    for (_i229 = 0; _i229 < _size225; ++_i229) {
                        xfer += this->infos[_i229].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.infos = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_list_nodes_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_list_nodes_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("infos", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->infos.size()));
        std::vector<node_info>::const_iterator _iter230;
        for (_iter230 = this->infos.begin(); _iter230 != this->infos.end(); ++_iter230) {
            xfer += (*_iter230).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_list_nodes_response &a, configuration_list_nodes_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.infos, b.infos);
    swap(a.__isset, b.__isset);
}

configuration_list_nodes_response::configuration_list_nodes_response(
    const configuration_list_nodes_response &other231)
{
    err = other231.err;
    infos = other231.infos;
    __isset = other231.__isset;
}
configuration_list_nodes_response::configuration_list_nodes_response(
    configuration_list_nodes_response &&other232)
{
    err = std::move(other232.err);
    infos = std::move(other232.infos);
    __isset = std::move(other232.__isset);
}
configuration_list_nodes_response &configuration_list_nodes_response::
operator=(const configuration_list_nodes_response &other233)
{
    err = other233.err;
    infos = other233.infos;
    __isset = other233.__isset;
    return *this;
}
configuration_list_nodes_response &configuration_list_nodes_response::
operator=(configuration_list_nodes_response &&other234)
{
    err = std::move(other234.err);
    infos = std::move(other234.infos);
    __isset = std::move(other234.__isset);
    return *this;
}
void configuration_list_nodes_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_list_nodes_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "infos=" << to_string(infos);
    out << ")";
}

configuration_cluster_info_response::~configuration_cluster_info_response() throw() {}

void configuration_cluster_info_response::__set_err(const ::dsn::error_code &val)
{
    this->err = val;
}

void configuration_cluster_info_response::__set_keys(const std::vector<std::string> &val)
{
    this->keys = val;
}

void configuration_cluster_info_response::__set_values(const std::vector<std::string> &val)
{
    this->values = val;
}

uint32_t configuration_cluster_info_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->keys.clear();
                    uint32_t _size235;
                    ::apache::thrift::protocol::TType _etype238;
                    xfer += iprot->readListBegin(_etype238, _size235);
                    this->keys.resize(_size235);
                    uint32_t _i239;
                    for (_i239 = 0; _i239 < _size235; ++_i239) {
                        xfer += iprot->readString(this->keys[_i239]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.keys = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->values.clear();
                    uint32_t _size240;
                    ::apache::thrift::protocol::TType _etype243;
                    xfer += iprot->readListBegin(_etype243, _size240);
                    this->values.resize(_size240);
                    uint32_t _i244;
                    for (_i244 = 0; _i244 < _size240; ++_i244) {
                        xfer += iprot->readString(this->values[_i244]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.values = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_cluster_info_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_cluster_info_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("keys", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING,
                                      static_cast<uint32_t>(this->keys.size()));
        std::vector<std::string>::const_iterator _iter245;
        for (_iter245 = this->keys.begin(); _iter245 != this->keys.end(); ++_iter245) {
            xfer += oprot->writeString((*_iter245));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 3);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING,
                                      static_cast<uint32_t>(this->values.size()));
        std::vector<std::string>::const_iterator _iter246;
        for (_iter246 = this->values.begin(); _iter246 != this->values.end(); ++_iter246) {
            xfer += oprot->writeString((*_iter246));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_cluster_info_response &a, configuration_cluster_info_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.keys, b.keys);
    swap(a.values, b.values);
    swap(a.__isset, b.__isset);
}

configuration_cluster_info_response::configuration_cluster_info_response(
    const configuration_cluster_info_response &other247)
{
    err = other247.err;
    keys = other247.keys;
    values = other247.values;
    __isset = other247.__isset;
}
configuration_cluster_info_response::configuration_cluster_info_response(
    configuration_cluster_info_response &&other248)
{
    err = std::move(other248.err);
    keys = std::move(other248.keys);
    values = std::move(other248.values);
    __isset = std::move(other248.__isset);
}
configuration_cluster_info_response &configuration_cluster_info_response::
operator=(const configuration_cluster_info_response &other249)
{
    err = other249.err;
    keys = other249.keys;
    values = other249.values;
    __isset = other249.__isset;
    return *this;
}
configuration_cluster_info_response &configuration_cluster_info_response::
operator=(configuration_cluster_info_response &&other250)
{
    err = std::move(other250.err);
    keys = std::move(other250.keys);
    values = std::move(other250.values);
    __isset = std::move(other250.__isset);
    return *this;
}
void configuration_cluster_info_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_cluster_info_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "keys=" << to_string(keys);
    out << ", "
        << "values=" << to_string(values);
    out << ")";
}

configuration_recall_app_response::~configuration_recall_app_response() throw() {}

void configuration_recall_app_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void configuration_recall_app_response::__set_info(const ::dsn::app_info &val) { this->info = val; }

uint32_t configuration_recall_app_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->info.read(iprot);
                this->__isset.info = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_recall_app_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_recall_app_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->info.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_recall_app_response &a, configuration_recall_app_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.info, b.info);
    swap(a.__isset, b.__isset);
}

configuration_recall_app_response::configuration_recall_app_response(
    const configuration_recall_app_response &other251)
{
    err = other251.err;
    info = other251.info;
    __isset = other251.__isset;
}
configuration_recall_app_response::configuration_recall_app_response(
    configuration_recall_app_response &&other252)
{
    err = std::move(other252.err);
    info = std::move(other252.info);
    __isset = std::move(other252.__isset);
}
configuration_recall_app_response &configuration_recall_app_response::
operator=(const configuration_recall_app_response &other253)
{
    err = other253.err;
    info = other253.info;
    __isset = other253.__isset;
    return *this;
}
configuration_recall_app_response &configuration_recall_app_response::
operator=(configuration_recall_app_response &&other254)
{
    err = std::move(other254.err);
    info = std::move(other254.info);
    __isset = std::move(other254.__isset);
    return *this;
}
void configuration_recall_app_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_recall_app_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "info=" << to_string(info);
    out << ")";
}

query_replica_decree_request::~query_replica_decree_request() throw() {}

void query_replica_decree_request::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void query_replica_decree_request::__set_node(const ::dsn::rpc_address &val) { this->node = val; }

uint32_t query_replica_decree_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->node.read(iprot);
                this->__isset.node = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t query_replica_decree_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("query_replica_decree_request");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->node.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(query_replica_decree_request &a, query_replica_decree_request &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.node, b.node);
    swap(a.__isset, b.__isset);
}

query_replica_decree_request::query_replica_decree_request(
    const query_replica_decree_request &other255)
{
    pid = other255.pid;
    node = other255.node;
    __isset = other255.__isset;
}
query_replica_decree_request::query_replica_decree_request(query_replica_decree_request &&other256)
{
    pid = std::move(other256.pid);
    node = std::move(other256.node);
    __isset = std::move(other256.__isset);
}
query_replica_decree_request &query_replica_decree_request::
operator=(const query_replica_decree_request &other257)
{
    pid = other257.pid;
    node = other257.node;
    __isset = other257.__isset;
    return *this;
}
query_replica_decree_request &query_replica_decree_request::
operator=(query_replica_decree_request &&other258)
{
    pid = std::move(other258.pid);
    node = std::move(other258.node);
    __isset = std::move(other258.__isset);
    return *this;
}
void query_replica_decree_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "query_replica_decree_request(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "node=" << to_string(node);
    out << ")";
}

query_replica_decree_response::~query_replica_decree_response() throw() {}

void query_replica_decree_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void query_replica_decree_response::__set_last_decree(const int64_t val)
{
    this->last_decree = val;
}

uint32_t query_replica_decree_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_decree);
                this->__isset.last_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t query_replica_decree_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("query_replica_decree_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("last_decree", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->last_decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(query_replica_decree_response &a, query_replica_decree_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.last_decree, b.last_decree);
    swap(a.__isset, b.__isset);
}

query_replica_decree_response::query_replica_decree_response(
    const query_replica_decree_response &other259)
{
    err = other259.err;
    last_decree = other259.last_decree;
    __isset = other259.__isset;
}
query_replica_decree_response::query_replica_decree_response(
    query_replica_decree_response &&other260)
{
    err = std::move(other260.err);
    last_decree = std::move(other260.last_decree);
    __isset = std::move(other260.__isset);
}
query_replica_decree_response &query_replica_decree_response::
operator=(const query_replica_decree_response &other261)
{
    err = other261.err;
    last_decree = other261.last_decree;
    __isset = other261.__isset;
    return *this;
}
query_replica_decree_response &query_replica_decree_response::
operator=(query_replica_decree_response &&other262)
{
    err = std::move(other262.err);
    last_decree = std::move(other262.last_decree);
    __isset = std::move(other262.__isset);
    return *this;
}
void query_replica_decree_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "query_replica_decree_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "last_decree=" << to_string(last_decree);
    out << ")";
}

replica_info::~replica_info() throw() {}

void replica_info::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void replica_info::__set_ballot(const int64_t val) { this->ballot = val; }

void replica_info::__set_status(const partition_status::type val) { this->status = val; }

void replica_info::__set_last_committed_decree(const int64_t val)
{
    this->last_committed_decree = val;
}

void replica_info::__set_last_prepared_decree(const int64_t val)
{
    this->last_prepared_decree = val;
}

void replica_info::__set_last_durable_decree(const int64_t val) { this->last_durable_decree = val; }

void replica_info::__set_app_type(const std::string &val) { this->app_type = val; }

void replica_info::__set_disk_tag(const std::string &val) { this->disk_tag = val; }

uint32_t replica_info::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->ballot);
                this->__isset.ballot = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast263;
                xfer += iprot->readI32(ecast263);
                this->status = (partition_status::type)ecast263;
                this->__isset.status = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_committed_decree);
                this->__isset.last_committed_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_prepared_decree);
                this->__isset.last_prepared_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_durable_decree);
                this->__isset.last_durable_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 7:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_type);
                this->__isset.app_type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 8:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->disk_tag);
                this->__isset.disk_tag = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t replica_info::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("replica_info");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->ballot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("last_committed_decree", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->last_committed_decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("last_prepared_decree", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->last_prepared_decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("last_durable_decree", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->last_durable_decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("app_type", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->app_type);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("disk_tag", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->disk_tag);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(replica_info &a, replica_info &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.ballot, b.ballot);
    swap(a.status, b.status);
    swap(a.last_committed_decree, b.last_committed_decree);
    swap(a.last_prepared_decree, b.last_prepared_decree);
    swap(a.last_durable_decree, b.last_durable_decree);
    swap(a.app_type, b.app_type);
    swap(a.disk_tag, b.disk_tag);
    swap(a.__isset, b.__isset);
}

replica_info::replica_info(const replica_info &other264)
{
    pid = other264.pid;
    ballot = other264.ballot;
    status = other264.status;
    last_committed_decree = other264.last_committed_decree;
    last_prepared_decree = other264.last_prepared_decree;
    last_durable_decree = other264.last_durable_decree;
    app_type = other264.app_type;
    disk_tag = other264.disk_tag;
    __isset = other264.__isset;
}
replica_info::replica_info(replica_info &&other265)
{
    pid = std::move(other265.pid);
    ballot = std::move(other265.ballot);
    status = std::move(other265.status);
    last_committed_decree = std::move(other265.last_committed_decree);
    last_prepared_decree = std::move(other265.last_prepared_decree);
    last_durable_decree = std::move(other265.last_durable_decree);
    app_type = std::move(other265.app_type);
    disk_tag = std::move(other265.disk_tag);
    __isset = std::move(other265.__isset);
}
replica_info &replica_info::operator=(const replica_info &other266)
{
    pid = other266.pid;
    ballot = other266.ballot;
    status = other266.status;
    last_committed_decree = other266.last_committed_decree;
    last_prepared_decree = other266.last_prepared_decree;
    last_durable_decree = other266.last_durable_decree;
    app_type = other266.app_type;
    disk_tag = other266.disk_tag;
    __isset = other266.__isset;
    return *this;
}
replica_info &replica_info::operator=(replica_info &&other267)
{
    pid = std::move(other267.pid);
    ballot = std::move(other267.ballot);
    status = std::move(other267.status);
    last_committed_decree = std::move(other267.last_committed_decree);
    last_prepared_decree = std::move(other267.last_prepared_decree);
    last_durable_decree = std::move(other267.last_durable_decree);
    app_type = std::move(other267.app_type);
    disk_tag = std::move(other267.disk_tag);
    __isset = std::move(other267.__isset);
    return *this;
}
void replica_info::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "replica_info(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "ballot=" << to_string(ballot);
    out << ", "
        << "status=" << to_string(status);
    out << ", "
        << "last_committed_decree=" << to_string(last_committed_decree);
    out << ", "
        << "last_prepared_decree=" << to_string(last_prepared_decree);
    out << ", "
        << "last_durable_decree=" << to_string(last_durable_decree);
    out << ", "
        << "app_type=" << to_string(app_type);
    out << ", "
        << "disk_tag=" << to_string(disk_tag);
    out << ")";
}

query_replica_info_request::~query_replica_info_request() throw() {}

void query_replica_info_request::__set_node(const ::dsn::rpc_address &val) { this->node = val; }

uint32_t query_replica_info_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->node.read(iprot);
                this->__isset.node = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t query_replica_info_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("query_replica_info_request");

    xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->node.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(query_replica_info_request &a, query_replica_info_request &b)
{
    using ::std::swap;
    swap(a.node, b.node);
    swap(a.__isset, b.__isset);
}

query_replica_info_request::query_replica_info_request(const query_replica_info_request &other268)
{
    node = other268.node;
    __isset = other268.__isset;
}
query_replica_info_request::query_replica_info_request(query_replica_info_request &&other269)
{
    node = std::move(other269.node);
    __isset = std::move(other269.__isset);
}
query_replica_info_request &query_replica_info_request::
operator=(const query_replica_info_request &other270)
{
    node = other270.node;
    __isset = other270.__isset;
    return *this;
}
query_replica_info_request &query_replica_info_request::
operator=(query_replica_info_request &&other271)
{
    node = std::move(other271.node);
    __isset = std::move(other271.__isset);
    return *this;
}
void query_replica_info_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "query_replica_info_request(";
    out << "node=" << to_string(node);
    out << ")";
}

query_replica_info_response::~query_replica_info_response() throw() {}

void query_replica_info_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void query_replica_info_response::__set_replicas(const std::vector<replica_info> &val)
{
    this->replicas = val;
}

uint32_t query_replica_info_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->replicas.clear();
                    uint32_t _size272;
                    ::apache::thrift::protocol::TType _etype275;
                    xfer += iprot->readListBegin(_etype275, _size272);
                    this->replicas.resize(_size272);
                    uint32_t _i276;
                    for (_i276 = 0; _i276 < _size272; ++_i276) {
                        xfer += this->replicas[_i276].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.replicas = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t query_replica_info_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("query_replica_info_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("replicas", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->replicas.size()));
        std::vector<replica_info>::const_iterator _iter277;
        for (_iter277 = this->replicas.begin(); _iter277 != this->replicas.end(); ++_iter277) {
            xfer += (*_iter277).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(query_replica_info_response &a, query_replica_info_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.replicas, b.replicas);
    swap(a.__isset, b.__isset);
}

query_replica_info_response::query_replica_info_response(
    const query_replica_info_response &other278)
{
    err = other278.err;
    replicas = other278.replicas;
    __isset = other278.__isset;
}
query_replica_info_response::query_replica_info_response(query_replica_info_response &&other279)
{
    err = std::move(other279.err);
    replicas = std::move(other279.replicas);
    __isset = std::move(other279.__isset);
}
query_replica_info_response &query_replica_info_response::
operator=(const query_replica_info_response &other280)
{
    err = other280.err;
    replicas = other280.replicas;
    __isset = other280.__isset;
    return *this;
}
query_replica_info_response &query_replica_info_response::
operator=(query_replica_info_response &&other281)
{
    err = std::move(other281.err);
    replicas = std::move(other281.replicas);
    __isset = std::move(other281.__isset);
    return *this;
}
void query_replica_info_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "query_replica_info_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "replicas=" << to_string(replicas);
    out << ")";
}

disk_info::~disk_info() throw() {}

void disk_info::__set_tag(const std::string &val) { this->tag = val; }

void disk_info::__set_full_dir(const std::string &val) { this->full_dir = val; }

void disk_info::__set_disk_capacity_mb(const int64_t val) { this->disk_capacity_mb = val; }

void disk_info::__set_disk_available_mb(const int64_t val) { this->disk_available_mb = val; }

void disk_info::__set_holding_primary_replica_counts(const std::map<int32_t, int32_t> &val)
{
    this->holding_primary_replica_counts = val;
}

void disk_info::__set_holding_secondary_replica_counts(const std::map<int32_t, int32_t> &val)
{
    this->holding_secondary_replica_counts = val;
}

uint32_t disk_info::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->tag);
                this->__isset.tag = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->full_dir);
                this->__isset.full_dir = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->disk_capacity_mb);
                this->__isset.disk_capacity_mb = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->disk_available_mb);
                this->__isset.disk_available_mb = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->holding_primary_replica_counts.clear();
                    uint32_t _size282;
                    ::apache::thrift::protocol::TType _ktype283;
                    ::apache::thrift::protocol::TType _vtype284;
                    xfer += iprot->readMapBegin(_ktype283, _vtype284, _size282);
                    uint32_t _i286;
                    for (_i286 = 0; _i286 < _size282; ++_i286) {
                        int32_t _key287;
                        xfer += iprot->readI32(_key287);
                        int32_t &_val288 = this->holding_primary_replica_counts[_key287];
                        xfer += iprot->readI32(_val288);
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.holding_primary_replica_counts = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->holding_secondary_replica_counts.clear();
                    uint32_t _size289;
                    ::apache::thrift::protocol::TType _ktype290;
                    ::apache::thrift::protocol::TType _vtype291;
                    xfer += iprot->readMapBegin(_ktype290, _vtype291, _size289);
                    uint32_t _i293;
                    for (_i293 = 0; _i293 < _size289; ++_i293) {
                        int32_t _key294;
                        xfer += iprot->readI32(_key294);
                        int32_t &_val295 = this->holding_secondary_replica_counts[_key294];
                        xfer += iprot->readI32(_val295);
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.holding_secondary_replica_counts = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t disk_info::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("disk_info");

    xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->tag);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("full_dir", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->full_dir);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("disk_capacity_mb", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->disk_capacity_mb);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("disk_available_mb", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->disk_available_mb);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "holding_primary_replica_counts", ::apache::thrift::protocol::T_MAP, 5);
    {
        xfer += oprot->writeMapBegin(
            ::apache::thrift::protocol::T_I32,
            ::apache::thrift::protocol::T_I32,
            static_cast<uint32_t>(this->holding_primary_replica_counts.size()));
        std::map<int32_t, int32_t>::const_iterator _iter296;
        for (_iter296 = this->holding_primary_replica_counts.begin();
             _iter296 != this->holding_primary_replica_counts.end();
             ++_iter296) {
            xfer += oprot->writeI32(_iter296->first);
            xfer += oprot->writeI32(_iter296->second);
        }
        xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "holding_secondary_replica_counts", ::apache::thrift::protocol::T_MAP, 6);
    {
        xfer += oprot->writeMapBegin(
            ::apache::thrift::protocol::T_I32,
            ::apache::thrift::protocol::T_I32,
            static_cast<uint32_t>(this->holding_secondary_replica_counts.size()));
        std::map<int32_t, int32_t>::const_iterator _iter297;
        for (_iter297 = this->holding_secondary_replica_counts.begin();
             _iter297 != this->holding_secondary_replica_counts.end();
             ++_iter297) {
            xfer += oprot->writeI32(_iter297->first);
            xfer += oprot->writeI32(_iter297->second);
        }
        xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(disk_info &a, disk_info &b)
{
    using ::std::swap;
    swap(a.tag, b.tag);
    swap(a.full_dir, b.full_dir);
    swap(a.disk_capacity_mb, b.disk_capacity_mb);
    swap(a.disk_available_mb, b.disk_available_mb);
    swap(a.holding_primary_replica_counts, b.holding_primary_replica_counts);
    swap(a.holding_secondary_replica_counts, b.holding_secondary_replica_counts);
    swap(a.__isset, b.__isset);
}

disk_info::disk_info(const disk_info &other298)
{
    tag = other298.tag;
    full_dir = other298.full_dir;
    disk_capacity_mb = other298.disk_capacity_mb;
    disk_available_mb = other298.disk_available_mb;
    holding_primary_replica_counts = other298.holding_primary_replica_counts;
    holding_secondary_replica_counts = other298.holding_secondary_replica_counts;
    __isset = other298.__isset;
}
disk_info::disk_info(disk_info &&other299)
{
    tag = std::move(other299.tag);
    full_dir = std::move(other299.full_dir);
    disk_capacity_mb = std::move(other299.disk_capacity_mb);
    disk_available_mb = std::move(other299.disk_available_mb);
    holding_primary_replica_counts = std::move(other299.holding_primary_replica_counts);
    holding_secondary_replica_counts = std::move(other299.holding_secondary_replica_counts);
    __isset = std::move(other299.__isset);
}
disk_info &disk_info::operator=(const disk_info &other300)
{
    tag = other300.tag;
    full_dir = other300.full_dir;
    disk_capacity_mb = other300.disk_capacity_mb;
    disk_available_mb = other300.disk_available_mb;
    holding_primary_replica_counts = other300.holding_primary_replica_counts;
    holding_secondary_replica_counts = other300.holding_secondary_replica_counts;
    __isset = other300.__isset;
    return *this;
}
disk_info &disk_info::operator=(disk_info &&other301)
{
    tag = std::move(other301.tag);
    full_dir = std::move(other301.full_dir);
    disk_capacity_mb = std::move(other301.disk_capacity_mb);
    disk_available_mb = std::move(other301.disk_available_mb);
    holding_primary_replica_counts = std::move(other301.holding_primary_replica_counts);
    holding_secondary_replica_counts = std::move(other301.holding_secondary_replica_counts);
    __isset = std::move(other301.__isset);
    return *this;
}
void disk_info::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "disk_info(";
    out << "tag=" << to_string(tag);
    out << ", "
        << "full_dir=" << to_string(full_dir);
    out << ", "
        << "disk_capacity_mb=" << to_string(disk_capacity_mb);
    out << ", "
        << "disk_available_mb=" << to_string(disk_available_mb);
    out << ", "
        << "holding_primary_replica_counts=" << to_string(holding_primary_replica_counts);
    out << ", "
        << "holding_secondary_replica_counts=" << to_string(holding_secondary_replica_counts);
    out << ")";
}

query_disk_info_request::~query_disk_info_request() throw() {}

void query_disk_info_request::__set_node(const ::dsn::rpc_address &val) { this->node = val; }

void query_disk_info_request::__set_app_name(const std::string &val) { this->app_name = val; }

uint32_t query_disk_info_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->node.read(iprot);
                this->__isset.node = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t query_disk_info_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("query_disk_info_request");

    xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->node.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(query_disk_info_request &a, query_disk_info_request &b)
{
    using ::std::swap;
    swap(a.node, b.node);
    swap(a.app_name, b.app_name);
    swap(a.__isset, b.__isset);
}

query_disk_info_request::query_disk_info_request(const query_disk_info_request &other302)
{
    node = other302.node;
    app_name = other302.app_name;
    __isset = other302.__isset;
}
query_disk_info_request::query_disk_info_request(query_disk_info_request &&other303)
{
    node = std::move(other303.node);
    app_name = std::move(other303.app_name);
    __isset = std::move(other303.__isset);
}
query_disk_info_request &query_disk_info_request::operator=(const query_disk_info_request &other304)
{
    node = other304.node;
    app_name = other304.app_name;
    __isset = other304.__isset;
    return *this;
}
query_disk_info_request &query_disk_info_request::operator=(query_disk_info_request &&other305)
{
    node = std::move(other305.node);
    app_name = std::move(other305.app_name);
    __isset = std::move(other305.__isset);
    return *this;
}
void query_disk_info_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "query_disk_info_request(";
    out << "node=" << to_string(node);
    out << ", "
        << "app_name=" << to_string(app_name);
    out << ")";
}

query_disk_info_response::~query_disk_info_response() throw() {}

void query_disk_info_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void query_disk_info_response::__set_total_capacity_mb(const int64_t val)
{
    this->total_capacity_mb = val;
}

void query_disk_info_response::__set_total_available_mb(const int64_t val)
{
    this->total_available_mb = val;
}

void query_disk_info_response::__set_disk_infos(const std::vector<disk_info> &val)
{
    this->disk_infos = val;
}

uint32_t query_disk_info_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->total_capacity_mb);
                this->__isset.total_capacity_mb = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->total_available_mb);
                this->__isset.total_available_mb = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->disk_infos.clear();
                    uint32_t _size306;
                    ::apache::thrift::protocol::TType _etype309;
                    xfer += iprot->readListBegin(_etype309, _size306);
                    this->disk_infos.resize(_size306);
                    uint32_t _i310;
                    for (_i310 = 0; _i310 < _size306; ++_i310) {
                        xfer += this->disk_infos[_i310].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.disk_infos = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t query_disk_info_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("query_disk_info_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("total_capacity_mb", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->total_capacity_mb);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("total_available_mb", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->total_available_mb);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("disk_infos", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->disk_infos.size()));
        std::vector<disk_info>::const_iterator _iter311;
        for (_iter311 = this->disk_infos.begin(); _iter311 != this->disk_infos.end(); ++_iter311) {
            xfer += (*_iter311).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(query_disk_info_response &a, query_disk_info_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.total_capacity_mb, b.total_capacity_mb);
    swap(a.total_available_mb, b.total_available_mb);
    swap(a.disk_infos, b.disk_infos);
    swap(a.__isset, b.__isset);
}

query_disk_info_response::query_disk_info_response(const query_disk_info_response &other312)
{
    err = other312.err;
    total_capacity_mb = other312.total_capacity_mb;
    total_available_mb = other312.total_available_mb;
    disk_infos = other312.disk_infos;
    __isset = other312.__isset;
}
query_disk_info_response::query_disk_info_response(query_disk_info_response &&other313)
{
    err = std::move(other313.err);
    total_capacity_mb = std::move(other313.total_capacity_mb);
    total_available_mb = std::move(other313.total_available_mb);
    disk_infos = std::move(other313.disk_infos);
    __isset = std::move(other313.__isset);
}
query_disk_info_response &query_disk_info_response::
operator=(const query_disk_info_response &other314)
{
    err = other314.err;
    total_capacity_mb = other314.total_capacity_mb;
    total_available_mb = other314.total_available_mb;
    disk_infos = other314.disk_infos;
    __isset = other314.__isset;
    return *this;
}
query_disk_info_response &query_disk_info_response::operator=(query_disk_info_response &&other315)
{
    err = std::move(other315.err);
    total_capacity_mb = std::move(other315.total_capacity_mb);
    total_available_mb = std::move(other315.total_available_mb);
    disk_infos = std::move(other315.disk_infos);
    __isset = std::move(other315.__isset);
    return *this;
}
void query_disk_info_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "query_disk_info_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "total_capacity_mb=" << to_string(total_capacity_mb);
    out << ", "
        << "total_available_mb=" << to_string(total_available_mb);
    out << ", "
        << "disk_infos=" << to_string(disk_infos);
    out << ")";
}

query_app_info_request::~query_app_info_request() throw() {}

void query_app_info_request::__set_meta_server(const ::dsn::rpc_address &val)
{
    this->meta_server = val;
}

uint32_t query_app_info_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->meta_server.read(iprot);
                this->__isset.meta_server = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t query_app_info_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("query_app_info_request");

    xfer += oprot->writeFieldBegin("meta_server", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->meta_server.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(query_app_info_request &a, query_app_info_request &b)
{
    using ::std::swap;
    swap(a.meta_server, b.meta_server);
    swap(a.__isset, b.__isset);
}

query_app_info_request::query_app_info_request(const query_app_info_request &other316)
{
    meta_server = other316.meta_server;
    __isset = other316.__isset;
}
query_app_info_request::query_app_info_request(query_app_info_request &&other317)
{
    meta_server = std::move(other317.meta_server);
    __isset = std::move(other317.__isset);
}
query_app_info_request &query_app_info_request::operator=(const query_app_info_request &other318)
{
    meta_server = other318.meta_server;
    __isset = other318.__isset;
    return *this;
}
query_app_info_request &query_app_info_request::operator=(query_app_info_request &&other319)
{
    meta_server = std::move(other319.meta_server);
    __isset = std::move(other319.__isset);
    return *this;
}
void query_app_info_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "query_app_info_request(";
    out << "meta_server=" << to_string(meta_server);
    out << ")";
}

query_app_info_response::~query_app_info_response() throw() {}

void query_app_info_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void query_app_info_response::__set_apps(const std::vector<::dsn::app_info> &val)
{
    this->apps = val;
}

uint32_t query_app_info_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->apps.clear();
                    uint32_t _size320;
                    ::apache::thrift::protocol::TType _etype323;
                    xfer += iprot->readListBegin(_etype323, _size320);
                    this->apps.resize(_size320);
                    uint32_t _i324;
                    for (_i324 = 0; _i324 < _size320; ++_i324) {
                        xfer += this->apps[_i324].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.apps = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t query_app_info_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("query_app_info_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("apps", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->apps.size()));
        std::vector<::dsn::app_info>::const_iterator _iter325;
        for (_iter325 = this->apps.begin(); _iter325 != this->apps.end(); ++_iter325) {
            xfer += (*_iter325).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(query_app_info_response &a, query_app_info_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.apps, b.apps);
    swap(a.__isset, b.__isset);
}

query_app_info_response::query_app_info_response(const query_app_info_response &other326)
{
    err = other326.err;
    apps = other326.apps;
    __isset = other326.__isset;
}
query_app_info_response::query_app_info_response(query_app_info_response &&other327)
{
    err = std::move(other327.err);
    apps = std::move(other327.apps);
    __isset = std::move(other327.__isset);
}
query_app_info_response &query_app_info_response::operator=(const query_app_info_response &other328)
{
    err = other328.err;
    apps = other328.apps;
    __isset = other328.__isset;
    return *this;
}
query_app_info_response &query_app_info_response::operator=(query_app_info_response &&other329)
{
    err = std::move(other329.err);
    apps = std::move(other329.apps);
    __isset = std::move(other329.__isset);
    return *this;
}
void query_app_info_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "query_app_info_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "apps=" << to_string(apps);
    out << ")";
}

configuration_recovery_request::~configuration_recovery_request() throw() {}

void configuration_recovery_request::__set_recovery_set(const std::vector<::dsn::rpc_address> &val)
{
    this->recovery_set = val;
}

void configuration_recovery_request::__set_skip_bad_nodes(const bool val)
{
    this->skip_bad_nodes = val;
}

void configuration_recovery_request::__set_skip_lost_partitions(const bool val)
{
    this->skip_lost_partitions = val;
}

uint32_t configuration_recovery_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->recovery_set.clear();
                    uint32_t _size330;
                    ::apache::thrift::protocol::TType _etype333;
                    xfer += iprot->readListBegin(_etype333, _size330);
                    this->recovery_set.resize(_size330);
                    uint32_t _i334;
                    for (_i334 = 0; _i334 < _size330; ++_i334) {
                        xfer += this->recovery_set[_i334].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.recovery_set = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->skip_bad_nodes);
                this->__isset.skip_bad_nodes = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->skip_lost_partitions);
                this->__isset.skip_lost_partitions = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_recovery_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_recovery_request");

    xfer += oprot->writeFieldBegin("recovery_set", ::apache::thrift::protocol::T_LIST, 1);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->recovery_set.size()));
        std::vector<::dsn::rpc_address>::const_iterator _iter335;
        for (_iter335 = this->recovery_set.begin(); _iter335 != this->recovery_set.end();
             ++_iter335) {
            xfer += (*_iter335).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("skip_bad_nodes", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->skip_bad_nodes);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("skip_lost_partitions", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->skip_lost_partitions);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_recovery_request &a, configuration_recovery_request &b)
{
    using ::std::swap;
    swap(a.recovery_set, b.recovery_set);
    swap(a.skip_bad_nodes, b.skip_bad_nodes);
    swap(a.skip_lost_partitions, b.skip_lost_partitions);
    swap(a.__isset, b.__isset);
}

configuration_recovery_request::configuration_recovery_request(
    const configuration_recovery_request &other336)
{
    recovery_set = other336.recovery_set;
    skip_bad_nodes = other336.skip_bad_nodes;
    skip_lost_partitions = other336.skip_lost_partitions;
    __isset = other336.__isset;
}
configuration_recovery_request::configuration_recovery_request(
    configuration_recovery_request &&other337)
{
    recovery_set = std::move(other337.recovery_set);
    skip_bad_nodes = std::move(other337.skip_bad_nodes);
    skip_lost_partitions = std::move(other337.skip_lost_partitions);
    __isset = std::move(other337.__isset);
}
configuration_recovery_request &configuration_recovery_request::
operator=(const configuration_recovery_request &other338)
{
    recovery_set = other338.recovery_set;
    skip_bad_nodes = other338.skip_bad_nodes;
    skip_lost_partitions = other338.skip_lost_partitions;
    __isset = other338.__isset;
    return *this;
}
configuration_recovery_request &configuration_recovery_request::
operator=(configuration_recovery_request &&other339)
{
    recovery_set = std::move(other339.recovery_set);
    skip_bad_nodes = std::move(other339.skip_bad_nodes);
    skip_lost_partitions = std::move(other339.skip_lost_partitions);
    __isset = std::move(other339.__isset);
    return *this;
}
void configuration_recovery_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_recovery_request(";
    out << "recovery_set=" << to_string(recovery_set);
    out << ", "
        << "skip_bad_nodes=" << to_string(skip_bad_nodes);
    out << ", "
        << "skip_lost_partitions=" << to_string(skip_lost_partitions);
    out << ")";
}

configuration_recovery_response::~configuration_recovery_response() throw() {}

void configuration_recovery_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void configuration_recovery_response::__set_hint_message(const std::string &val)
{
    this->hint_message = val;
}

uint32_t configuration_recovery_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->hint_message);
                this->__isset.hint_message = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_recovery_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_recovery_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("hint_message", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->hint_message);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_recovery_response &a, configuration_recovery_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.hint_message, b.hint_message);
    swap(a.__isset, b.__isset);
}

configuration_recovery_response::configuration_recovery_response(
    const configuration_recovery_response &other340)
{
    err = other340.err;
    hint_message = other340.hint_message;
    __isset = other340.__isset;
}
configuration_recovery_response::configuration_recovery_response(
    configuration_recovery_response &&other341)
{
    err = std::move(other341.err);
    hint_message = std::move(other341.hint_message);
    __isset = std::move(other341.__isset);
}
configuration_recovery_response &configuration_recovery_response::
operator=(const configuration_recovery_response &other342)
{
    err = other342.err;
    hint_message = other342.hint_message;
    __isset = other342.__isset;
    return *this;
}
configuration_recovery_response &configuration_recovery_response::
operator=(configuration_recovery_response &&other343)
{
    err = std::move(other343.err);
    hint_message = std::move(other343.hint_message);
    __isset = std::move(other343.__isset);
    return *this;
}
void configuration_recovery_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_recovery_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "hint_message=" << to_string(hint_message);
    out << ")";
}

policy_info::~policy_info() throw() {}

void policy_info::__set_policy_name(const std::string &val) { this->policy_name = val; }

void policy_info::__set_backup_provider_type(const std::string &val)
{
    this->backup_provider_type = val;
}

uint32_t policy_info::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->policy_name);
                this->__isset.policy_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->backup_provider_type);
                this->__isset.backup_provider_type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t policy_info::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("policy_info");

    xfer += oprot->writeFieldBegin("policy_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->policy_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("backup_provider_type", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->backup_provider_type);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(policy_info &a, policy_info &b)
{
    using ::std::swap;
    swap(a.policy_name, b.policy_name);
    swap(a.backup_provider_type, b.backup_provider_type);
    swap(a.__isset, b.__isset);
}

policy_info::policy_info(const policy_info &other344)
{
    policy_name = other344.policy_name;
    backup_provider_type = other344.backup_provider_type;
    __isset = other344.__isset;
}
policy_info::policy_info(policy_info &&other345)
{
    policy_name = std::move(other345.policy_name);
    backup_provider_type = std::move(other345.backup_provider_type);
    __isset = std::move(other345.__isset);
}
policy_info &policy_info::operator=(const policy_info &other346)
{
    policy_name = other346.policy_name;
    backup_provider_type = other346.backup_provider_type;
    __isset = other346.__isset;
    return *this;
}
policy_info &policy_info::operator=(policy_info &&other347)
{
    policy_name = std::move(other347.policy_name);
    backup_provider_type = std::move(other347.backup_provider_type);
    __isset = std::move(other347.__isset);
    return *this;
}
void policy_info::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "policy_info(";
    out << "policy_name=" << to_string(policy_name);
    out << ", "
        << "backup_provider_type=" << to_string(backup_provider_type);
    out << ")";
}

configuration_restore_request::~configuration_restore_request() throw() {}

void configuration_restore_request::__set_cluster_name(const std::string &val)
{
    this->cluster_name = val;
}

void configuration_restore_request::__set_policy_name(const std::string &val)
{
    this->policy_name = val;
}

void configuration_restore_request::__set_time_stamp(const int64_t val) { this->time_stamp = val; }

void configuration_restore_request::__set_app_name(const std::string &val) { this->app_name = val; }

void configuration_restore_request::__set_app_id(const int32_t val) { this->app_id = val; }

void configuration_restore_request::__set_new_app_name(const std::string &val)
{
    this->new_app_name = val;
}

void configuration_restore_request::__set_backup_provider_name(const std::string &val)
{
    this->backup_provider_name = val;
}

void configuration_restore_request::__set_skip_bad_partition(const bool val)
{
    this->skip_bad_partition = val;
}

uint32_t configuration_restore_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->cluster_name);
                this->__isset.cluster_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->policy_name);
                this->__isset.policy_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->time_stamp);
                this->__isset.time_stamp = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->app_id);
                this->__isset.app_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->new_app_name);
                this->__isset.new_app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 7:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->backup_provider_name);
                this->__isset.backup_provider_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 8:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->skip_bad_partition);
                this->__isset.skip_bad_partition = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_restore_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_restore_request");

    xfer += oprot->writeFieldBegin("cluster_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->cluster_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("policy_name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->policy_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("time_stamp", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->time_stamp);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("app_id", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->app_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("new_app_name", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->new_app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("backup_provider_name", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->backup_provider_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("skip_bad_partition", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->skip_bad_partition);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_restore_request &a, configuration_restore_request &b)
{
    using ::std::swap;
    swap(a.cluster_name, b.cluster_name);
    swap(a.policy_name, b.policy_name);
    swap(a.time_stamp, b.time_stamp);
    swap(a.app_name, b.app_name);
    swap(a.app_id, b.app_id);
    swap(a.new_app_name, b.new_app_name);
    swap(a.backup_provider_name, b.backup_provider_name);
    swap(a.skip_bad_partition, b.skip_bad_partition);
    swap(a.__isset, b.__isset);
}

configuration_restore_request::configuration_restore_request(
    const configuration_restore_request &other348)
{
    cluster_name = other348.cluster_name;
    policy_name = other348.policy_name;
    time_stamp = other348.time_stamp;
    app_name = other348.app_name;
    app_id = other348.app_id;
    new_app_name = other348.new_app_name;
    backup_provider_name = other348.backup_provider_name;
    skip_bad_partition = other348.skip_bad_partition;
    __isset = other348.__isset;
}
configuration_restore_request::configuration_restore_request(
    configuration_restore_request &&other349)
{
    cluster_name = std::move(other349.cluster_name);
    policy_name = std::move(other349.policy_name);
    time_stamp = std::move(other349.time_stamp);
    app_name = std::move(other349.app_name);
    app_id = std::move(other349.app_id);
    new_app_name = std::move(other349.new_app_name);
    backup_provider_name = std::move(other349.backup_provider_name);
    skip_bad_partition = std::move(other349.skip_bad_partition);
    __isset = std::move(other349.__isset);
}
configuration_restore_request &configuration_restore_request::
operator=(const configuration_restore_request &other350)
{
    cluster_name = other350.cluster_name;
    policy_name = other350.policy_name;
    time_stamp = other350.time_stamp;
    app_name = other350.app_name;
    app_id = other350.app_id;
    new_app_name = other350.new_app_name;
    backup_provider_name = other350.backup_provider_name;
    skip_bad_partition = other350.skip_bad_partition;
    __isset = other350.__isset;
    return *this;
}
configuration_restore_request &configuration_restore_request::
operator=(configuration_restore_request &&other351)
{
    cluster_name = std::move(other351.cluster_name);
    policy_name = std::move(other351.policy_name);
    time_stamp = std::move(other351.time_stamp);
    app_name = std::move(other351.app_name);
    app_id = std::move(other351.app_id);
    new_app_name = std::move(other351.new_app_name);
    backup_provider_name = std::move(other351.backup_provider_name);
    skip_bad_partition = std::move(other351.skip_bad_partition);
    __isset = std::move(other351.__isset);
    return *this;
}
void configuration_restore_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_restore_request(";
    out << "cluster_name=" << to_string(cluster_name);
    out << ", "
        << "policy_name=" << to_string(policy_name);
    out << ", "
        << "time_stamp=" << to_string(time_stamp);
    out << ", "
        << "app_name=" << to_string(app_name);
    out << ", "
        << "app_id=" << to_string(app_id);
    out << ", "
        << "new_app_name=" << to_string(new_app_name);
    out << ", "
        << "backup_provider_name=" << to_string(backup_provider_name);
    out << ", "
        << "skip_bad_partition=" << to_string(skip_bad_partition);
    out << ")";
}

backup_request::~backup_request() throw() {}

void backup_request::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void backup_request::__set_policy(const policy_info &val) { this->policy = val; }

void backup_request::__set_app_name(const std::string &val) { this->app_name = val; }

void backup_request::__set_backup_id(const int64_t val) { this->backup_id = val; }

uint32_t backup_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->policy.read(iprot);
                this->__isset.policy = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->backup_id);
                this->__isset.backup_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t backup_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("backup_request");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("policy", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->policy.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("backup_id", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->backup_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(backup_request &a, backup_request &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.policy, b.policy);
    swap(a.app_name, b.app_name);
    swap(a.backup_id, b.backup_id);
    swap(a.__isset, b.__isset);
}

backup_request::backup_request(const backup_request &other352)
{
    pid = other352.pid;
    policy = other352.policy;
    app_name = other352.app_name;
    backup_id = other352.backup_id;
    __isset = other352.__isset;
}
backup_request::backup_request(backup_request &&other353)
{
    pid = std::move(other353.pid);
    policy = std::move(other353.policy);
    app_name = std::move(other353.app_name);
    backup_id = std::move(other353.backup_id);
    __isset = std::move(other353.__isset);
}
backup_request &backup_request::operator=(const backup_request &other354)
{
    pid = other354.pid;
    policy = other354.policy;
    app_name = other354.app_name;
    backup_id = other354.backup_id;
    __isset = other354.__isset;
    return *this;
}
backup_request &backup_request::operator=(backup_request &&other355)
{
    pid = std::move(other355.pid);
    policy = std::move(other355.policy);
    app_name = std::move(other355.app_name);
    backup_id = std::move(other355.backup_id);
    __isset = std::move(other355.__isset);
    return *this;
}
void backup_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "backup_request(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "policy=" << to_string(policy);
    out << ", "
        << "app_name=" << to_string(app_name);
    out << ", "
        << "backup_id=" << to_string(backup_id);
    out << ")";
}

backup_response::~backup_response() throw() {}

void backup_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void backup_response::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void backup_response::__set_progress(const int32_t val) { this->progress = val; }

void backup_response::__set_policy_name(const std::string &val) { this->policy_name = val; }

void backup_response::__set_backup_id(const int64_t val) { this->backup_id = val; }

void backup_response::__set_checkpoint_total_size(const int64_t val)
{
    this->checkpoint_total_size = val;
}

uint32_t backup_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->progress);
                this->__isset.progress = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->policy_name);
                this->__isset.policy_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->backup_id);
                this->__isset.backup_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->checkpoint_total_size);
                this->__isset.checkpoint_total_size = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t backup_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("backup_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("progress", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->progress);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("policy_name", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->policy_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("backup_id", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->backup_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("checkpoint_total_size", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->checkpoint_total_size);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(backup_response &a, backup_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.pid, b.pid);
    swap(a.progress, b.progress);
    swap(a.policy_name, b.policy_name);
    swap(a.backup_id, b.backup_id);
    swap(a.checkpoint_total_size, b.checkpoint_total_size);
    swap(a.__isset, b.__isset);
}

backup_response::backup_response(const backup_response &other356)
{
    err = other356.err;
    pid = other356.pid;
    progress = other356.progress;
    policy_name = other356.policy_name;
    backup_id = other356.backup_id;
    checkpoint_total_size = other356.checkpoint_total_size;
    __isset = other356.__isset;
}
backup_response::backup_response(backup_response &&other357)
{
    err = std::move(other357.err);
    pid = std::move(other357.pid);
    progress = std::move(other357.progress);
    policy_name = std::move(other357.policy_name);
    backup_id = std::move(other357.backup_id);
    checkpoint_total_size = std::move(other357.checkpoint_total_size);
    __isset = std::move(other357.__isset);
}
backup_response &backup_response::operator=(const backup_response &other358)
{
    err = other358.err;
    pid = other358.pid;
    progress = other358.progress;
    policy_name = other358.policy_name;
    backup_id = other358.backup_id;
    checkpoint_total_size = other358.checkpoint_total_size;
    __isset = other358.__isset;
    return *this;
}
backup_response &backup_response::operator=(backup_response &&other359)
{
    err = std::move(other359.err);
    pid = std::move(other359.pid);
    progress = std::move(other359.progress);
    policy_name = std::move(other359.policy_name);
    backup_id = std::move(other359.backup_id);
    checkpoint_total_size = std::move(other359.checkpoint_total_size);
    __isset = std::move(other359.__isset);
    return *this;
}
void backup_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "backup_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "pid=" << to_string(pid);
    out << ", "
        << "progress=" << to_string(progress);
    out << ", "
        << "policy_name=" << to_string(policy_name);
    out << ", "
        << "backup_id=" << to_string(backup_id);
    out << ", "
        << "checkpoint_total_size=" << to_string(checkpoint_total_size);
    out << ")";
}

configuration_modify_backup_policy_request::~configuration_modify_backup_policy_request() throw() {}

void configuration_modify_backup_policy_request::__set_policy_name(const std::string &val)
{
    this->policy_name = val;
}

void configuration_modify_backup_policy_request::__set_add_appids(const std::vector<int32_t> &val)
{
    this->add_appids = val;
    __isset.add_appids = true;
}

void configuration_modify_backup_policy_request::__set_removal_appids(
    const std::vector<int32_t> &val)
{
    this->removal_appids = val;
    __isset.removal_appids = true;
}

void configuration_modify_backup_policy_request::__set_new_backup_interval_sec(const int64_t val)
{
    this->new_backup_interval_sec = val;
    __isset.new_backup_interval_sec = true;
}

void configuration_modify_backup_policy_request::__set_backup_history_count_to_keep(
    const int32_t val)
{
    this->backup_history_count_to_keep = val;
    __isset.backup_history_count_to_keep = true;
}

void configuration_modify_backup_policy_request::__set_is_disable(const bool val)
{
    this->is_disable = val;
    __isset.is_disable = true;
}

void configuration_modify_backup_policy_request::__set_start_time(const std::string &val)
{
    this->start_time = val;
    __isset.start_time = true;
}

uint32_t
configuration_modify_backup_policy_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->policy_name);
                this->__isset.policy_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->add_appids.clear();
                    uint32_t _size360;
                    ::apache::thrift::protocol::TType _etype363;
                    xfer += iprot->readListBegin(_etype363, _size360);
                    this->add_appids.resize(_size360);
                    uint32_t _i364;
                    for (_i364 = 0; _i364 < _size360; ++_i364) {
                        xfer += iprot->readI32(this->add_appids[_i364]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.add_appids = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->removal_appids.clear();
                    uint32_t _size365;
                    ::apache::thrift::protocol::TType _etype368;
                    xfer += iprot->readListBegin(_etype368, _size365);
                    this->removal_appids.resize(_size365);
                    uint32_t _i369;
                    for (_i369 = 0; _i369 < _size365; ++_i369) {
                        xfer += iprot->readI32(this->removal_appids[_i369]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.removal_appids = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->new_backup_interval_sec);
                this->__isset.new_backup_interval_sec = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->backup_history_count_to_keep);
                this->__isset.backup_history_count_to_keep = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->is_disable);
                this->__isset.is_disable = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 7:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->start_time);
                this->__isset.start_time = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_modify_backup_policy_request::write(
    ::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_modify_backup_policy_request");

    xfer += oprot->writeFieldBegin("policy_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->policy_name);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.add_appids) {
        xfer += oprot->writeFieldBegin("add_appids", ::apache::thrift::protocol::T_LIST, 2);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32,
                                          static_cast<uint32_t>(this->add_appids.size()));
            std::vector<int32_t>::const_iterator _iter370;
            for (_iter370 = this->add_appids.begin(); _iter370 != this->add_appids.end();
                 ++_iter370) {
                xfer += oprot->writeI32((*_iter370));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.removal_appids) {
        xfer += oprot->writeFieldBegin("removal_appids", ::apache::thrift::protocol::T_LIST, 3);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32,
                                          static_cast<uint32_t>(this->removal_appids.size()));
            std::vector<int32_t>::const_iterator _iter371;
            for (_iter371 = this->removal_appids.begin(); _iter371 != this->removal_appids.end();
                 ++_iter371) {
                xfer += oprot->writeI32((*_iter371));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.new_backup_interval_sec) {
        xfer +=
            oprot->writeFieldBegin("new_backup_interval_sec", ::apache::thrift::protocol::T_I64, 4);
        xfer += oprot->writeI64(this->new_backup_interval_sec);
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.backup_history_count_to_keep) {
        xfer += oprot->writeFieldBegin(
            "backup_history_count_to_keep", ::apache::thrift::protocol::T_I32, 5);
        xfer += oprot->writeI32(this->backup_history_count_to_keep);
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.is_disable) {
        xfer += oprot->writeFieldBegin("is_disable", ::apache::thrift::protocol::T_BOOL, 6);
        xfer += oprot->writeBool(this->is_disable);
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.start_time) {
        xfer += oprot->writeFieldBegin("start_time", ::apache::thrift::protocol::T_STRING, 7);
        xfer += oprot->writeString(this->start_time);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_modify_backup_policy_request &a,
          configuration_modify_backup_policy_request &b)
{
    using ::std::swap;
    swap(a.policy_name, b.policy_name);
    swap(a.add_appids, b.add_appids);
    swap(a.removal_appids, b.removal_appids);
    swap(a.new_backup_interval_sec, b.new_backup_interval_sec);
    swap(a.backup_history_count_to_keep, b.backup_history_count_to_keep);
    swap(a.is_disable, b.is_disable);
    swap(a.start_time, b.start_time);
    swap(a.__isset, b.__isset);
}

configuration_modify_backup_policy_request::configuration_modify_backup_policy_request(
    const configuration_modify_backup_policy_request &other372)
{
    policy_name = other372.policy_name;
    add_appids = other372.add_appids;
    removal_appids = other372.removal_appids;
    new_backup_interval_sec = other372.new_backup_interval_sec;
    backup_history_count_to_keep = other372.backup_history_count_to_keep;
    is_disable = other372.is_disable;
    start_time = other372.start_time;
    __isset = other372.__isset;
}
configuration_modify_backup_policy_request::configuration_modify_backup_policy_request(
    configuration_modify_backup_policy_request &&other373)
{
    policy_name = std::move(other373.policy_name);
    add_appids = std::move(other373.add_appids);
    removal_appids = std::move(other373.removal_appids);
    new_backup_interval_sec = std::move(other373.new_backup_interval_sec);
    backup_history_count_to_keep = std::move(other373.backup_history_count_to_keep);
    is_disable = std::move(other373.is_disable);
    start_time = std::move(other373.start_time);
    __isset = std::move(other373.__isset);
}
configuration_modify_backup_policy_request &configuration_modify_backup_policy_request::
operator=(const configuration_modify_backup_policy_request &other374)
{
    policy_name = other374.policy_name;
    add_appids = other374.add_appids;
    removal_appids = other374.removal_appids;
    new_backup_interval_sec = other374.new_backup_interval_sec;
    backup_history_count_to_keep = other374.backup_history_count_to_keep;
    is_disable = other374.is_disable;
    start_time = other374.start_time;
    __isset = other374.__isset;
    return *this;
}
configuration_modify_backup_policy_request &configuration_modify_backup_policy_request::
operator=(configuration_modify_backup_policy_request &&other375)
{
    policy_name = std::move(other375.policy_name);
    add_appids = std::move(other375.add_appids);
    removal_appids = std::move(other375.removal_appids);
    new_backup_interval_sec = std::move(other375.new_backup_interval_sec);
    backup_history_count_to_keep = std::move(other375.backup_history_count_to_keep);
    is_disable = std::move(other375.is_disable);
    start_time = std::move(other375.start_time);
    __isset = std::move(other375.__isset);
    return *this;
}
void configuration_modify_backup_policy_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_modify_backup_policy_request(";
    out << "policy_name=" << to_string(policy_name);
    out << ", "
        << "add_appids=";
    (__isset.add_appids ? (out << to_string(add_appids)) : (out << "<null>"));
    out << ", "
        << "removal_appids=";
    (__isset.removal_appids ? (out << to_string(removal_appids)) : (out << "<null>"));
    out << ", "
        << "new_backup_interval_sec=";
    (__isset.new_backup_interval_sec ? (out << to_string(new_backup_interval_sec))
                                     : (out << "<null>"));
    out << ", "
        << "backup_history_count_to_keep=";
    (__isset.backup_history_count_to_keep ? (out << to_string(backup_history_count_to_keep))
                                          : (out << "<null>"));
    out << ", "
        << "is_disable=";
    (__isset.is_disable ? (out << to_string(is_disable)) : (out << "<null>"));
    out << ", "
        << "start_time=";
    (__isset.start_time ? (out << to_string(start_time)) : (out << "<null>"));
    out << ")";
}

configuration_modify_backup_policy_response::~configuration_modify_backup_policy_response() throw()
{
}

void configuration_modify_backup_policy_response::__set_err(const ::dsn::error_code &val)
{
    this->err = val;
}

void configuration_modify_backup_policy_response::__set_hint_message(const std::string &val)
{
    this->hint_message = val;
}

uint32_t
configuration_modify_backup_policy_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->hint_message);
                this->__isset.hint_message = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_modify_backup_policy_response::write(
    ::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_modify_backup_policy_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("hint_message", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->hint_message);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_modify_backup_policy_response &a,
          configuration_modify_backup_policy_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.hint_message, b.hint_message);
    swap(a.__isset, b.__isset);
}

configuration_modify_backup_policy_response::configuration_modify_backup_policy_response(
    const configuration_modify_backup_policy_response &other376)
{
    err = other376.err;
    hint_message = other376.hint_message;
    __isset = other376.__isset;
}
configuration_modify_backup_policy_response::configuration_modify_backup_policy_response(
    configuration_modify_backup_policy_response &&other377)
{
    err = std::move(other377.err);
    hint_message = std::move(other377.hint_message);
    __isset = std::move(other377.__isset);
}
configuration_modify_backup_policy_response &configuration_modify_backup_policy_response::
operator=(const configuration_modify_backup_policy_response &other378)
{
    err = other378.err;
    hint_message = other378.hint_message;
    __isset = other378.__isset;
    return *this;
}
configuration_modify_backup_policy_response &configuration_modify_backup_policy_response::
operator=(configuration_modify_backup_policy_response &&other379)
{
    err = std::move(other379.err);
    hint_message = std::move(other379.hint_message);
    __isset = std::move(other379.__isset);
    return *this;
}
void configuration_modify_backup_policy_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_modify_backup_policy_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "hint_message=" << to_string(hint_message);
    out << ")";
}

configuration_add_backup_policy_request::~configuration_add_backup_policy_request() throw() {}

void configuration_add_backup_policy_request::__set_backup_provider_type(const std::string &val)
{
    this->backup_provider_type = val;
}

void configuration_add_backup_policy_request::__set_policy_name(const std::string &val)
{
    this->policy_name = val;
}

void configuration_add_backup_policy_request::__set_app_ids(const std::vector<int32_t> &val)
{
    this->app_ids = val;
}

void configuration_add_backup_policy_request::__set_backup_interval_seconds(const int64_t val)
{
    this->backup_interval_seconds = val;
}

void configuration_add_backup_policy_request::__set_backup_history_count_to_keep(const int32_t val)
{
    this->backup_history_count_to_keep = val;
}

void configuration_add_backup_policy_request::__set_start_time(const std::string &val)
{
    this->start_time = val;
}

uint32_t configuration_add_backup_policy_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->backup_provider_type);
                this->__isset.backup_provider_type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->policy_name);
                this->__isset.policy_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->app_ids.clear();
                    uint32_t _size380;
                    ::apache::thrift::protocol::TType _etype383;
                    xfer += iprot->readListBegin(_etype383, _size380);
                    this->app_ids.resize(_size380);
                    uint32_t _i384;
                    for (_i384 = 0; _i384 < _size380; ++_i384) {
                        xfer += iprot->readI32(this->app_ids[_i384]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.app_ids = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->backup_interval_seconds);
                this->__isset.backup_interval_seconds = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->backup_history_count_to_keep);
                this->__isset.backup_history_count_to_keep = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->start_time);
                this->__isset.start_time = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_add_backup_policy_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_add_backup_policy_request");

    xfer += oprot->writeFieldBegin("backup_provider_type", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->backup_provider_type);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("policy_name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->policy_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("app_ids", ::apache::thrift::protocol::T_LIST, 3);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32,
                                      static_cast<uint32_t>(this->app_ids.size()));
        std::vector<int32_t>::const_iterator _iter385;
        for (_iter385 = this->app_ids.begin(); _iter385 != this->app_ids.end(); ++_iter385) {
            xfer += oprot->writeI32((*_iter385));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("backup_interval_seconds", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->backup_interval_seconds);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "backup_history_count_to_keep", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->backup_history_count_to_keep);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("start_time", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->start_time);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_add_backup_policy_request &a, configuration_add_backup_policy_request &b)
{
    using ::std::swap;
    swap(a.backup_provider_type, b.backup_provider_type);
    swap(a.policy_name, b.policy_name);
    swap(a.app_ids, b.app_ids);
    swap(a.backup_interval_seconds, b.backup_interval_seconds);
    swap(a.backup_history_count_to_keep, b.backup_history_count_to_keep);
    swap(a.start_time, b.start_time);
    swap(a.__isset, b.__isset);
}

configuration_add_backup_policy_request::configuration_add_backup_policy_request(
    const configuration_add_backup_policy_request &other386)
{
    backup_provider_type = other386.backup_provider_type;
    policy_name = other386.policy_name;
    app_ids = other386.app_ids;
    backup_interval_seconds = other386.backup_interval_seconds;
    backup_history_count_to_keep = other386.backup_history_count_to_keep;
    start_time = other386.start_time;
    __isset = other386.__isset;
}
configuration_add_backup_policy_request::configuration_add_backup_policy_request(
    configuration_add_backup_policy_request &&other387)
{
    backup_provider_type = std::move(other387.backup_provider_type);
    policy_name = std::move(other387.policy_name);
    app_ids = std::move(other387.app_ids);
    backup_interval_seconds = std::move(other387.backup_interval_seconds);
    backup_history_count_to_keep = std::move(other387.backup_history_count_to_keep);
    start_time = std::move(other387.start_time);
    __isset = std::move(other387.__isset);
}
configuration_add_backup_policy_request &configuration_add_backup_policy_request::
operator=(const configuration_add_backup_policy_request &other388)
{
    backup_provider_type = other388.backup_provider_type;
    policy_name = other388.policy_name;
    app_ids = other388.app_ids;
    backup_interval_seconds = other388.backup_interval_seconds;
    backup_history_count_to_keep = other388.backup_history_count_to_keep;
    start_time = other388.start_time;
    __isset = other388.__isset;
    return *this;
}
configuration_add_backup_policy_request &configuration_add_backup_policy_request::
operator=(configuration_add_backup_policy_request &&other389)
{
    backup_provider_type = std::move(other389.backup_provider_type);
    policy_name = std::move(other389.policy_name);
    app_ids = std::move(other389.app_ids);
    backup_interval_seconds = std::move(other389.backup_interval_seconds);
    backup_history_count_to_keep = std::move(other389.backup_history_count_to_keep);
    start_time = std::move(other389.start_time);
    __isset = std::move(other389.__isset);
    return *this;
}
void configuration_add_backup_policy_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_add_backup_policy_request(";
    out << "backup_provider_type=" << to_string(backup_provider_type);
    out << ", "
        << "policy_name=" << to_string(policy_name);
    out << ", "
        << "app_ids=" << to_string(app_ids);
    out << ", "
        << "backup_interval_seconds=" << to_string(backup_interval_seconds);
    out << ", "
        << "backup_history_count_to_keep=" << to_string(backup_history_count_to_keep);
    out << ", "
        << "start_time=" << to_string(start_time);
    out << ")";
}

configuration_add_backup_policy_response::~configuration_add_backup_policy_response() throw() {}

void configuration_add_backup_policy_response::__set_err(const ::dsn::error_code &val)
{
    this->err = val;
}

void configuration_add_backup_policy_response::__set_hint_message(const std::string &val)
{
    this->hint_message = val;
}

uint32_t
configuration_add_backup_policy_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->hint_message);
                this->__isset.hint_message = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_add_backup_policy_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_add_backup_policy_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("hint_message", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->hint_message);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_add_backup_policy_response &a, configuration_add_backup_policy_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.hint_message, b.hint_message);
    swap(a.__isset, b.__isset);
}

configuration_add_backup_policy_response::configuration_add_backup_policy_response(
    const configuration_add_backup_policy_response &other390)
{
    err = other390.err;
    hint_message = other390.hint_message;
    __isset = other390.__isset;
}
configuration_add_backup_policy_response::configuration_add_backup_policy_response(
    configuration_add_backup_policy_response &&other391)
{
    err = std::move(other391.err);
    hint_message = std::move(other391.hint_message);
    __isset = std::move(other391.__isset);
}
configuration_add_backup_policy_response &configuration_add_backup_policy_response::
operator=(const configuration_add_backup_policy_response &other392)
{
    err = other392.err;
    hint_message = other392.hint_message;
    __isset = other392.__isset;
    return *this;
}
configuration_add_backup_policy_response &configuration_add_backup_policy_response::
operator=(configuration_add_backup_policy_response &&other393)
{
    err = std::move(other393.err);
    hint_message = std::move(other393.hint_message);
    __isset = std::move(other393.__isset);
    return *this;
}
void configuration_add_backup_policy_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_add_backup_policy_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "hint_message=" << to_string(hint_message);
    out << ")";
}

policy_entry::~policy_entry() throw() {}

void policy_entry::__set_policy_name(const std::string &val) { this->policy_name = val; }

void policy_entry::__set_backup_provider_type(const std::string &val)
{
    this->backup_provider_type = val;
}

void policy_entry::__set_backup_interval_seconds(const std::string &val)
{
    this->backup_interval_seconds = val;
}

void policy_entry::__set_app_ids(const std::set<int32_t> &val) { this->app_ids = val; }

void policy_entry::__set_backup_history_count_to_keep(const int32_t val)
{
    this->backup_history_count_to_keep = val;
}

void policy_entry::__set_start_time(const std::string &val) { this->start_time = val; }

void policy_entry::__set_is_disable(const bool val) { this->is_disable = val; }

uint32_t policy_entry::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->policy_name);
                this->__isset.policy_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->backup_provider_type);
                this->__isset.backup_provider_type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->backup_interval_seconds);
                this->__isset.backup_interval_seconds = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_SET) {
                {
                    this->app_ids.clear();
                    uint32_t _size394;
                    ::apache::thrift::protocol::TType _etype397;
                    xfer += iprot->readSetBegin(_etype397, _size394);
                    uint32_t _i398;
                    for (_i398 = 0; _i398 < _size394; ++_i398) {
                        int32_t _elem399;
                        xfer += iprot->readI32(_elem399);
                        this->app_ids.insert(_elem399);
                    }
                    xfer += iprot->readSetEnd();
                }
                this->__isset.app_ids = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->backup_history_count_to_keep);
                this->__isset.backup_history_count_to_keep = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->start_time);
                this->__isset.start_time = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 7:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->is_disable);
                this->__isset.is_disable = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t policy_entry::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("policy_entry");

    xfer += oprot->writeFieldBegin("policy_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->policy_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("backup_provider_type", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->backup_provider_type);
    xfer += oprot->writeFieldEnd();

    xfer +=
        oprot->writeFieldBegin("backup_interval_seconds", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->backup_interval_seconds);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("app_ids", ::apache::thrift::protocol::T_SET, 4);
    {
        xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32,
                                     static_cast<uint32_t>(this->app_ids.size()));
        std::set<int32_t>::const_iterator _iter400;
        for (_iter400 = this->app_ids.begin(); _iter400 != this->app_ids.end(); ++_iter400) {
            xfer += oprot->writeI32((*_iter400));
        }
        xfer += oprot->writeSetEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "backup_history_count_to_keep", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->backup_history_count_to_keep);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("start_time", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->start_time);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("is_disable", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->is_disable);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(policy_entry &a, policy_entry &b)
{
    using ::std::swap;
    swap(a.policy_name, b.policy_name);
    swap(a.backup_provider_type, b.backup_provider_type);
    swap(a.backup_interval_seconds, b.backup_interval_seconds);
    swap(a.app_ids, b.app_ids);
    swap(a.backup_history_count_to_keep, b.backup_history_count_to_keep);
    swap(a.start_time, b.start_time);
    swap(a.is_disable, b.is_disable);
    swap(a.__isset, b.__isset);
}

policy_entry::policy_entry(const policy_entry &other401)
{
    policy_name = other401.policy_name;
    backup_provider_type = other401.backup_provider_type;
    backup_interval_seconds = other401.backup_interval_seconds;
    app_ids = other401.app_ids;
    backup_history_count_to_keep = other401.backup_history_count_to_keep;
    start_time = other401.start_time;
    is_disable = other401.is_disable;
    __isset = other401.__isset;
}
policy_entry::policy_entry(policy_entry &&other402)
{
    policy_name = std::move(other402.policy_name);
    backup_provider_type = std::move(other402.backup_provider_type);
    backup_interval_seconds = std::move(other402.backup_interval_seconds);
    app_ids = std::move(other402.app_ids);
    backup_history_count_to_keep = std::move(other402.backup_history_count_to_keep);
    start_time = std::move(other402.start_time);
    is_disable = std::move(other402.is_disable);
    __isset = std::move(other402.__isset);
}
policy_entry &policy_entry::operator=(const policy_entry &other403)
{
    policy_name = other403.policy_name;
    backup_provider_type = other403.backup_provider_type;
    backup_interval_seconds = other403.backup_interval_seconds;
    app_ids = other403.app_ids;
    backup_history_count_to_keep = other403.backup_history_count_to_keep;
    start_time = other403.start_time;
    is_disable = other403.is_disable;
    __isset = other403.__isset;
    return *this;
}
policy_entry &policy_entry::operator=(policy_entry &&other404)
{
    policy_name = std::move(other404.policy_name);
    backup_provider_type = std::move(other404.backup_provider_type);
    backup_interval_seconds = std::move(other404.backup_interval_seconds);
    app_ids = std::move(other404.app_ids);
    backup_history_count_to_keep = std::move(other404.backup_history_count_to_keep);
    start_time = std::move(other404.start_time);
    is_disable = std::move(other404.is_disable);
    __isset = std::move(other404.__isset);
    return *this;
}
void policy_entry::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "policy_entry(";
    out << "policy_name=" << to_string(policy_name);
    out << ", "
        << "backup_provider_type=" << to_string(backup_provider_type);
    out << ", "
        << "backup_interval_seconds=" << to_string(backup_interval_seconds);
    out << ", "
        << "app_ids=" << to_string(app_ids);
    out << ", "
        << "backup_history_count_to_keep=" << to_string(backup_history_count_to_keep);
    out << ", "
        << "start_time=" << to_string(start_time);
    out << ", "
        << "is_disable=" << to_string(is_disable);
    out << ")";
}

backup_entry::~backup_entry() throw() {}

void backup_entry::__set_backup_id(const int64_t val) { this->backup_id = val; }

void backup_entry::__set_start_time_ms(const int64_t val) { this->start_time_ms = val; }

void backup_entry::__set_end_time_ms(const int64_t val) { this->end_time_ms = val; }

void backup_entry::__set_app_ids(const std::set<int32_t> &val) { this->app_ids = val; }

uint32_t backup_entry::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->backup_id);
                this->__isset.backup_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->start_time_ms);
                this->__isset.start_time_ms = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->end_time_ms);
                this->__isset.end_time_ms = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_SET) {
                {
                    this->app_ids.clear();
                    uint32_t _size405;
                    ::apache::thrift::protocol::TType _etype408;
                    xfer += iprot->readSetBegin(_etype408, _size405);
                    uint32_t _i409;
                    for (_i409 = 0; _i409 < _size405; ++_i409) {
                        int32_t _elem410;
                        xfer += iprot->readI32(_elem410);
                        this->app_ids.insert(_elem410);
                    }
                    xfer += iprot->readSetEnd();
                }
                this->__isset.app_ids = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t backup_entry::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("backup_entry");

    xfer += oprot->writeFieldBegin("backup_id", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->backup_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("start_time_ms", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->start_time_ms);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("end_time_ms", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->end_time_ms);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("app_ids", ::apache::thrift::protocol::T_SET, 4);
    {
        xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32,
                                     static_cast<uint32_t>(this->app_ids.size()));
        std::set<int32_t>::const_iterator _iter411;
        for (_iter411 = this->app_ids.begin(); _iter411 != this->app_ids.end(); ++_iter411) {
            xfer += oprot->writeI32((*_iter411));
        }
        xfer += oprot->writeSetEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(backup_entry &a, backup_entry &b)
{
    using ::std::swap;
    swap(a.backup_id, b.backup_id);
    swap(a.start_time_ms, b.start_time_ms);
    swap(a.end_time_ms, b.end_time_ms);
    swap(a.app_ids, b.app_ids);
    swap(a.__isset, b.__isset);
}

backup_entry::backup_entry(const backup_entry &other412)
{
    backup_id = other412.backup_id;
    start_time_ms = other412.start_time_ms;
    end_time_ms = other412.end_time_ms;
    app_ids = other412.app_ids;
    __isset = other412.__isset;
}
backup_entry::backup_entry(backup_entry &&other413)
{
    backup_id = std::move(other413.backup_id);
    start_time_ms = std::move(other413.start_time_ms);
    end_time_ms = std::move(other413.end_time_ms);
    app_ids = std::move(other413.app_ids);
    __isset = std::move(other413.__isset);
}
backup_entry &backup_entry::operator=(const backup_entry &other414)
{
    backup_id = other414.backup_id;
    start_time_ms = other414.start_time_ms;
    end_time_ms = other414.end_time_ms;
    app_ids = other414.app_ids;
    __isset = other414.__isset;
    return *this;
}
backup_entry &backup_entry::operator=(backup_entry &&other415)
{
    backup_id = std::move(other415.backup_id);
    start_time_ms = std::move(other415.start_time_ms);
    end_time_ms = std::move(other415.end_time_ms);
    app_ids = std::move(other415.app_ids);
    __isset = std::move(other415.__isset);
    return *this;
}
void backup_entry::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "backup_entry(";
    out << "backup_id=" << to_string(backup_id);
    out << ", "
        << "start_time_ms=" << to_string(start_time_ms);
    out << ", "
        << "end_time_ms=" << to_string(end_time_ms);
    out << ", "
        << "app_ids=" << to_string(app_ids);
    out << ")";
}

configuration_query_backup_policy_request::~configuration_query_backup_policy_request() throw() {}

void configuration_query_backup_policy_request::__set_policy_names(
    const std::vector<std::string> &val)
{
    this->policy_names = val;
}

void configuration_query_backup_policy_request::__set_backup_info_count(const int32_t val)
{
    this->backup_info_count = val;
}

uint32_t
configuration_query_backup_policy_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->policy_names.clear();
                    uint32_t _size416;
                    ::apache::thrift::protocol::TType _etype419;
                    xfer += iprot->readListBegin(_etype419, _size416);
                    this->policy_names.resize(_size416);
                    uint32_t _i420;
                    for (_i420 = 0; _i420 < _size416; ++_i420) {
                        xfer += iprot->readString(this->policy_names[_i420]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.policy_names = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->backup_info_count);
                this->__isset.backup_info_count = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_query_backup_policy_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_query_backup_policy_request");

    xfer += oprot->writeFieldBegin("policy_names", ::apache::thrift::protocol::T_LIST, 1);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING,
                                      static_cast<uint32_t>(this->policy_names.size()));
        std::vector<std::string>::const_iterator _iter421;
        for (_iter421 = this->policy_names.begin(); _iter421 != this->policy_names.end();
             ++_iter421) {
            xfer += oprot->writeString((*_iter421));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("backup_info_count", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->backup_info_count);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_query_backup_policy_request &a,
          configuration_query_backup_policy_request &b)
{
    using ::std::swap;
    swap(a.policy_names, b.policy_names);
    swap(a.backup_info_count, b.backup_info_count);
    swap(a.__isset, b.__isset);
}

configuration_query_backup_policy_request::configuration_query_backup_policy_request(
    const configuration_query_backup_policy_request &other422)
{
    policy_names = other422.policy_names;
    backup_info_count = other422.backup_info_count;
    __isset = other422.__isset;
}
configuration_query_backup_policy_request::configuration_query_backup_policy_request(
    configuration_query_backup_policy_request &&other423)
{
    policy_names = std::move(other423.policy_names);
    backup_info_count = std::move(other423.backup_info_count);
    __isset = std::move(other423.__isset);
}
configuration_query_backup_policy_request &configuration_query_backup_policy_request::
operator=(const configuration_query_backup_policy_request &other424)
{
    policy_names = other424.policy_names;
    backup_info_count = other424.backup_info_count;
    __isset = other424.__isset;
    return *this;
}
configuration_query_backup_policy_request &configuration_query_backup_policy_request::
operator=(configuration_query_backup_policy_request &&other425)
{
    policy_names = std::move(other425.policy_names);
    backup_info_count = std::move(other425.backup_info_count);
    __isset = std::move(other425.__isset);
    return *this;
}
void configuration_query_backup_policy_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_query_backup_policy_request(";
    out << "policy_names=" << to_string(policy_names);
    out << ", "
        << "backup_info_count=" << to_string(backup_info_count);
    out << ")";
}

configuration_query_backup_policy_response::~configuration_query_backup_policy_response() throw() {}

void configuration_query_backup_policy_response::__set_err(const ::dsn::error_code &val)
{
    this->err = val;
}

void configuration_query_backup_policy_response::__set_policys(const std::vector<policy_entry> &val)
{
    this->policys = val;
}

void configuration_query_backup_policy_response::__set_backup_infos(
    const std::vector<std::vector<backup_entry>> &val)
{
    this->backup_infos = val;
}

void configuration_query_backup_policy_response::__set_hint_msg(const std::string &val)
{
    this->hint_msg = val;
    __isset.hint_msg = true;
}

uint32_t
configuration_query_backup_policy_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->policys.clear();
                    uint32_t _size426;
                    ::apache::thrift::protocol::TType _etype429;
                    xfer += iprot->readListBegin(_etype429, _size426);
                    this->policys.resize(_size426);
                    uint32_t _i430;
                    for (_i430 = 0; _i430 < _size426; ++_i430) {
                        xfer += this->policys[_i430].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.policys = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->backup_infos.clear();
                    uint32_t _size431;
                    ::apache::thrift::protocol::TType _etype434;
                    xfer += iprot->readListBegin(_etype434, _size431);
                    this->backup_infos.resize(_size431);
                    uint32_t _i435;
                    for (_i435 = 0; _i435 < _size431; ++_i435) {
                        {
                            this->backup_infos[_i435].clear();
                            uint32_t _size436;
                            ::apache::thrift::protocol::TType _etype439;
                            xfer += iprot->readListBegin(_etype439, _size436);
                            this->backup_infos[_i435].resize(_size436);
                            uint32_t _i440;
                            for (_i440 = 0; _i440 < _size436; ++_i440) {
                                xfer += this->backup_infos[_i435][_i440].read(iprot);
                            }
                            xfer += iprot->readListEnd();
                        }
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.backup_infos = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->hint_msg);
                this->__isset.hint_msg = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_query_backup_policy_response::write(
    ::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_query_backup_policy_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("policys", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->policys.size()));
        std::vector<policy_entry>::const_iterator _iter441;
        for (_iter441 = this->policys.begin(); _iter441 != this->policys.end(); ++_iter441) {
            xfer += (*_iter441).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("backup_infos", ::apache::thrift::protocol::T_LIST, 3);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST,
                                      static_cast<uint32_t>(this->backup_infos.size()));
        std::vector<std::vector<backup_entry>>::const_iterator _iter442;
        for (_iter442 = this->backup_infos.begin(); _iter442 != this->backup_infos.end();
             ++_iter442) {
            {
                xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                              static_cast<uint32_t>((*_iter442).size()));
                std::vector<backup_entry>::const_iterator _iter443;
                for (_iter443 = (*_iter442).begin(); _iter443 != (*_iter442).end(); ++_iter443) {
                    xfer += (*_iter443).write(oprot);
                }
                xfer += oprot->writeListEnd();
            }
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    if (this->__isset.hint_msg) {
        xfer += oprot->writeFieldBegin("hint_msg", ::apache::thrift::protocol::T_STRING, 4);
        xfer += oprot->writeString(this->hint_msg);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_query_backup_policy_response &a,
          configuration_query_backup_policy_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.policys, b.policys);
    swap(a.backup_infos, b.backup_infos);
    swap(a.hint_msg, b.hint_msg);
    swap(a.__isset, b.__isset);
}

configuration_query_backup_policy_response::configuration_query_backup_policy_response(
    const configuration_query_backup_policy_response &other444)
{
    err = other444.err;
    policys = other444.policys;
    backup_infos = other444.backup_infos;
    hint_msg = other444.hint_msg;
    __isset = other444.__isset;
}
configuration_query_backup_policy_response::configuration_query_backup_policy_response(
    configuration_query_backup_policy_response &&other445)
{
    err = std::move(other445.err);
    policys = std::move(other445.policys);
    backup_infos = std::move(other445.backup_infos);
    hint_msg = std::move(other445.hint_msg);
    __isset = std::move(other445.__isset);
}
configuration_query_backup_policy_response &configuration_query_backup_policy_response::
operator=(const configuration_query_backup_policy_response &other446)
{
    err = other446.err;
    policys = other446.policys;
    backup_infos = other446.backup_infos;
    hint_msg = other446.hint_msg;
    __isset = other446.__isset;
    return *this;
}
configuration_query_backup_policy_response &configuration_query_backup_policy_response::
operator=(configuration_query_backup_policy_response &&other447)
{
    err = std::move(other447.err);
    policys = std::move(other447.policys);
    backup_infos = std::move(other447.backup_infos);
    hint_msg = std::move(other447.hint_msg);
    __isset = std::move(other447.__isset);
    return *this;
}
void configuration_query_backup_policy_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_query_backup_policy_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "policys=" << to_string(policys);
    out << ", "
        << "backup_infos=" << to_string(backup_infos);
    out << ", "
        << "hint_msg=";
    (__isset.hint_msg ? (out << to_string(hint_msg)) : (out << "<null>"));
    out << ")";
}

configuration_report_restore_status_request::~configuration_report_restore_status_request() throw()
{
}

void configuration_report_restore_status_request::__set_pid(const ::dsn::gpid &val)
{
    this->pid = val;
}

void configuration_report_restore_status_request::__set_restore_status(const ::dsn::error_code &val)
{
    this->restore_status = val;
}

void configuration_report_restore_status_request::__set_progress(const int32_t val)
{
    this->progress = val;
}

void configuration_report_restore_status_request::__set_reason(const std::string &val)
{
    this->reason = val;
    __isset.reason = true;
}

uint32_t
configuration_report_restore_status_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->restore_status.read(iprot);
                this->__isset.restore_status = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->progress);
                this->__isset.progress = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->reason);
                this->__isset.reason = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_report_restore_status_request::write(
    ::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_report_restore_status_request");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("restore_status", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->restore_status.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("progress", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->progress);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.reason) {
        xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRING, 4);
        xfer += oprot->writeString(this->reason);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_report_restore_status_request &a,
          configuration_report_restore_status_request &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.restore_status, b.restore_status);
    swap(a.progress, b.progress);
    swap(a.reason, b.reason);
    swap(a.__isset, b.__isset);
}

configuration_report_restore_status_request::configuration_report_restore_status_request(
    const configuration_report_restore_status_request &other448)
{
    pid = other448.pid;
    restore_status = other448.restore_status;
    progress = other448.progress;
    reason = other448.reason;
    __isset = other448.__isset;
}
configuration_report_restore_status_request::configuration_report_restore_status_request(
    configuration_report_restore_status_request &&other449)
{
    pid = std::move(other449.pid);
    restore_status = std::move(other449.restore_status);
    progress = std::move(other449.progress);
    reason = std::move(other449.reason);
    __isset = std::move(other449.__isset);
}
configuration_report_restore_status_request &configuration_report_restore_status_request::
operator=(const configuration_report_restore_status_request &other450)
{
    pid = other450.pid;
    restore_status = other450.restore_status;
    progress = other450.progress;
    reason = other450.reason;
    __isset = other450.__isset;
    return *this;
}
configuration_report_restore_status_request &configuration_report_restore_status_request::
operator=(configuration_report_restore_status_request &&other451)
{
    pid = std::move(other451.pid);
    restore_status = std::move(other451.restore_status);
    progress = std::move(other451.progress);
    reason = std::move(other451.reason);
    __isset = std::move(other451.__isset);
    return *this;
}
void configuration_report_restore_status_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_report_restore_status_request(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "restore_status=" << to_string(restore_status);
    out << ", "
        << "progress=" << to_string(progress);
    out << ", "
        << "reason=";
    (__isset.reason ? (out << to_string(reason)) : (out << "<null>"));
    out << ")";
}

configuration_report_restore_status_response::
    ~configuration_report_restore_status_response() throw()
{
}

void configuration_report_restore_status_response::__set_err(const ::dsn::error_code &val)
{
    this->err = val;
}

uint32_t
configuration_report_restore_status_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_report_restore_status_response::write(
    ::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_report_restore_status_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_report_restore_status_response &a,
          configuration_report_restore_status_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.__isset, b.__isset);
}

configuration_report_restore_status_response::configuration_report_restore_status_response(
    const configuration_report_restore_status_response &other452)
{
    err = other452.err;
    __isset = other452.__isset;
}
configuration_report_restore_status_response::configuration_report_restore_status_response(
    configuration_report_restore_status_response &&other453)
{
    err = std::move(other453.err);
    __isset = std::move(other453.__isset);
}
configuration_report_restore_status_response &configuration_report_restore_status_response::
operator=(const configuration_report_restore_status_response &other454)
{
    err = other454.err;
    __isset = other454.__isset;
    return *this;
}
configuration_report_restore_status_response &configuration_report_restore_status_response::
operator=(configuration_report_restore_status_response &&other455)
{
    err = std::move(other455.err);
    __isset = std::move(other455.__isset);
    return *this;
}
void configuration_report_restore_status_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_report_restore_status_response(";
    out << "err=" << to_string(err);
    out << ")";
}

configuration_query_restore_request::~configuration_query_restore_request() throw() {}

void configuration_query_restore_request::__set_restore_app_id(const int32_t val)
{
    this->restore_app_id = val;
}

uint32_t configuration_query_restore_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->restore_app_id);
                this->__isset.restore_app_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_query_restore_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_query_restore_request");

    xfer += oprot->writeFieldBegin("restore_app_id", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->restore_app_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_query_restore_request &a, configuration_query_restore_request &b)
{
    using ::std::swap;
    swap(a.restore_app_id, b.restore_app_id);
    swap(a.__isset, b.__isset);
}

configuration_query_restore_request::configuration_query_restore_request(
    const configuration_query_restore_request &other456)
{
    restore_app_id = other456.restore_app_id;
    __isset = other456.__isset;
}
configuration_query_restore_request::configuration_query_restore_request(
    configuration_query_restore_request &&other457)
{
    restore_app_id = std::move(other457.restore_app_id);
    __isset = std::move(other457.__isset);
}
configuration_query_restore_request &configuration_query_restore_request::
operator=(const configuration_query_restore_request &other458)
{
    restore_app_id = other458.restore_app_id;
    __isset = other458.__isset;
    return *this;
}
configuration_query_restore_request &configuration_query_restore_request::
operator=(configuration_query_restore_request &&other459)
{
    restore_app_id = std::move(other459.restore_app_id);
    __isset = std::move(other459.__isset);
    return *this;
}
void configuration_query_restore_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_query_restore_request(";
    out << "restore_app_id=" << to_string(restore_app_id);
    out << ")";
}

configuration_query_restore_response::~configuration_query_restore_response() throw() {}

void configuration_query_restore_response::__set_err(const ::dsn::error_code &val)
{
    this->err = val;
}

void configuration_query_restore_response::__set_restore_status(
    const std::vector<::dsn::error_code> &val)
{
    this->restore_status = val;
}

void configuration_query_restore_response::__set_restore_progress(const std::vector<int32_t> &val)
{
    this->restore_progress = val;
}

uint32_t configuration_query_restore_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->restore_status.clear();
                    uint32_t _size460;
                    ::apache::thrift::protocol::TType _etype463;
                    xfer += iprot->readListBegin(_etype463, _size460);
                    this->restore_status.resize(_size460);
                    uint32_t _i464;
                    for (_i464 = 0; _i464 < _size460; ++_i464) {
                        xfer += this->restore_status[_i464].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.restore_status = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->restore_progress.clear();
                    uint32_t _size465;
                    ::apache::thrift::protocol::TType _etype468;
                    xfer += iprot->readListBegin(_etype468, _size465);
                    this->restore_progress.resize(_size465);
                    uint32_t _i469;
                    for (_i469 = 0; _i469 < _size465; ++_i469) {
                        xfer += iprot->readI32(this->restore_progress[_i469]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.restore_progress = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_query_restore_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_query_restore_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("restore_status", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->restore_status.size()));
        std::vector<::dsn::error_code>::const_iterator _iter470;
        for (_iter470 = this->restore_status.begin(); _iter470 != this->restore_status.end();
             ++_iter470) {
            xfer += (*_iter470).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("restore_progress", ::apache::thrift::protocol::T_LIST, 3);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32,
                                      static_cast<uint32_t>(this->restore_progress.size()));
        std::vector<int32_t>::const_iterator _iter471;
        for (_iter471 = this->restore_progress.begin(); _iter471 != this->restore_progress.end();
             ++_iter471) {
            xfer += oprot->writeI32((*_iter471));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_query_restore_response &a, configuration_query_restore_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.restore_status, b.restore_status);
    swap(a.restore_progress, b.restore_progress);
    swap(a.__isset, b.__isset);
}

configuration_query_restore_response::configuration_query_restore_response(
    const configuration_query_restore_response &other472)
{
    err = other472.err;
    restore_status = other472.restore_status;
    restore_progress = other472.restore_progress;
    __isset = other472.__isset;
}
configuration_query_restore_response::configuration_query_restore_response(
    configuration_query_restore_response &&other473)
{
    err = std::move(other473.err);
    restore_status = std::move(other473.restore_status);
    restore_progress = std::move(other473.restore_progress);
    __isset = std::move(other473.__isset);
}
configuration_query_restore_response &configuration_query_restore_response::
operator=(const configuration_query_restore_response &other474)
{
    err = other474.err;
    restore_status = other474.restore_status;
    restore_progress = other474.restore_progress;
    __isset = other474.__isset;
    return *this;
}
configuration_query_restore_response &configuration_query_restore_response::
operator=(configuration_query_restore_response &&other475)
{
    err = std::move(other475.err);
    restore_status = std::move(other475.restore_status);
    restore_progress = std::move(other475.restore_progress);
    __isset = std::move(other475.__isset);
    return *this;
}
void configuration_query_restore_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_query_restore_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "restore_status=" << to_string(restore_status);
    out << ", "
        << "restore_progress=" << to_string(restore_progress);
    out << ")";
}

configuration_update_app_env_request::~configuration_update_app_env_request() throw() {}

void configuration_update_app_env_request::__set_app_name(const std::string &val)
{
    this->app_name = val;
}

void configuration_update_app_env_request::__set_op(const app_env_operation::type val)
{
    this->op = val;
}

void configuration_update_app_env_request::__set_keys(const std::vector<std::string> &val)
{
    this->keys = val;
    __isset.keys = true;
}

void configuration_update_app_env_request::__set_values(const std::vector<std::string> &val)
{
    this->values = val;
    __isset.values = true;
}

void configuration_update_app_env_request::__set_clear_prefix(const std::string &val)
{
    this->clear_prefix = val;
    __isset.clear_prefix = true;
}

uint32_t configuration_update_app_env_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast476;
                xfer += iprot->readI32(ecast476);
                this->op = (app_env_operation::type)ecast476;
                this->__isset.op = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->keys.clear();
                    uint32_t _size477;
                    ::apache::thrift::protocol::TType _etype480;
                    xfer += iprot->readListBegin(_etype480, _size477);
                    this->keys.resize(_size477);
                    uint32_t _i481;
                    for (_i481 = 0; _i481 < _size477; ++_i481) {
                        xfer += iprot->readString(this->keys[_i481]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.keys = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->values.clear();
                    uint32_t _size482;
                    ::apache::thrift::protocol::TType _etype485;
                    xfer += iprot->readListBegin(_etype485, _size482);
                    this->values.resize(_size482);
                    uint32_t _i486;
                    for (_i486 = 0; _i486 < _size482; ++_i486) {
                        xfer += iprot->readString(this->values[_i486]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.values = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->clear_prefix);
                this->__isset.clear_prefix = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_update_app_env_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_update_app_env_request");

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("op", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->op);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.keys) {
        xfer += oprot->writeFieldBegin("keys", ::apache::thrift::protocol::T_LIST, 3);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING,
                                          static_cast<uint32_t>(this->keys.size()));
            std::vector<std::string>::const_iterator _iter487;
            for (_iter487 = this->keys.begin(); _iter487 != this->keys.end(); ++_iter487) {
                xfer += oprot->writeString((*_iter487));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.values) {
        xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 4);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING,
                                          static_cast<uint32_t>(this->values.size()));
            std::vector<std::string>::const_iterator _iter488;
            for (_iter488 = this->values.begin(); _iter488 != this->values.end(); ++_iter488) {
                xfer += oprot->writeString((*_iter488));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.clear_prefix) {
        xfer += oprot->writeFieldBegin("clear_prefix", ::apache::thrift::protocol::T_STRING, 5);
        xfer += oprot->writeString(this->clear_prefix);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_update_app_env_request &a, configuration_update_app_env_request &b)
{
    using ::std::swap;
    swap(a.app_name, b.app_name);
    swap(a.op, b.op);
    swap(a.keys, b.keys);
    swap(a.values, b.values);
    swap(a.clear_prefix, b.clear_prefix);
    swap(a.__isset, b.__isset);
}

configuration_update_app_env_request::configuration_update_app_env_request(
    const configuration_update_app_env_request &other489)
{
    app_name = other489.app_name;
    op = other489.op;
    keys = other489.keys;
    values = other489.values;
    clear_prefix = other489.clear_prefix;
    __isset = other489.__isset;
}
configuration_update_app_env_request::configuration_update_app_env_request(
    configuration_update_app_env_request &&other490)
{
    app_name = std::move(other490.app_name);
    op = std::move(other490.op);
    keys = std::move(other490.keys);
    values = std::move(other490.values);
    clear_prefix = std::move(other490.clear_prefix);
    __isset = std::move(other490.__isset);
}
configuration_update_app_env_request &configuration_update_app_env_request::
operator=(const configuration_update_app_env_request &other491)
{
    app_name = other491.app_name;
    op = other491.op;
    keys = other491.keys;
    values = other491.values;
    clear_prefix = other491.clear_prefix;
    __isset = other491.__isset;
    return *this;
}
configuration_update_app_env_request &configuration_update_app_env_request::
operator=(configuration_update_app_env_request &&other492)
{
    app_name = std::move(other492.app_name);
    op = std::move(other492.op);
    keys = std::move(other492.keys);
    values = std::move(other492.values);
    clear_prefix = std::move(other492.clear_prefix);
    __isset = std::move(other492.__isset);
    return *this;
}
void configuration_update_app_env_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_update_app_env_request(";
    out << "app_name=" << to_string(app_name);
    out << ", "
        << "op=" << to_string(op);
    out << ", "
        << "keys=";
    (__isset.keys ? (out << to_string(keys)) : (out << "<null>"));
    out << ", "
        << "values=";
    (__isset.values ? (out << to_string(values)) : (out << "<null>"));
    out << ", "
        << "clear_prefix=";
    (__isset.clear_prefix ? (out << to_string(clear_prefix)) : (out << "<null>"));
    out << ")";
}

configuration_update_app_env_response::~configuration_update_app_env_response() throw() {}

void configuration_update_app_env_response::__set_err(const ::dsn::error_code &val)
{
    this->err = val;
}

void configuration_update_app_env_response::__set_hint_message(const std::string &val)
{
    this->hint_message = val;
}

uint32_t configuration_update_app_env_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->hint_message);
                this->__isset.hint_message = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_update_app_env_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_update_app_env_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("hint_message", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->hint_message);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_update_app_env_response &a, configuration_update_app_env_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.hint_message, b.hint_message);
    swap(a.__isset, b.__isset);
}

configuration_update_app_env_response::configuration_update_app_env_response(
    const configuration_update_app_env_response &other493)
{
    err = other493.err;
    hint_message = other493.hint_message;
    __isset = other493.__isset;
}
configuration_update_app_env_response::configuration_update_app_env_response(
    configuration_update_app_env_response &&other494)
{
    err = std::move(other494.err);
    hint_message = std::move(other494.hint_message);
    __isset = std::move(other494.__isset);
}
configuration_update_app_env_response &configuration_update_app_env_response::
operator=(const configuration_update_app_env_response &other495)
{
    err = other495.err;
    hint_message = other495.hint_message;
    __isset = other495.__isset;
    return *this;
}
configuration_update_app_env_response &configuration_update_app_env_response::
operator=(configuration_update_app_env_response &&other496)
{
    err = std::move(other496.err);
    hint_message = std::move(other496.hint_message);
    __isset = std::move(other496.__isset);
    return *this;
}
void configuration_update_app_env_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_update_app_env_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "hint_message=" << to_string(hint_message);
    out << ")";
}

duplication_add_request::~duplication_add_request() throw() {}

void duplication_add_request::__set_app_name(const std::string &val) { this->app_name = val; }

void duplication_add_request::__set_remote_cluster_name(const std::string &val)
{
    this->remote_cluster_name = val;
}

void duplication_add_request::__set_freezed(const bool val) { this->freezed = val; }

uint32_t duplication_add_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->remote_cluster_name);
                this->__isset.remote_cluster_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->freezed);
                this->__isset.freezed = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t duplication_add_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("duplication_add_request");

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("remote_cluster_name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->remote_cluster_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("freezed", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->freezed);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(duplication_add_request &a, duplication_add_request &b)
{
    using ::std::swap;
    swap(a.app_name, b.app_name);
    swap(a.remote_cluster_name, b.remote_cluster_name);
    swap(a.freezed, b.freezed);
    swap(a.__isset, b.__isset);
}

duplication_add_request::duplication_add_request(const duplication_add_request &other497)
{
    app_name = other497.app_name;
    remote_cluster_name = other497.remote_cluster_name;
    freezed = other497.freezed;
    __isset = other497.__isset;
}
duplication_add_request::duplication_add_request(duplication_add_request &&other498)
{
    app_name = std::move(other498.app_name);
    remote_cluster_name = std::move(other498.remote_cluster_name);
    freezed = std::move(other498.freezed);
    __isset = std::move(other498.__isset);
}
duplication_add_request &duplication_add_request::operator=(const duplication_add_request &other499)
{
    app_name = other499.app_name;
    remote_cluster_name = other499.remote_cluster_name;
    freezed = other499.freezed;
    __isset = other499.__isset;
    return *this;
}
duplication_add_request &duplication_add_request::operator=(duplication_add_request &&other500)
{
    app_name = std::move(other500.app_name);
    remote_cluster_name = std::move(other500.remote_cluster_name);
    freezed = std::move(other500.freezed);
    __isset = std::move(other500.__isset);
    return *this;
}
void duplication_add_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "duplication_add_request(";
    out << "app_name=" << to_string(app_name);
    out << ", "
        << "remote_cluster_name=" << to_string(remote_cluster_name);
    out << ", "
        << "freezed=" << to_string(freezed);
    out << ")";
}

duplication_add_response::~duplication_add_response() throw() {}

void duplication_add_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void duplication_add_response::__set_appid(const int32_t val) { this->appid = val; }

void duplication_add_response::__set_dupid(const int32_t val) { this->dupid = val; }

void duplication_add_response::__set_hint(const std::string &val)
{
    this->hint = val;
    __isset.hint = true;
}

uint32_t duplication_add_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->appid);
                this->__isset.appid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->dupid);
                this->__isset.dupid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->hint);
                this->__isset.hint = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t duplication_add_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("duplication_add_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("appid", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->appid);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("dupid", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->dupid);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.hint) {
        xfer += oprot->writeFieldBegin("hint", ::apache::thrift::protocol::T_STRING, 4);
        xfer += oprot->writeString(this->hint);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(duplication_add_response &a, duplication_add_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.appid, b.appid);
    swap(a.dupid, b.dupid);
    swap(a.hint, b.hint);
    swap(a.__isset, b.__isset);
}

duplication_add_response::duplication_add_response(const duplication_add_response &other501)
{
    err = other501.err;
    appid = other501.appid;
    dupid = other501.dupid;
    hint = other501.hint;
    __isset = other501.__isset;
}
duplication_add_response::duplication_add_response(duplication_add_response &&other502)
{
    err = std::move(other502.err);
    appid = std::move(other502.appid);
    dupid = std::move(other502.dupid);
    hint = std::move(other502.hint);
    __isset = std::move(other502.__isset);
}
duplication_add_response &duplication_add_response::
operator=(const duplication_add_response &other503)
{
    err = other503.err;
    appid = other503.appid;
    dupid = other503.dupid;
    hint = other503.hint;
    __isset = other503.__isset;
    return *this;
}
duplication_add_response &duplication_add_response::operator=(duplication_add_response &&other504)
{
    err = std::move(other504.err);
    appid = std::move(other504.appid);
    dupid = std::move(other504.dupid);
    hint = std::move(other504.hint);
    __isset = std::move(other504.__isset);
    return *this;
}
void duplication_add_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "duplication_add_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "appid=" << to_string(appid);
    out << ", "
        << "dupid=" << to_string(dupid);
    out << ", "
        << "hint=";
    (__isset.hint ? (out << to_string(hint)) : (out << "<null>"));
    out << ")";
}

duplication_modify_request::~duplication_modify_request() throw() {}

void duplication_modify_request::__set_app_name(const std::string &val) { this->app_name = val; }

void duplication_modify_request::__set_dupid(const int32_t val) { this->dupid = val; }

void duplication_modify_request::__set_status(const duplication_status::type val)
{
    this->status = val;
    __isset.status = true;
}

void duplication_modify_request::__set_fail_mode(const duplication_fail_mode::type val)
{
    this->fail_mode = val;
    __isset.fail_mode = true;
}

uint32_t duplication_modify_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->dupid);
                this->__isset.dupid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast505;
                xfer += iprot->readI32(ecast505);
                this->status = (duplication_status::type)ecast505;
                this->__isset.status = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast506;
                xfer += iprot->readI32(ecast506);
                this->fail_mode = (duplication_fail_mode::type)ecast506;
                this->__isset.fail_mode = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t duplication_modify_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("duplication_modify_request");

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("dupid", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->dupid);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.status) {
        xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
        xfer += oprot->writeI32((int32_t)this->status);
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.fail_mode) {
        xfer += oprot->writeFieldBegin("fail_mode", ::apache::thrift::protocol::T_I32, 4);
        xfer += oprot->writeI32((int32_t)this->fail_mode);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(duplication_modify_request &a, duplication_modify_request &b)
{
    using ::std::swap;
    swap(a.app_name, b.app_name);
    swap(a.dupid, b.dupid);
    swap(a.status, b.status);
    swap(a.fail_mode, b.fail_mode);
    swap(a.__isset, b.__isset);
}

duplication_modify_request::duplication_modify_request(const duplication_modify_request &other507)
{
    app_name = other507.app_name;
    dupid = other507.dupid;
    status = other507.status;
    fail_mode = other507.fail_mode;
    __isset = other507.__isset;
}
duplication_modify_request::duplication_modify_request(duplication_modify_request &&other508)
{
    app_name = std::move(other508.app_name);
    dupid = std::move(other508.dupid);
    status = std::move(other508.status);
    fail_mode = std::move(other508.fail_mode);
    __isset = std::move(other508.__isset);
}
duplication_modify_request &duplication_modify_request::
operator=(const duplication_modify_request &other509)
{
    app_name = other509.app_name;
    dupid = other509.dupid;
    status = other509.status;
    fail_mode = other509.fail_mode;
    __isset = other509.__isset;
    return *this;
}
duplication_modify_request &duplication_modify_request::
operator=(duplication_modify_request &&other510)
{
    app_name = std::move(other510.app_name);
    dupid = std::move(other510.dupid);
    status = std::move(other510.status);
    fail_mode = std::move(other510.fail_mode);
    __isset = std::move(other510.__isset);
    return *this;
}
void duplication_modify_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "duplication_modify_request(";
    out << "app_name=" << to_string(app_name);
    out << ", "
        << "dupid=" << to_string(dupid);
    out << ", "
        << "status=";
    (__isset.status ? (out << to_string(status)) : (out << "<null>"));
    out << ", "
        << "fail_mode=";
    (__isset.fail_mode ? (out << to_string(fail_mode)) : (out << "<null>"));
    out << ")";
}

duplication_modify_response::~duplication_modify_response() throw() {}

void duplication_modify_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void duplication_modify_response::__set_appid(const int32_t val) { this->appid = val; }

uint32_t duplication_modify_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->appid);
                this->__isset.appid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t duplication_modify_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("duplication_modify_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("appid", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->appid);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(duplication_modify_response &a, duplication_modify_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.appid, b.appid);
    swap(a.__isset, b.__isset);
}

duplication_modify_response::duplication_modify_response(
    const duplication_modify_response &other511)
{
    err = other511.err;
    appid = other511.appid;
    __isset = other511.__isset;
}
duplication_modify_response::duplication_modify_response(duplication_modify_response &&other512)
{
    err = std::move(other512.err);
    appid = std::move(other512.appid);
    __isset = std::move(other512.__isset);
}
duplication_modify_response &duplication_modify_response::
operator=(const duplication_modify_response &other513)
{
    err = other513.err;
    appid = other513.appid;
    __isset = other513.__isset;
    return *this;
}
duplication_modify_response &duplication_modify_response::
operator=(duplication_modify_response &&other514)
{
    err = std::move(other514.err);
    appid = std::move(other514.appid);
    __isset = std::move(other514.__isset);
    return *this;
}
void duplication_modify_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "duplication_modify_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "appid=" << to_string(appid);
    out << ")";
}

duplication_entry::~duplication_entry() throw() {}

void duplication_entry::__set_dupid(const int32_t val) { this->dupid = val; }

void duplication_entry::__set_status(const duplication_status::type val) { this->status = val; }

void duplication_entry::__set_remote(const std::string &val) { this->remote = val; }

void duplication_entry::__set_create_ts(const int64_t val) { this->create_ts = val; }

void duplication_entry::__set_progress(const std::map<int32_t, int64_t> &val)
{
    this->progress = val;
    __isset.progress = true;
}

void duplication_entry::__set_fail_mode(const duplication_fail_mode::type val)
{
    this->fail_mode = val;
    __isset.fail_mode = true;
}

uint32_t duplication_entry::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->dupid);
                this->__isset.dupid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast515;
                xfer += iprot->readI32(ecast515);
                this->status = (duplication_status::type)ecast515;
                this->__isset.status = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->remote);
                this->__isset.remote = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->create_ts);
                this->__isset.create_ts = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->progress.clear();
                    uint32_t _size516;
                    ::apache::thrift::protocol::TType _ktype517;
                    ::apache::thrift::protocol::TType _vtype518;
                    xfer += iprot->readMapBegin(_ktype517, _vtype518, _size516);
                    uint32_t _i520;
                    for (_i520 = 0; _i520 < _size516; ++_i520) {
                        int32_t _key521;
                        xfer += iprot->readI32(_key521);
                        int64_t &_val522 = this->progress[_key521];
                        xfer += iprot->readI64(_val522);
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.progress = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 7:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast523;
                xfer += iprot->readI32(ecast523);
                this->fail_mode = (duplication_fail_mode::type)ecast523;
                this->__isset.fail_mode = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t duplication_entry::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("duplication_entry");

    xfer += oprot->writeFieldBegin("dupid", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->dupid);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("remote", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->remote);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("create_ts", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->create_ts);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.progress) {
        xfer += oprot->writeFieldBegin("progress", ::apache::thrift::protocol::T_MAP, 5);
        {
            xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32,
                                         ::apache::thrift::protocol::T_I64,
                                         static_cast<uint32_t>(this->progress.size()));
            std::map<int32_t, int64_t>::const_iterator _iter524;
            for (_iter524 = this->progress.begin(); _iter524 != this->progress.end(); ++_iter524) {
                xfer += oprot->writeI32(_iter524->first);
                xfer += oprot->writeI64(_iter524->second);
            }
            xfer += oprot->writeMapEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.fail_mode) {
        xfer += oprot->writeFieldBegin("fail_mode", ::apache::thrift::protocol::T_I32, 7);
        xfer += oprot->writeI32((int32_t)this->fail_mode);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(duplication_entry &a, duplication_entry &b)
{
    using ::std::swap;
    swap(a.dupid, b.dupid);
    swap(a.status, b.status);
    swap(a.remote, b.remote);
    swap(a.create_ts, b.create_ts);
    swap(a.progress, b.progress);
    swap(a.fail_mode, b.fail_mode);
    swap(a.__isset, b.__isset);
}

duplication_entry::duplication_entry(const duplication_entry &other525)
{
    dupid = other525.dupid;
    status = other525.status;
    remote = other525.remote;
    create_ts = other525.create_ts;
    progress = other525.progress;
    fail_mode = other525.fail_mode;
    __isset = other525.__isset;
}
duplication_entry::duplication_entry(duplication_entry &&other526)
{
    dupid = std::move(other526.dupid);
    status = std::move(other526.status);
    remote = std::move(other526.remote);
    create_ts = std::move(other526.create_ts);
    progress = std::move(other526.progress);
    fail_mode = std::move(other526.fail_mode);
    __isset = std::move(other526.__isset);
}
duplication_entry &duplication_entry::operator=(const duplication_entry &other527)
{
    dupid = other527.dupid;
    status = other527.status;
    remote = other527.remote;
    create_ts = other527.create_ts;
    progress = other527.progress;
    fail_mode = other527.fail_mode;
    __isset = other527.__isset;
    return *this;
}
duplication_entry &duplication_entry::operator=(duplication_entry &&other528)
{
    dupid = std::move(other528.dupid);
    status = std::move(other528.status);
    remote = std::move(other528.remote);
    create_ts = std::move(other528.create_ts);
    progress = std::move(other528.progress);
    fail_mode = std::move(other528.fail_mode);
    __isset = std::move(other528.__isset);
    return *this;
}
void duplication_entry::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "duplication_entry(";
    out << "dupid=" << to_string(dupid);
    out << ", "
        << "status=" << to_string(status);
    out << ", "
        << "remote=" << to_string(remote);
    out << ", "
        << "create_ts=" << to_string(create_ts);
    out << ", "
        << "progress=";
    (__isset.progress ? (out << to_string(progress)) : (out << "<null>"));
    out << ", "
        << "fail_mode=";
    (__isset.fail_mode ? (out << to_string(fail_mode)) : (out << "<null>"));
    out << ")";
}

duplication_query_request::~duplication_query_request() throw() {}

void duplication_query_request::__set_app_name(const std::string &val) { this->app_name = val; }

uint32_t duplication_query_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t duplication_query_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("duplication_query_request");

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(duplication_query_request &a, duplication_query_request &b)
{
    using ::std::swap;
    swap(a.app_name, b.app_name);
    swap(a.__isset, b.__isset);
}

duplication_query_request::duplication_query_request(const duplication_query_request &other529)
{
    app_name = other529.app_name;
    __isset = other529.__isset;
}
duplication_query_request::duplication_query_request(duplication_query_request &&other530)
{
    app_name = std::move(other530.app_name);
    __isset = std::move(other530.__isset);
}
duplication_query_request &duplication_query_request::
operator=(const duplication_query_request &other531)
{
    app_name = other531.app_name;
    __isset = other531.__isset;
    return *this;
}
duplication_query_request &duplication_query_request::
operator=(duplication_query_request &&other532)
{
    app_name = std::move(other532.app_name);
    __isset = std::move(other532.__isset);
    return *this;
}
void duplication_query_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "duplication_query_request(";
    out << "app_name=" << to_string(app_name);
    out << ")";
}

duplication_query_response::~duplication_query_response() throw() {}

void duplication_query_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void duplication_query_response::__set_appid(const int32_t val) { this->appid = val; }

void duplication_query_response::__set_entry_list(const std::vector<duplication_entry> &val)
{
    this->entry_list = val;
}

uint32_t duplication_query_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->appid);
                this->__isset.appid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->entry_list.clear();
                    uint32_t _size533;
                    ::apache::thrift::protocol::TType _etype536;
                    xfer += iprot->readListBegin(_etype536, _size533);
                    this->entry_list.resize(_size533);
                    uint32_t _i537;
                    for (_i537 = 0; _i537 < _size533; ++_i537) {
                        xfer += this->entry_list[_i537].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.entry_list = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t duplication_query_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("duplication_query_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("appid", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->appid);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("entry_list", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->entry_list.size()));
        std::vector<duplication_entry>::const_iterator _iter538;
        for (_iter538 = this->entry_list.begin(); _iter538 != this->entry_list.end(); ++_iter538) {
            xfer += (*_iter538).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(duplication_query_response &a, duplication_query_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.appid, b.appid);
    swap(a.entry_list, b.entry_list);
    swap(a.__isset, b.__isset);
}

duplication_query_response::duplication_query_response(const duplication_query_response &other539)
{
    err = other539.err;
    appid = other539.appid;
    entry_list = other539.entry_list;
    __isset = other539.__isset;
}
duplication_query_response::duplication_query_response(duplication_query_response &&other540)
{
    err = std::move(other540.err);
    appid = std::move(other540.appid);
    entry_list = std::move(other540.entry_list);
    __isset = std::move(other540.__isset);
}
duplication_query_response &duplication_query_response::
operator=(const duplication_query_response &other541)
{
    err = other541.err;
    appid = other541.appid;
    entry_list = other541.entry_list;
    __isset = other541.__isset;
    return *this;
}
duplication_query_response &duplication_query_response::
operator=(duplication_query_response &&other542)
{
    err = std::move(other542.err);
    appid = std::move(other542.appid);
    entry_list = std::move(other542.entry_list);
    __isset = std::move(other542.__isset);
    return *this;
}
void duplication_query_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "duplication_query_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "appid=" << to_string(appid);
    out << ", "
        << "entry_list=" << to_string(entry_list);
    out << ")";
}

duplication_confirm_entry::~duplication_confirm_entry() throw() {}

void duplication_confirm_entry::__set_dupid(const int32_t val) { this->dupid = val; }

void duplication_confirm_entry::__set_confirmed_decree(const int64_t val)
{
    this->confirmed_decree = val;
}

uint32_t duplication_confirm_entry::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->dupid);
                this->__isset.dupid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->confirmed_decree);
                this->__isset.confirmed_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t duplication_confirm_entry::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("duplication_confirm_entry");

    xfer += oprot->writeFieldBegin("dupid", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->dupid);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("confirmed_decree", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->confirmed_decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(duplication_confirm_entry &a, duplication_confirm_entry &b)
{
    using ::std::swap;
    swap(a.dupid, b.dupid);
    swap(a.confirmed_decree, b.confirmed_decree);
    swap(a.__isset, b.__isset);
}

duplication_confirm_entry::duplication_confirm_entry(const duplication_confirm_entry &other543)
{
    dupid = other543.dupid;
    confirmed_decree = other543.confirmed_decree;
    __isset = other543.__isset;
}
duplication_confirm_entry::duplication_confirm_entry(duplication_confirm_entry &&other544)
{
    dupid = std::move(other544.dupid);
    confirmed_decree = std::move(other544.confirmed_decree);
    __isset = std::move(other544.__isset);
}
duplication_confirm_entry &duplication_confirm_entry::
operator=(const duplication_confirm_entry &other545)
{
    dupid = other545.dupid;
    confirmed_decree = other545.confirmed_decree;
    __isset = other545.__isset;
    return *this;
}
duplication_confirm_entry &duplication_confirm_entry::
operator=(duplication_confirm_entry &&other546)
{
    dupid = std::move(other546.dupid);
    confirmed_decree = std::move(other546.confirmed_decree);
    __isset = std::move(other546.__isset);
    return *this;
}
void duplication_confirm_entry::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "duplication_confirm_entry(";
    out << "dupid=" << to_string(dupid);
    out << ", "
        << "confirmed_decree=" << to_string(confirmed_decree);
    out << ")";
}

duplication_sync_request::~duplication_sync_request() throw() {}

void duplication_sync_request::__set_node(const ::dsn::rpc_address &val) { this->node = val; }

void duplication_sync_request::__set_confirm_list(
    const std::map<::dsn::gpid, std::vector<duplication_confirm_entry>> &val)
{
    this->confirm_list = val;
}

uint32_t duplication_sync_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->node.read(iprot);
                this->__isset.node = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->confirm_list.clear();
                    uint32_t _size547;
                    ::apache::thrift::protocol::TType _ktype548;
                    ::apache::thrift::protocol::TType _vtype549;
                    xfer += iprot->readMapBegin(_ktype548, _vtype549, _size547);
                    uint32_t _i551;
                    for (_i551 = 0; _i551 < _size547; ++_i551) {
                        ::dsn::gpid _key552;
                        xfer += _key552.read(iprot);
                        std::vector<duplication_confirm_entry> &_val553 =
                            this->confirm_list[_key552];
                        {
                            _val553.clear();
                            uint32_t _size554;
                            ::apache::thrift::protocol::TType _etype557;
                            xfer += iprot->readListBegin(_etype557, _size554);
                            _val553.resize(_size554);
                            uint32_t _i558;
                            for (_i558 = 0; _i558 < _size554; ++_i558) {
                                xfer += _val553[_i558].read(iprot);
                            }
                            xfer += iprot->readListEnd();
                        }
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.confirm_list = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t duplication_sync_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("duplication_sync_request");

    xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->node.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("confirm_list", ::apache::thrift::protocol::T_MAP, 2);
    {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRUCT,
                                     ::apache::thrift::protocol::T_LIST,
                                     static_cast<uint32_t>(this->confirm_list.size()));
        std::map<::dsn::gpid, std::vector<duplication_confirm_entry>>::const_iterator _iter559;
        for (_iter559 = this->confirm_list.begin(); _iter559 != this->confirm_list.end();
             ++_iter559) {
            xfer += _iter559->first.write(oprot);
            {
                xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                              static_cast<uint32_t>(_iter559->second.size()));
                std::vector<duplication_confirm_entry>::const_iterator _iter560;
                for (_iter560 = _iter559->second.begin(); _iter560 != _iter559->second.end();
                     ++_iter560) {
                    xfer += (*_iter560).write(oprot);
                }
                xfer += oprot->writeListEnd();
            }
        }
        xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(duplication_sync_request &a, duplication_sync_request &b)
{
    using ::std::swap;
    swap(a.node, b.node);
    swap(a.confirm_list, b.confirm_list);
    swap(a.__isset, b.__isset);
}

duplication_sync_request::duplication_sync_request(const duplication_sync_request &other561)
{
    node = other561.node;
    confirm_list = other561.confirm_list;
    __isset = other561.__isset;
}
duplication_sync_request::duplication_sync_request(duplication_sync_request &&other562)
{
    node = std::move(other562.node);
    confirm_list = std::move(other562.confirm_list);
    __isset = std::move(other562.__isset);
}
duplication_sync_request &duplication_sync_request::
operator=(const duplication_sync_request &other563)
{
    node = other563.node;
    confirm_list = other563.confirm_list;
    __isset = other563.__isset;
    return *this;
}
duplication_sync_request &duplication_sync_request::operator=(duplication_sync_request &&other564)
{
    node = std::move(other564.node);
    confirm_list = std::move(other564.confirm_list);
    __isset = std::move(other564.__isset);
    return *this;
}
void duplication_sync_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "duplication_sync_request(";
    out << "node=" << to_string(node);
    out << ", "
        << "confirm_list=" << to_string(confirm_list);
    out << ")";
}

duplication_sync_response::~duplication_sync_response() throw() {}

void duplication_sync_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void duplication_sync_response::__set_dup_map(
    const std::map<int32_t, std::map<int32_t, duplication_entry>> &val)
{
    this->dup_map = val;
}

uint32_t duplication_sync_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->dup_map.clear();
                    uint32_t _size565;
                    ::apache::thrift::protocol::TType _ktype566;
                    ::apache::thrift::protocol::TType _vtype567;
                    xfer += iprot->readMapBegin(_ktype566, _vtype567, _size565);
                    uint32_t _i569;
                    for (_i569 = 0; _i569 < _size565; ++_i569) {
                        int32_t _key570;
                        xfer += iprot->readI32(_key570);
                        std::map<int32_t, duplication_entry> &_val571 = this->dup_map[_key570];
                        {
                            _val571.clear();
                            uint32_t _size572;
                            ::apache::thrift::protocol::TType _ktype573;
                            ::apache::thrift::protocol::TType _vtype574;
                            xfer += iprot->readMapBegin(_ktype573, _vtype574, _size572);
                            uint32_t _i576;
                            for (_i576 = 0; _i576 < _size572; ++_i576) {
                                int32_t _key577;
                                xfer += iprot->readI32(_key577);
                                duplication_entry &_val578 = _val571[_key577];
                                xfer += _val578.read(iprot);
                            }
                            xfer += iprot->readMapEnd();
                        }
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.dup_map = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t duplication_sync_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("duplication_sync_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("dup_map", ::apache::thrift::protocol::T_MAP, 2);
    {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32,
                                     ::apache::thrift::protocol::T_MAP,
                                     static_cast<uint32_t>(this->dup_map.size()));
        std::map<int32_t, std::map<int32_t, duplication_entry>>::const_iterator _iter579;
        for (_iter579 = this->dup_map.begin(); _iter579 != this->dup_map.end(); ++_iter579) {
            xfer += oprot->writeI32(_iter579->first);
            {
                xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32,
                                             ::apache::thrift::protocol::T_STRUCT,
                                             static_cast<uint32_t>(_iter579->second.size()));
                std::map<int32_t, duplication_entry>::const_iterator _iter580;
                for (_iter580 = _iter579->second.begin(); _iter580 != _iter579->second.end();
                     ++_iter580) {
                    xfer += oprot->writeI32(_iter580->first);
                    xfer += _iter580->second.write(oprot);
                }
                xfer += oprot->writeMapEnd();
            }
        }
        xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(duplication_sync_response &a, duplication_sync_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.dup_map, b.dup_map);
    swap(a.__isset, b.__isset);
}

duplication_sync_response::duplication_sync_response(const duplication_sync_response &other581)
{
    err = other581.err;
    dup_map = other581.dup_map;
    __isset = other581.__isset;
}
duplication_sync_response::duplication_sync_response(duplication_sync_response &&other582)
{
    err = std::move(other582.err);
    dup_map = std::move(other582.dup_map);
    __isset = std::move(other582.__isset);
}
duplication_sync_response &duplication_sync_response::
operator=(const duplication_sync_response &other583)
{
    err = other583.err;
    dup_map = other583.dup_map;
    __isset = other583.__isset;
    return *this;
}
duplication_sync_response &duplication_sync_response::
operator=(duplication_sync_response &&other584)
{
    err = std::move(other584.err);
    dup_map = std::move(other584.dup_map);
    __isset = std::move(other584.__isset);
    return *this;
}
void duplication_sync_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "duplication_sync_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "dup_map=" << to_string(dup_map);
    out << ")";
}

ddd_diagnose_request::~ddd_diagnose_request() throw() {}

void ddd_diagnose_request::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

uint32_t ddd_diagnose_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t ddd_diagnose_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("ddd_diagnose_request");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(ddd_diagnose_request &a, ddd_diagnose_request &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.__isset, b.__isset);
}

ddd_diagnose_request::ddd_diagnose_request(const ddd_diagnose_request &other585)
{
    pid = other585.pid;
    __isset = other585.__isset;
}
ddd_diagnose_request::ddd_diagnose_request(ddd_diagnose_request &&other586)
{
    pid = std::move(other586.pid);
    __isset = std::move(other586.__isset);
}
ddd_diagnose_request &ddd_diagnose_request::operator=(const ddd_diagnose_request &other587)
{
    pid = other587.pid;
    __isset = other587.__isset;
    return *this;
}
ddd_diagnose_request &ddd_diagnose_request::operator=(ddd_diagnose_request &&other588)
{
    pid = std::move(other588.pid);
    __isset = std::move(other588.__isset);
    return *this;
}
void ddd_diagnose_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "ddd_diagnose_request(";
    out << "pid=" << to_string(pid);
    out << ")";
}

ddd_node_info::~ddd_node_info() throw() {}

void ddd_node_info::__set_node(const ::dsn::rpc_address &val) { this->node = val; }

void ddd_node_info::__set_drop_time_ms(const int64_t val) { this->drop_time_ms = val; }

void ddd_node_info::__set_is_alive(const bool val) { this->is_alive = val; }

void ddd_node_info::__set_is_collected(const bool val) { this->is_collected = val; }

void ddd_node_info::__set_ballot(const int64_t val) { this->ballot = val; }

void ddd_node_info::__set_last_committed_decree(const int64_t val)
{
    this->last_committed_decree = val;
}

void ddd_node_info::__set_last_prepared_decree(const int64_t val)
{
    this->last_prepared_decree = val;
}

uint32_t ddd_node_info::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->node.read(iprot);
                this->__isset.node = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->drop_time_ms);
                this->__isset.drop_time_ms = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->is_alive);
                this->__isset.is_alive = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->is_collected);
                this->__isset.is_collected = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->ballot);
                this->__isset.ballot = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_committed_decree);
                this->__isset.last_committed_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 7:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_prepared_decree);
                this->__isset.last_prepared_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t ddd_node_info::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("ddd_node_info");

    xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->node.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("drop_time_ms", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->drop_time_ms);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("is_alive", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->is_alive);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("is_collected", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->is_collected);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->ballot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("last_committed_decree", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->last_committed_decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("last_prepared_decree", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->last_prepared_decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(ddd_node_info &a, ddd_node_info &b)
{
    using ::std::swap;
    swap(a.node, b.node);
    swap(a.drop_time_ms, b.drop_time_ms);
    swap(a.is_alive, b.is_alive);
    swap(a.is_collected, b.is_collected);
    swap(a.ballot, b.ballot);
    swap(a.last_committed_decree, b.last_committed_decree);
    swap(a.last_prepared_decree, b.last_prepared_decree);
    swap(a.__isset, b.__isset);
}

ddd_node_info::ddd_node_info(const ddd_node_info &other589)
{
    node = other589.node;
    drop_time_ms = other589.drop_time_ms;
    is_alive = other589.is_alive;
    is_collected = other589.is_collected;
    ballot = other589.ballot;
    last_committed_decree = other589.last_committed_decree;
    last_prepared_decree = other589.last_prepared_decree;
    __isset = other589.__isset;
}
ddd_node_info::ddd_node_info(ddd_node_info &&other590)
{
    node = std::move(other590.node);
    drop_time_ms = std::move(other590.drop_time_ms);
    is_alive = std::move(other590.is_alive);
    is_collected = std::move(other590.is_collected);
    ballot = std::move(other590.ballot);
    last_committed_decree = std::move(other590.last_committed_decree);
    last_prepared_decree = std::move(other590.last_prepared_decree);
    __isset = std::move(other590.__isset);
}
ddd_node_info &ddd_node_info::operator=(const ddd_node_info &other591)
{
    node = other591.node;
    drop_time_ms = other591.drop_time_ms;
    is_alive = other591.is_alive;
    is_collected = other591.is_collected;
    ballot = other591.ballot;
    last_committed_decree = other591.last_committed_decree;
    last_prepared_decree = other591.last_prepared_decree;
    __isset = other591.__isset;
    return *this;
}
ddd_node_info &ddd_node_info::operator=(ddd_node_info &&other592)
{
    node = std::move(other592.node);
    drop_time_ms = std::move(other592.drop_time_ms);
    is_alive = std::move(other592.is_alive);
    is_collected = std::move(other592.is_collected);
    ballot = std::move(other592.ballot);
    last_committed_decree = std::move(other592.last_committed_decree);
    last_prepared_decree = std::move(other592.last_prepared_decree);
    __isset = std::move(other592.__isset);
    return *this;
}
void ddd_node_info::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "ddd_node_info(";
    out << "node=" << to_string(node);
    out << ", "
        << "drop_time_ms=" << to_string(drop_time_ms);
    out << ", "
        << "is_alive=" << to_string(is_alive);
    out << ", "
        << "is_collected=" << to_string(is_collected);
    out << ", "
        << "ballot=" << to_string(ballot);
    out << ", "
        << "last_committed_decree=" << to_string(last_committed_decree);
    out << ", "
        << "last_prepared_decree=" << to_string(last_prepared_decree);
    out << ")";
}

ddd_partition_info::~ddd_partition_info() throw() {}

void ddd_partition_info::__set_config(const ::dsn::partition_configuration &val)
{
    this->config = val;
}

void ddd_partition_info::__set_dropped(const std::vector<ddd_node_info> &val)
{
    this->dropped = val;
}

void ddd_partition_info::__set_reason(const std::string &val) { this->reason = val; }

uint32_t ddd_partition_info::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->config.read(iprot);
                this->__isset.config = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->dropped.clear();
                    uint32_t _size593;
                    ::apache::thrift::protocol::TType _etype596;
                    xfer += iprot->readListBegin(_etype596, _size593);
                    this->dropped.resize(_size593);
                    uint32_t _i597;
                    for (_i597 = 0; _i597 < _size593; ++_i597) {
                        xfer += this->dropped[_i597].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.dropped = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->reason);
                this->__isset.reason = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t ddd_partition_info::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("ddd_partition_info");

    xfer += oprot->writeFieldBegin("config", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->config.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("dropped", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->dropped.size()));
        std::vector<ddd_node_info>::const_iterator _iter598;
        for (_iter598 = this->dropped.begin(); _iter598 != this->dropped.end(); ++_iter598) {
            xfer += (*_iter598).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->reason);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(ddd_partition_info &a, ddd_partition_info &b)
{
    using ::std::swap;
    swap(a.config, b.config);
    swap(a.dropped, b.dropped);
    swap(a.reason, b.reason);
    swap(a.__isset, b.__isset);
}

ddd_partition_info::ddd_partition_info(const ddd_partition_info &other599)
{
    config = other599.config;
    dropped = other599.dropped;
    reason = other599.reason;
    __isset = other599.__isset;
}
ddd_partition_info::ddd_partition_info(ddd_partition_info &&other600)
{
    config = std::move(other600.config);
    dropped = std::move(other600.dropped);
    reason = std::move(other600.reason);
    __isset = std::move(other600.__isset);
}
ddd_partition_info &ddd_partition_info::operator=(const ddd_partition_info &other601)
{
    config = other601.config;
    dropped = other601.dropped;
    reason = other601.reason;
    __isset = other601.__isset;
    return *this;
}
ddd_partition_info &ddd_partition_info::operator=(ddd_partition_info &&other602)
{
    config = std::move(other602.config);
    dropped = std::move(other602.dropped);
    reason = std::move(other602.reason);
    __isset = std::move(other602.__isset);
    return *this;
}
void ddd_partition_info::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "ddd_partition_info(";
    out << "config=" << to_string(config);
    out << ", "
        << "dropped=" << to_string(dropped);
    out << ", "
        << "reason=" << to_string(reason);
    out << ")";
}

ddd_diagnose_response::~ddd_diagnose_response() throw() {}

void ddd_diagnose_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void ddd_diagnose_response::__set_partitions(const std::vector<ddd_partition_info> &val)
{
    this->partitions = val;
}

uint32_t ddd_diagnose_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->partitions.clear();
                    uint32_t _size603;
                    ::apache::thrift::protocol::TType _etype606;
                    xfer += iprot->readListBegin(_etype606, _size603);
                    this->partitions.resize(_size603);
                    uint32_t _i607;
                    for (_i607 = 0; _i607 < _size603; ++_i607) {
                        xfer += this->partitions[_i607].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.partitions = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t ddd_diagnose_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("ddd_diagnose_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("partitions", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->partitions.size()));
        std::vector<ddd_partition_info>::const_iterator _iter608;
        for (_iter608 = this->partitions.begin(); _iter608 != this->partitions.end(); ++_iter608) {
            xfer += (*_iter608).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(ddd_diagnose_response &a, ddd_diagnose_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.partitions, b.partitions);
    swap(a.__isset, b.__isset);
}

ddd_diagnose_response::ddd_diagnose_response(const ddd_diagnose_response &other609)
{
    err = other609.err;
    partitions = other609.partitions;
    __isset = other609.__isset;
}
ddd_diagnose_response::ddd_diagnose_response(ddd_diagnose_response &&other610)
{
    err = std::move(other610.err);
    partitions = std::move(other610.partitions);
    __isset = std::move(other610.__isset);
}
ddd_diagnose_response &ddd_diagnose_response::operator=(const ddd_diagnose_response &other611)
{
    err = other611.err;
    partitions = other611.partitions;
    __isset = other611.__isset;
    return *this;
}
ddd_diagnose_response &ddd_diagnose_response::operator=(ddd_diagnose_response &&other612)
{
    err = std::move(other612.err);
    partitions = std::move(other612.partitions);
    __isset = std::move(other612.__isset);
    return *this;
}
void ddd_diagnose_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "ddd_diagnose_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "partitions=" << to_string(partitions);
    out << ")";
}

app_partition_split_request::~app_partition_split_request() throw() {}

void app_partition_split_request::__set_app_name(const std::string &val) { this->app_name = val; }

void app_partition_split_request::__set_new_partition_count(const int32_t val)
{
    this->new_partition_count = val;
}

uint32_t app_partition_split_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->new_partition_count);
                this->__isset.new_partition_count = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t app_partition_split_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("app_partition_split_request");

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("new_partition_count", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->new_partition_count);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(app_partition_split_request &a, app_partition_split_request &b)
{
    using ::std::swap;
    swap(a.app_name, b.app_name);
    swap(a.new_partition_count, b.new_partition_count);
    swap(a.__isset, b.__isset);
}

app_partition_split_request::app_partition_split_request(
    const app_partition_split_request &other613)
{
    app_name = other613.app_name;
    new_partition_count = other613.new_partition_count;
    __isset = other613.__isset;
}
app_partition_split_request::app_partition_split_request(app_partition_split_request &&other614)
{
    app_name = std::move(other614.app_name);
    new_partition_count = std::move(other614.new_partition_count);
    __isset = std::move(other614.__isset);
}
app_partition_split_request &app_partition_split_request::
operator=(const app_partition_split_request &other615)
{
    app_name = other615.app_name;
    new_partition_count = other615.new_partition_count;
    __isset = other615.__isset;
    return *this;
}
app_partition_split_request &app_partition_split_request::
operator=(app_partition_split_request &&other616)
{
    app_name = std::move(other616.app_name);
    new_partition_count = std::move(other616.new_partition_count);
    __isset = std::move(other616.__isset);
    return *this;
}
void app_partition_split_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "app_partition_split_request(";
    out << "app_name=" << to_string(app_name);
    out << ", "
        << "new_partition_count=" << to_string(new_partition_count);
    out << ")";
}

app_partition_split_response::~app_partition_split_response() throw() {}

void app_partition_split_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void app_partition_split_response::__set_app_id(const int32_t val) { this->app_id = val; }

void app_partition_split_response::__set_partition_count(const int32_t val)
{
    this->partition_count = val;
}

uint32_t app_partition_split_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->app_id);
                this->__isset.app_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->partition_count);
                this->__isset.partition_count = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t app_partition_split_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("app_partition_split_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("app_id", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->app_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("partition_count", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->partition_count);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(app_partition_split_response &a, app_partition_split_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.app_id, b.app_id);
    swap(a.partition_count, b.partition_count);
    swap(a.__isset, b.__isset);
}

app_partition_split_response::app_partition_split_response(
    const app_partition_split_response &other617)
{
    err = other617.err;
    app_id = other617.app_id;
    partition_count = other617.partition_count;
    __isset = other617.__isset;
}
app_partition_split_response::app_partition_split_response(app_partition_split_response &&other618)
{
    err = std::move(other618.err);
    app_id = std::move(other618.app_id);
    partition_count = std::move(other618.partition_count);
    __isset = std::move(other618.__isset);
}
app_partition_split_response &app_partition_split_response::
operator=(const app_partition_split_response &other619)
{
    err = other619.err;
    app_id = other619.app_id;
    partition_count = other619.partition_count;
    __isset = other619.__isset;
    return *this;
}
app_partition_split_response &app_partition_split_response::
operator=(app_partition_split_response &&other620)
{
    err = std::move(other620.err);
    app_id = std::move(other620.app_id);
    partition_count = std::move(other620.partition_count);
    __isset = std::move(other620.__isset);
    return *this;
}
void app_partition_split_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "app_partition_split_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "app_id=" << to_string(app_id);
    out << ", "
        << "partition_count=" << to_string(partition_count);
    out << ")";
}

control_split_request::~control_split_request() throw() {}

void control_split_request::__set_app_name(const std::string &val) { this->app_name = val; }

void control_split_request::__set_partition_count_before_split(const int32_t val)
{
    this->partition_count_before_split = val;
}

void control_split_request::__set_control_type(const split_control_type::type val)
{
    this->control_type = val;
}

void control_split_request::__set_parent_pidx(const int32_t val) { this->parent_pidx = val; }

uint32_t control_split_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->partition_count_before_split);
                this->__isset.partition_count_before_split = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast621;
                xfer += iprot->readI32(ecast621);
                this->control_type = (split_control_type::type)ecast621;
                this->__isset.control_type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->parent_pidx);
                this->__isset.parent_pidx = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t control_split_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("control_split_request");

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "partition_count_before_split", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->partition_count_before_split);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("control_type", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->control_type);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("parent_pidx", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->parent_pidx);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(control_split_request &a, control_split_request &b)
{
    using ::std::swap;
    swap(a.app_name, b.app_name);
    swap(a.partition_count_before_split, b.partition_count_before_split);
    swap(a.control_type, b.control_type);
    swap(a.parent_pidx, b.parent_pidx);
    swap(a.__isset, b.__isset);
}

control_split_request::control_split_request(const control_split_request &other622)
{
    app_name = other622.app_name;
    partition_count_before_split = other622.partition_count_before_split;
    control_type = other622.control_type;
    parent_pidx = other622.parent_pidx;
    __isset = other622.__isset;
}
control_split_request::control_split_request(control_split_request &&other623)
{
    app_name = std::move(other623.app_name);
    partition_count_before_split = std::move(other623.partition_count_before_split);
    control_type = std::move(other623.control_type);
    parent_pidx = std::move(other623.parent_pidx);
    __isset = std::move(other623.__isset);
}
control_split_request &control_split_request::operator=(const control_split_request &other624)
{
    app_name = other624.app_name;
    partition_count_before_split = other624.partition_count_before_split;
    control_type = other624.control_type;
    parent_pidx = other624.parent_pidx;
    __isset = other624.__isset;
    return *this;
}
control_split_request &control_split_request::operator=(control_split_request &&other625)
{
    app_name = std::move(other625.app_name);
    partition_count_before_split = std::move(other625.partition_count_before_split);
    control_type = std::move(other625.control_type);
    parent_pidx = std::move(other625.parent_pidx);
    __isset = std::move(other625.__isset);
    return *this;
}
void control_split_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "control_split_request(";
    out << "app_name=" << to_string(app_name);
    out << ", "
        << "partition_count_before_split=" << to_string(partition_count_before_split);
    out << ", "
        << "control_type=" << to_string(control_type);
    out << ", "
        << "parent_pidx=" << to_string(parent_pidx);
    out << ")";
}

control_split_response::~control_split_response() throw() {}

void control_split_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void control_split_response::__set_hint_msg(const std::string &val) { this->hint_msg = val; }

uint32_t control_split_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->hint_msg);
                this->__isset.hint_msg = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t control_split_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("control_split_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("hint_msg", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->hint_msg);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(control_split_response &a, control_split_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.hint_msg, b.hint_msg);
    swap(a.__isset, b.__isset);
}

control_split_response::control_split_response(const control_split_response &other626)
{
    err = other626.err;
    hint_msg = other626.hint_msg;
    __isset = other626.__isset;
}
control_split_response::control_split_response(control_split_response &&other627)
{
    err = std::move(other627.err);
    hint_msg = std::move(other627.hint_msg);
    __isset = std::move(other627.__isset);
}
control_split_response &control_split_response::operator=(const control_split_response &other628)
{
    err = other628.err;
    hint_msg = other628.hint_msg;
    __isset = other628.__isset;
    return *this;
}
control_split_response &control_split_response::operator=(control_split_response &&other629)
{
    err = std::move(other629.err);
    hint_msg = std::move(other629.hint_msg);
    __isset = std::move(other629.__isset);
    return *this;
}
void control_split_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "control_split_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "hint_msg=" << to_string(hint_msg);
    out << ")";
}

stop_split_request::~stop_split_request() throw() {}

void stop_split_request::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void stop_split_request::__set_partition_count(const int32_t val) { this->partition_count = val; }

void stop_split_request::__set_type(const split_control_type::type val) { this->type = val; }

uint32_t stop_split_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->partition_count);
                this->__isset.partition_count = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast630;
                xfer += iprot->readI32(ecast630);
                this->type = (split_control_type::type)ecast630;
                this->__isset.type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t stop_split_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("stop_split_request");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("partition_count", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->partition_count);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(stop_split_request &a, stop_split_request &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.partition_count, b.partition_count);
    swap(a.type, b.type);
    swap(a.__isset, b.__isset);
}

stop_split_request::stop_split_request(const stop_split_request &other631)
{
    pid = other631.pid;
    partition_count = other631.partition_count;
    type = other631.type;
    __isset = other631.__isset;
}
stop_split_request::stop_split_request(stop_split_request &&other632)
{
    pid = std::move(other632.pid);
    partition_count = std::move(other632.partition_count);
    type = std::move(other632.type);
    __isset = std::move(other632.__isset);
}
stop_split_request &stop_split_request::operator=(const stop_split_request &other633)
{
    pid = other633.pid;
    partition_count = other633.partition_count;
    type = other633.type;
    __isset = other633.__isset;
    return *this;
}
stop_split_request &stop_split_request::operator=(stop_split_request &&other634)
{
    pid = std::move(other634.pid);
    partition_count = std::move(other634.partition_count);
    type = std::move(other634.type);
    __isset = std::move(other634.__isset);
    return *this;
}
void stop_split_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "stop_split_request(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "partition_count=" << to_string(partition_count);
    out << ", "
        << "type=" << to_string(type);
    out << ")";
}

stop_split_response::~stop_split_response() throw() {}

void stop_split_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

uint32_t stop_split_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t stop_split_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("stop_split_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(stop_split_response &a, stop_split_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.__isset, b.__isset);
}

stop_split_response::stop_split_response(const stop_split_response &other635)
{
    err = other635.err;
    __isset = other635.__isset;
}
stop_split_response::stop_split_response(stop_split_response &&other636)
{
    err = std::move(other636.err);
    __isset = std::move(other636.__isset);
}
stop_split_response &stop_split_response::operator=(const stop_split_response &other637)
{
    err = other637.err;
    __isset = other637.__isset;
    return *this;
}
stop_split_response &stop_split_response::operator=(stop_split_response &&other638)
{
    err = std::move(other638.err);
    __isset = std::move(other638.__isset);
    return *this;
}
void stop_split_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "stop_split_response(";
    out << "err=" << to_string(err);
    out << ")";
}

query_split_request::~query_split_request() throw() {}

void query_split_request::__set_app_name(const std::string &val) { this->app_name = val; }

uint32_t query_split_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t query_split_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("query_split_request");

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(query_split_request &a, query_split_request &b)
{
    using ::std::swap;
    swap(a.app_name, b.app_name);
    swap(a.__isset, b.__isset);
}

query_split_request::query_split_request(const query_split_request &other639)
{
    app_name = other639.app_name;
    __isset = other639.__isset;
}
query_split_request::query_split_request(query_split_request &&other640)
{
    app_name = std::move(other640.app_name);
    __isset = std::move(other640.__isset);
}
query_split_request &query_split_request::operator=(const query_split_request &other641)
{
    app_name = other641.app_name;
    __isset = other641.__isset;
    return *this;
}
query_split_request &query_split_request::operator=(query_split_request &&other642)
{
    app_name = std::move(other642.app_name);
    __isset = std::move(other642.__isset);
    return *this;
}
void query_split_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "query_split_request(";
    out << "app_name=" << to_string(app_name);
    out << ")";
}

query_split_response::~query_split_response() throw() {}

void query_split_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void query_split_response::__set_hint_msg(const std::string &val) { this->hint_msg = val; }

void query_split_response::__set_new_partition_count(const int32_t val)
{
    this->new_partition_count = val;
}

void query_split_response::__set_status(const std::map<int32_t, split_status::type> &val)
{
    this->status = val;
}

uint32_t query_split_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->hint_msg);
                this->__isset.hint_msg = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->new_partition_count);
                this->__isset.new_partition_count = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->status.clear();
                    uint32_t _size643;
                    ::apache::thrift::protocol::TType _ktype644;
                    ::apache::thrift::protocol::TType _vtype645;
                    xfer += iprot->readMapBegin(_ktype644, _vtype645, _size643);
                    uint32_t _i647;
                    for (_i647 = 0; _i647 < _size643; ++_i647) {
                        int32_t _key648;
                        xfer += iprot->readI32(_key648);
                        split_status::type &_val649 = this->status[_key648];
                        int32_t ecast650;
                        xfer += iprot->readI32(ecast650);
                        _val649 = (split_status::type)ecast650;
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.status = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t query_split_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("query_split_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("hint_msg", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->hint_msg);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("new_partition_count", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->new_partition_count);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_MAP, 4);
    {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32,
                                     ::apache::thrift::protocol::T_I32,
                                     static_cast<uint32_t>(this->status.size()));
        std::map<int32_t, split_status::type>::const_iterator _iter651;
        for (_iter651 = this->status.begin(); _iter651 != this->status.end(); ++_iter651) {
            xfer += oprot->writeI32(_iter651->first);
            xfer += oprot->writeI32((int32_t)_iter651->second);
        }
        xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(query_split_response &a, query_split_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.hint_msg, b.hint_msg);
    swap(a.new_partition_count, b.new_partition_count);
    swap(a.status, b.status);
    swap(a.__isset, b.__isset);
}

query_split_response::query_split_response(const query_split_response &other652)
{
    err = other652.err;
    hint_msg = other652.hint_msg;
    new_partition_count = other652.new_partition_count;
    status = other652.status;
    __isset = other652.__isset;
}
query_split_response::query_split_response(query_split_response &&other653)
{
    err = std::move(other653.err);
    hint_msg = std::move(other653.hint_msg);
    new_partition_count = std::move(other653.new_partition_count);
    status = std::move(other653.status);
    __isset = std::move(other653.__isset);
}
query_split_response &query_split_response::operator=(const query_split_response &other654)
{
    err = other654.err;
    hint_msg = other654.hint_msg;
    new_partition_count = other654.new_partition_count;
    status = other654.status;
    __isset = other654.__isset;
    return *this;
}
query_split_response &query_split_response::operator=(query_split_response &&other655)
{
    err = std::move(other655.err);
    hint_msg = std::move(other655.hint_msg);
    new_partition_count = std::move(other655.new_partition_count);
    status = std::move(other655.status);
    __isset = std::move(other655.__isset);
    return *this;
}
void query_split_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "query_split_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "hint_msg=" << to_string(hint_msg);
    out << ", "
        << "new_partition_count=" << to_string(new_partition_count);
    out << ", "
        << "status=" << to_string(status);
    out << ")";
}

notify_catch_up_request::~notify_catch_up_request() throw() {}

void notify_catch_up_request::__set_parent_gpid(const ::dsn::gpid &val) { this->parent_gpid = val; }

void notify_catch_up_request::__set_child_gpid(const ::dsn::gpid &val) { this->child_gpid = val; }

void notify_catch_up_request::__set_child_ballot(const int64_t val) { this->child_ballot = val; }

void notify_catch_up_request::__set_child_address(const ::dsn::rpc_address &val)
{
    this->child_address = val;
}

uint32_t notify_catch_up_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->parent_gpid.read(iprot);
                this->__isset.parent_gpid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->child_gpid.read(iprot);
                this->__isset.child_gpid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->child_ballot);
                this->__isset.child_ballot = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->child_address.read(iprot);
                this->__isset.child_address = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t notify_catch_up_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("notify_catch_up_request");

    xfer += oprot->writeFieldBegin("parent_gpid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->parent_gpid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("child_gpid", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->child_gpid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("child_ballot", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->child_ballot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("child_address", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->child_address.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(notify_catch_up_request &a, notify_catch_up_request &b)
{
    using ::std::swap;
    swap(a.parent_gpid, b.parent_gpid);
    swap(a.child_gpid, b.child_gpid);
    swap(a.child_ballot, b.child_ballot);
    swap(a.child_address, b.child_address);
    swap(a.__isset, b.__isset);
}

notify_catch_up_request::notify_catch_up_request(const notify_catch_up_request &other656)
{
    parent_gpid = other656.parent_gpid;
    child_gpid = other656.child_gpid;
    child_ballot = other656.child_ballot;
    child_address = other656.child_address;
    __isset = other656.__isset;
}
notify_catch_up_request::notify_catch_up_request(notify_catch_up_request &&other657)
{
    parent_gpid = std::move(other657.parent_gpid);
    child_gpid = std::move(other657.child_gpid);
    child_ballot = std::move(other657.child_ballot);
    child_address = std::move(other657.child_address);
    __isset = std::move(other657.__isset);
}
notify_catch_up_request &notify_catch_up_request::operator=(const notify_catch_up_request &other658)
{
    parent_gpid = other658.parent_gpid;
    child_gpid = other658.child_gpid;
    child_ballot = other658.child_ballot;
    child_address = other658.child_address;
    __isset = other658.__isset;
    return *this;
}
notify_catch_up_request &notify_catch_up_request::operator=(notify_catch_up_request &&other659)
{
    parent_gpid = std::move(other659.parent_gpid);
    child_gpid = std::move(other659.child_gpid);
    child_ballot = std::move(other659.child_ballot);
    child_address = std::move(other659.child_address);
    __isset = std::move(other659.__isset);
    return *this;
}
void notify_catch_up_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "notify_catch_up_request(";
    out << "parent_gpid=" << to_string(parent_gpid);
    out << ", "
        << "child_gpid=" << to_string(child_gpid);
    out << ", "
        << "child_ballot=" << to_string(child_ballot);
    out << ", "
        << "child_address=" << to_string(child_address);
    out << ")";
}

notify_cacth_up_response::~notify_cacth_up_response() throw() {}

void notify_cacth_up_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

uint32_t notify_cacth_up_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t notify_cacth_up_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("notify_cacth_up_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(notify_cacth_up_response &a, notify_cacth_up_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.__isset, b.__isset);
}

notify_cacth_up_response::notify_cacth_up_response(const notify_cacth_up_response &other660)
{
    err = other660.err;
    __isset = other660.__isset;
}
notify_cacth_up_response::notify_cacth_up_response(notify_cacth_up_response &&other661)
{
    err = std::move(other661.err);
    __isset = std::move(other661.__isset);
}
notify_cacth_up_response &notify_cacth_up_response::
operator=(const notify_cacth_up_response &other662)
{
    err = other662.err;
    __isset = other662.__isset;
    return *this;
}
notify_cacth_up_response &notify_cacth_up_response::operator=(notify_cacth_up_response &&other663)
{
    err = std::move(other663.err);
    __isset = std::move(other663.__isset);
    return *this;
}
void notify_cacth_up_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "notify_cacth_up_response(";
    out << "err=" << to_string(err);
    out << ")";
}

register_child_request::~register_child_request() throw() {}

void register_child_request::__set_app(const ::dsn::app_info &val) { this->app = val; }

void register_child_request::__set_parent_config(const ::dsn::partition_configuration &val)
{
    this->parent_config = val;
}

void register_child_request::__set_child_config(const ::dsn::partition_configuration &val)
{
    this->child_config = val;
}

void register_child_request::__set_primary_address(const ::dsn::rpc_address &val)
{
    this->primary_address = val;
}

uint32_t register_child_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->app.read(iprot);
                this->__isset.app = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->parent_config.read(iprot);
                this->__isset.parent_config = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->child_config.read(iprot);
                this->__isset.child_config = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->primary_address.read(iprot);
                this->__isset.primary_address = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t register_child_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("register_child_request");

    xfer += oprot->writeFieldBegin("app", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->app.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("parent_config", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->parent_config.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("child_config", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->child_config.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("primary_address", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->primary_address.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(register_child_request &a, register_child_request &b)
{
    using ::std::swap;
    swap(a.app, b.app);
    swap(a.parent_config, b.parent_config);
    swap(a.child_config, b.child_config);
    swap(a.primary_address, b.primary_address);
    swap(a.__isset, b.__isset);
}

register_child_request::register_child_request(const register_child_request &other664)
{
    app = other664.app;
    parent_config = other664.parent_config;
    child_config = other664.child_config;
    primary_address = other664.primary_address;
    __isset = other664.__isset;
}
register_child_request::register_child_request(register_child_request &&other665)
{
    app = std::move(other665.app);
    parent_config = std::move(other665.parent_config);
    child_config = std::move(other665.child_config);
    primary_address = std::move(other665.primary_address);
    __isset = std::move(other665.__isset);
}
register_child_request &register_child_request::operator=(const register_child_request &other666)
{
    app = other666.app;
    parent_config = other666.parent_config;
    child_config = other666.child_config;
    primary_address = other666.primary_address;
    __isset = other666.__isset;
    return *this;
}
register_child_request &register_child_request::operator=(register_child_request &&other667)
{
    app = std::move(other667.app);
    parent_config = std::move(other667.parent_config);
    child_config = std::move(other667.child_config);
    primary_address = std::move(other667.primary_address);
    __isset = std::move(other667.__isset);
    return *this;
}
void register_child_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "register_child_request(";
    out << "app=" << to_string(app);
    out << ", "
        << "parent_config=" << to_string(parent_config);
    out << ", "
        << "child_config=" << to_string(child_config);
    out << ", "
        << "primary_address=" << to_string(primary_address);
    out << ")";
}

register_child_response::~register_child_response() throw() {}

void register_child_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void register_child_response::__set_app(const ::dsn::app_info &val) { this->app = val; }

void register_child_response::__set_parent_config(const ::dsn::partition_configuration &val)
{
    this->parent_config = val;
}

void register_child_response::__set_child_config(const ::dsn::partition_configuration &val)
{
    this->child_config = val;
}

uint32_t register_child_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->app.read(iprot);
                this->__isset.app = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->parent_config.read(iprot);
                this->__isset.parent_config = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->child_config.read(iprot);
                this->__isset.child_config = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t register_child_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("register_child_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("app", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->app.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("parent_config", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->parent_config.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("child_config", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->child_config.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(register_child_response &a, register_child_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.app, b.app);
    swap(a.parent_config, b.parent_config);
    swap(a.child_config, b.child_config);
    swap(a.__isset, b.__isset);
}

register_child_response::register_child_response(const register_child_response &other668)
{
    err = other668.err;
    app = other668.app;
    parent_config = other668.parent_config;
    child_config = other668.child_config;
    __isset = other668.__isset;
}
register_child_response::register_child_response(register_child_response &&other669)
{
    err = std::move(other669.err);
    app = std::move(other669.app);
    parent_config = std::move(other669.parent_config);
    child_config = std::move(other669.child_config);
    __isset = std::move(other669.__isset);
}
register_child_response &register_child_response::operator=(const register_child_response &other670)
{
    err = other670.err;
    app = other670.app;
    parent_config = other670.parent_config;
    child_config = other670.child_config;
    __isset = other670.__isset;
    return *this;
}
register_child_response &register_child_response::operator=(register_child_response &&other671)
{
    err = std::move(other671.err);
    app = std::move(other671.app);
    parent_config = std::move(other671.parent_config);
    child_config = std::move(other671.child_config);
    __isset = std::move(other671.__isset);
    return *this;
}
void register_child_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "register_child_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "app=" << to_string(app);
    out << ", "
        << "parent_config=" << to_string(parent_config);
    out << ", "
        << "child_config=" << to_string(child_config);
    out << ")";
}

update_group_partition_count_request::~update_group_partition_count_request() throw() {}

void update_group_partition_count_request::__set_target_address(const ::dsn::rpc_address &val)
{
    this->target_address = val;
}

void update_group_partition_count_request::__set_new_partition_count(const int32_t val)
{
    this->new_partition_count = val;
}

void update_group_partition_count_request::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void update_group_partition_count_request::__set_ballot(const int64_t val) { this->ballot = val; }

void update_group_partition_count_request::__set_update_child_group(const bool val)
{
    this->update_child_group = val;
}

uint32_t update_group_partition_count_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->target_address.read(iprot);
                this->__isset.target_address = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->new_partition_count);
                this->__isset.new_partition_count = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->ballot);
                this->__isset.ballot = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->update_child_group);
                this->__isset.update_child_group = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
update_group_partition_count_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("update_group_partition_count_request");

    xfer += oprot->writeFieldBegin("target_address", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->target_address.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("new_partition_count", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->new_partition_count);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->ballot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("update_child_group", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->update_child_group);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(update_group_partition_count_request &a, update_group_partition_count_request &b)
{
    using ::std::swap;
    swap(a.target_address, b.target_address);
    swap(a.new_partition_count, b.new_partition_count);
    swap(a.pid, b.pid);
    swap(a.ballot, b.ballot);
    swap(a.update_child_group, b.update_child_group);
    swap(a.__isset, b.__isset);
}

update_group_partition_count_request::update_group_partition_count_request(
    const update_group_partition_count_request &other672)
{
    target_address = other672.target_address;
    new_partition_count = other672.new_partition_count;
    pid = other672.pid;
    ballot = other672.ballot;
    update_child_group = other672.update_child_group;
    __isset = other672.__isset;
}
update_group_partition_count_request::update_group_partition_count_request(
    update_group_partition_count_request &&other673)
{
    target_address = std::move(other673.target_address);
    new_partition_count = std::move(other673.new_partition_count);
    pid = std::move(other673.pid);
    ballot = std::move(other673.ballot);
    update_child_group = std::move(other673.update_child_group);
    __isset = std::move(other673.__isset);
}
update_group_partition_count_request &update_group_partition_count_request::
operator=(const update_group_partition_count_request &other674)
{
    target_address = other674.target_address;
    new_partition_count = other674.new_partition_count;
    pid = other674.pid;
    ballot = other674.ballot;
    update_child_group = other674.update_child_group;
    __isset = other674.__isset;
    return *this;
}
update_group_partition_count_request &update_group_partition_count_request::
operator=(update_group_partition_count_request &&other675)
{
    target_address = std::move(other675.target_address);
    new_partition_count = std::move(other675.new_partition_count);
    pid = std::move(other675.pid);
    ballot = std::move(other675.ballot);
    update_child_group = std::move(other675.update_child_group);
    __isset = std::move(other675.__isset);
    return *this;
}
void update_group_partition_count_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "update_group_partition_count_request(";
    out << "target_address=" << to_string(target_address);
    out << ", "
        << "new_partition_count=" << to_string(new_partition_count);
    out << ", "
        << "pid=" << to_string(pid);
    out << ", "
        << "ballot=" << to_string(ballot);
    out << ", "
        << "update_child_group=" << to_string(update_child_group);
    out << ")";
}

update_group_partition_count_response::~update_group_partition_count_response() throw() {}

void update_group_partition_count_response::__set_err(const ::dsn::error_code &val)
{
    this->err = val;
}

uint32_t update_group_partition_count_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
update_group_partition_count_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("update_group_partition_count_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(update_group_partition_count_response &a, update_group_partition_count_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.__isset, b.__isset);
}

update_group_partition_count_response::update_group_partition_count_response(
    const update_group_partition_count_response &other676)
{
    err = other676.err;
    __isset = other676.__isset;
}
update_group_partition_count_response::update_group_partition_count_response(
    update_group_partition_count_response &&other677)
{
    err = std::move(other677.err);
    __isset = std::move(other677.__isset);
}
update_group_partition_count_response &update_group_partition_count_response::
operator=(const update_group_partition_count_response &other678)
{
    err = other678.err;
    __isset = other678.__isset;
    return *this;
}
update_group_partition_count_response &update_group_partition_count_response::
operator=(update_group_partition_count_response &&other679)
{
    err = std::move(other679.err);
    __isset = std::move(other679.__isset);
    return *this;
}
void update_group_partition_count_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "update_group_partition_count_response(";
    out << "err=" << to_string(err);
    out << ")";
}

query_child_state_request::~query_child_state_request() throw() {}

void query_child_state_request::__set_parent_gpid(const ::dsn::gpid &val)
{
    this->parent_gpid = val;
}

uint32_t query_child_state_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->parent_gpid.read(iprot);
                this->__isset.parent_gpid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t query_child_state_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("query_child_state_request");

    xfer += oprot->writeFieldBegin("parent_gpid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->parent_gpid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(query_child_state_request &a, query_child_state_request &b)
{
    using ::std::swap;
    swap(a.parent_gpid, b.parent_gpid);
    swap(a.__isset, b.__isset);
}

query_child_state_request::query_child_state_request(const query_child_state_request &other680)
{
    parent_gpid = other680.parent_gpid;
    __isset = other680.__isset;
}
query_child_state_request::query_child_state_request(query_child_state_request &&other681)
{
    parent_gpid = std::move(other681.parent_gpid);
    __isset = std::move(other681.__isset);
}
query_child_state_request &query_child_state_request::
operator=(const query_child_state_request &other682)
{
    parent_gpid = other682.parent_gpid;
    __isset = other682.__isset;
    return *this;
}
query_child_state_request &query_child_state_request::
operator=(query_child_state_request &&other683)
{
    parent_gpid = std::move(other683.parent_gpid);
    __isset = std::move(other683.__isset);
    return *this;
}
void query_child_state_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "query_child_state_request(";
    out << "parent_gpid=" << to_string(parent_gpid);
    out << ")";
}

query_child_state_response::~query_child_state_response() throw() {}

void query_child_state_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void query_child_state_response::__set_partition_count(const int32_t val)
{
    this->partition_count = val;
}

void query_child_state_response::__set_ballot(const int64_t val) { this->ballot = val; }

uint32_t query_child_state_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->partition_count);
                this->__isset.partition_count = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->ballot);
                this->__isset.ballot = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t query_child_state_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("query_child_state_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("partition_count", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->partition_count);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->ballot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(query_child_state_response &a, query_child_state_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.partition_count, b.partition_count);
    swap(a.ballot, b.ballot);
    swap(a.__isset, b.__isset);
}

query_child_state_response::query_child_state_response(const query_child_state_response &other684)
{
    err = other684.err;
    partition_count = other684.partition_count;
    ballot = other684.ballot;
    __isset = other684.__isset;
}
query_child_state_response::query_child_state_response(query_child_state_response &&other685)
{
    err = std::move(other685.err);
    partition_count = std::move(other685.partition_count);
    ballot = std::move(other685.ballot);
    __isset = std::move(other685.__isset);
}
query_child_state_response &query_child_state_response::
operator=(const query_child_state_response &other686)
{
    err = other686.err;
    partition_count = other686.partition_count;
    ballot = other686.ballot;
    __isset = other686.__isset;
    return *this;
}
query_child_state_response &query_child_state_response::
operator=(query_child_state_response &&other687)
{
    err = std::move(other687.err);
    partition_count = std::move(other687.partition_count);
    ballot = std::move(other687.ballot);
    __isset = std::move(other687.__isset);
    return *this;
}
void query_child_state_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "query_child_state_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "partition_count=" << to_string(partition_count);
    out << ", "
        << "ballot=" << to_string(ballot);
    out << ")";
}
}
} // namespace
