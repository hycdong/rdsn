/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include <dsn/dist/replication/replication_types.h>

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace dsn {
namespace replication {

int _kpartition_statusValues[] = {partition_status::PS_INVALID,
                                  partition_status::PS_INACTIVE,
                                  partition_status::PS_ERROR,
                                  partition_status::PS_PRIMARY,
                                  partition_status::PS_SECONDARY,
                                  partition_status::PS_POTENTIAL_SECONDARY,
                                  partition_status::PS_PARTITION_SPLIT};
const char *_kpartition_statusNames[] = {"PS_INVALID",
                                         "PS_INACTIVE",
                                         "PS_ERROR",
                                         "PS_PRIMARY",
                                         "PS_SECONDARY",
                                         "PS_POTENTIAL_SECONDARY",
                                         "PS_PARTITION_SPLIT"};
const std::map<int, const char *> _partition_status_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(7, _kpartition_statusValues, _kpartition_statusNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kread_semanticValues[] = {read_semantic::ReadInvalid,
                               read_semantic::ReadLastUpdate,
                               read_semantic::ReadOutdated,
                               read_semantic::ReadSnapshot};
const char *_kread_semanticNames[] = {
    "ReadInvalid", "ReadLastUpdate", "ReadOutdated", "ReadSnapshot"};
const std::map<int, const char *> _read_semantic_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(4, _kread_semanticValues, _kread_semanticNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _klearn_typeValues[] = {
    learn_type::LT_INVALID, learn_type::LT_CACHE, learn_type::LT_APP, learn_type::LT_LOG};
const char *_klearn_typeNames[] = {"LT_INVALID", "LT_CACHE", "LT_APP", "LT_LOG"};
const std::map<int, const char *> _learn_type_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(4, _klearn_typeValues, _klearn_typeNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _klearner_statusValues[] = {learner_status::LearningInvalid,
                                learner_status::LearningWithoutPrepare,
                                learner_status::LearningWithPrepareTransient,
                                learner_status::LearningWithPrepare,
                                learner_status::LearningSucceeded,
                                learner_status::LearningFailed};
const char *_klearner_statusNames[] = {"LearningInvalid",
                                       "LearningWithoutPrepare",
                                       "LearningWithPrepareTransient",
                                       "LearningWithPrepare",
                                       "LearningSucceeded",
                                       "LearningFailed"};
const std::map<int, const char *> _learner_status_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(6, _klearner_statusValues, _klearner_statusNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _ksplit_statusValues[] = {split_status::NOT_SPLIT,
                              split_status::SPLITTING,
                              split_status::PAUSED,
                              split_status::CANCELING};
const char *_ksplit_statusNames[] = {"NOT_SPLIT", "SPLITTING", "PAUSED", "CANCELING"};
const std::map<int, const char *> _split_status_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(4, _ksplit_statusValues, _ksplit_statusNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kconfig_typeValues[] = {config_type::CT_INVALID,
                             config_type::CT_ASSIGN_PRIMARY,
                             config_type::CT_UPGRADE_TO_PRIMARY,
                             config_type::CT_ADD_SECONDARY,
                             config_type::CT_UPGRADE_TO_SECONDARY,
                             config_type::CT_DOWNGRADE_TO_SECONDARY,
                             config_type::CT_DOWNGRADE_TO_INACTIVE,
                             config_type::CT_REMOVE,
                             config_type::CT_ADD_SECONDARY_FOR_LB,
                             config_type::CT_PRIMARY_FORCE_UPDATE_BALLOT,
                             config_type::CT_DROP_PARTITION,
                             config_type::CT_REGISTER_CHILD};
const char *_kconfig_typeNames[] = {"CT_INVALID",
                                    "CT_ASSIGN_PRIMARY",
                                    "CT_UPGRADE_TO_PRIMARY",
                                    "CT_ADD_SECONDARY",
                                    "CT_UPGRADE_TO_SECONDARY",
                                    "CT_DOWNGRADE_TO_SECONDARY",
                                    "CT_DOWNGRADE_TO_INACTIVE",
                                    "CT_REMOVE",
                                    "CT_ADD_SECONDARY_FOR_LB",
                                    "CT_PRIMARY_FORCE_UPDATE_BALLOT",
                                    "CT_DROP_PARTITION",
                                    "CT_REGISTER_CHILD"};
const std::map<int, const char *> _config_type_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(12, _kconfig_typeValues, _kconfig_typeNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _knode_statusValues[] = {
    node_status::NS_INVALID, node_status::NS_ALIVE, node_status::NS_UNALIVE};
const char *_knode_statusNames[] = {"NS_INVALID", "NS_ALIVE", "NS_UNALIVE"};
const std::map<int, const char *> _node_status_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(3, _knode_statusValues, _knode_statusNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kmeta_function_levelValues[] = {meta_function_level::fl_stopped,
                                     meta_function_level::fl_blind,
                                     meta_function_level::fl_freezed,
                                     meta_function_level::fl_steady,
                                     meta_function_level::fl_lively,
                                     meta_function_level::fl_invalid};
const char *_kmeta_function_levelNames[] = {
    "fl_stopped", "fl_blind", "fl_freezed", "fl_steady", "fl_lively", "fl_invalid"};
const std::map<int, const char *> _meta_function_level_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(6, _kmeta_function_levelValues, _kmeta_function_levelNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kbalancer_request_typeValues[] = {balancer_request_type::move_primary,
                                       balancer_request_type::copy_primary,
                                       balancer_request_type::copy_secondary};
const char *_kbalancer_request_typeNames[] = {"move_primary", "copy_primary", "copy_secondary"};
const std::map<int, const char *> _balancer_request_type_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(3, _kbalancer_request_typeValues, _kbalancer_request_typeNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kapp_env_operationValues[] = {app_env_operation::APP_ENV_OP_INVALID,
                                   app_env_operation::APP_ENV_OP_SET,
                                   app_env_operation::APP_ENV_OP_DEL,
                                   app_env_operation::APP_ENV_OP_CLEAR};
const char *_kapp_env_operationNames[] = {
    "APP_ENV_OP_INVALID", "APP_ENV_OP_SET", "APP_ENV_OP_DEL", "APP_ENV_OP_CLEAR"};
const std::map<int, const char *> _app_env_operation_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(4, _kapp_env_operationValues, _kapp_env_operationNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kduplication_statusValues[] = {duplication_status::DS_INIT,
                                    duplication_status::DS_START,
                                    duplication_status::DS_PAUSE,
                                    duplication_status::DS_REMOVED};
const char *_kduplication_statusNames[] = {"DS_INIT", "DS_START", "DS_PAUSE", "DS_REMOVED"};
const std::map<int, const char *> _duplication_status_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(4, _kduplication_statusValues, _kduplication_statusNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kduplication_fail_modeValues[] = {duplication_fail_mode::FAIL_SLOW,
                                       duplication_fail_mode::FAIL_SKIP,
                                       duplication_fail_mode::FAIL_FAST};
const char *_kduplication_fail_modeNames[] = {"FAIL_SLOW", "FAIL_SKIP", "FAIL_FAST"};
const std::map<int, const char *> _duplication_fail_mode_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(3, _kduplication_fail_modeValues, _kduplication_fail_modeNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _ksplit_control_typeValues[] = {
    split_control_type::PSC_PAUSE, split_control_type::PSC_RESTART, split_control_type::PSC_CANCEL};
const char *_ksplit_control_typeNames[] = {"PSC_PAUSE", "PSC_RESTART", "PSC_CANCEL"};
const std::map<int, const char *> _split_control_type_VALUES_TO_NAMES(
    ::apache::thrift::TEnumIterator(3, _ksplit_control_typeValues, _ksplit_control_typeNames),
    ::apache::thrift::TEnumIterator(-1, NULL, NULL));

mutation_header::~mutation_header() throw() {}

void mutation_header::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void mutation_header::__set_ballot(const int64_t val) { this->ballot = val; }

void mutation_header::__set_decree(const int64_t val) { this->decree = val; }

void mutation_header::__set_log_offset(const int64_t val) { this->log_offset = val; }

void mutation_header::__set_last_committed_decree(const int64_t val)
{
    this->last_committed_decree = val;
}

void mutation_header::__set_timestamp(const int64_t val) { this->timestamp = val; }

uint32_t mutation_header::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->ballot);
                this->__isset.ballot = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->decree);
                this->__isset.decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->log_offset);
                this->__isset.log_offset = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_committed_decree);
                this->__isset.last_committed_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->timestamp);
                this->__isset.timestamp = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t mutation_header::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("mutation_header");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->ballot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("decree", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("log_offset", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->log_offset);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("last_committed_decree", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->last_committed_decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->timestamp);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(mutation_header &a, mutation_header &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.ballot, b.ballot);
    swap(a.decree, b.decree);
    swap(a.log_offset, b.log_offset);
    swap(a.last_committed_decree, b.last_committed_decree);
    swap(a.timestamp, b.timestamp);
    swap(a.__isset, b.__isset);
}

mutation_header::mutation_header(const mutation_header &other0)
{
    pid = other0.pid;
    ballot = other0.ballot;
    decree = other0.decree;
    log_offset = other0.log_offset;
    last_committed_decree = other0.last_committed_decree;
    timestamp = other0.timestamp;
    __isset = other0.__isset;
}
mutation_header::mutation_header(mutation_header &&other1)
{
    pid = std::move(other1.pid);
    ballot = std::move(other1.ballot);
    decree = std::move(other1.decree);
    log_offset = std::move(other1.log_offset);
    last_committed_decree = std::move(other1.last_committed_decree);
    timestamp = std::move(other1.timestamp);
    __isset = std::move(other1.__isset);
}
mutation_header &mutation_header::operator=(const mutation_header &other2)
{
    pid = other2.pid;
    ballot = other2.ballot;
    decree = other2.decree;
    log_offset = other2.log_offset;
    last_committed_decree = other2.last_committed_decree;
    timestamp = other2.timestamp;
    __isset = other2.__isset;
    return *this;
}
mutation_header &mutation_header::operator=(mutation_header &&other3)
{
    pid = std::move(other3.pid);
    ballot = std::move(other3.ballot);
    decree = std::move(other3.decree);
    log_offset = std::move(other3.log_offset);
    last_committed_decree = std::move(other3.last_committed_decree);
    timestamp = std::move(other3.timestamp);
    __isset = std::move(other3.__isset);
    return *this;
}
void mutation_header::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "mutation_header(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "ballot=" << to_string(ballot);
    out << ", "
        << "decree=" << to_string(decree);
    out << ", "
        << "log_offset=" << to_string(log_offset);
    out << ", "
        << "last_committed_decree=" << to_string(last_committed_decree);
    out << ", "
        << "timestamp=" << to_string(timestamp);
    out << ")";
}

mutation_update::~mutation_update() throw() {}

void mutation_update::__set_code(const ::dsn::task_code &val) { this->code = val; }

void mutation_update::__set_serialization_type(const int32_t val)
{
    this->serialization_type = val;
}

void mutation_update::__set_data(const ::dsn::blob &val) { this->data = val; }

void mutation_update::__set_start_time_ns(const int64_t val)
{
    this->start_time_ns = val;
    __isset.start_time_ns = true;
}

uint32_t mutation_update::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->code.read(iprot);
                this->__isset.code = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->serialization_type);
                this->__isset.serialization_type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->data.read(iprot);
                this->__isset.data = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->start_time_ns);
                this->__isset.start_time_ns = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t mutation_update::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("mutation_update");

    xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->code.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("serialization_type", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->serialization_type);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->data.write(oprot);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.start_time_ns) {
        xfer += oprot->writeFieldBegin("start_time_ns", ::apache::thrift::protocol::T_I64, 4);
        xfer += oprot->writeI64(this->start_time_ns);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(mutation_update &a, mutation_update &b)
{
    using ::std::swap;
    swap(a.code, b.code);
    swap(a.serialization_type, b.serialization_type);
    swap(a.data, b.data);
    swap(a.start_time_ns, b.start_time_ns);
    swap(a.__isset, b.__isset);
}

mutation_update::mutation_update(const mutation_update &other4)
{
    code = other4.code;
    serialization_type = other4.serialization_type;
    data = other4.data;
    start_time_ns = other4.start_time_ns;
    __isset = other4.__isset;
}
mutation_update::mutation_update(mutation_update &&other5)
{
    code = std::move(other5.code);
    serialization_type = std::move(other5.serialization_type);
    data = std::move(other5.data);
    start_time_ns = std::move(other5.start_time_ns);
    __isset = std::move(other5.__isset);
}
mutation_update &mutation_update::operator=(const mutation_update &other6)
{
    code = other6.code;
    serialization_type = other6.serialization_type;
    data = other6.data;
    start_time_ns = other6.start_time_ns;
    __isset = other6.__isset;
    return *this;
}
mutation_update &mutation_update::operator=(mutation_update &&other7)
{
    code = std::move(other7.code);
    serialization_type = std::move(other7.serialization_type);
    data = std::move(other7.data);
    start_time_ns = std::move(other7.start_time_ns);
    __isset = std::move(other7.__isset);
    return *this;
}
void mutation_update::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "mutation_update(";
    out << "code=" << to_string(code);
    out << ", "
        << "serialization_type=" << to_string(serialization_type);
    out << ", "
        << "data=" << to_string(data);
    out << ", "
        << "start_time_ns=";
    (__isset.start_time_ns ? (out << to_string(start_time_ns)) : (out << "<null>"));
    out << ")";
}

mutation_data::~mutation_data() throw() {}

void mutation_data::__set_header(const mutation_header &val) { this->header = val; }

void mutation_data::__set_updates(const std::vector<mutation_update> &val) { this->updates = val; }

uint32_t mutation_data::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->header.read(iprot);
                this->__isset.header = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->updates.clear();
                    uint32_t _size8;
                    ::apache::thrift::protocol::TType _etype11;
                    xfer += iprot->readListBegin(_etype11, _size8);
                    this->updates.resize(_size8);
                    uint32_t _i12;
                    for (_i12 = 0; _i12 < _size8; ++_i12) {
                        xfer += this->updates[_i12].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.updates = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t mutation_data::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("mutation_data");

    xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->header.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("updates", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->updates.size()));
        std::vector<mutation_update>::const_iterator _iter13;
        for (_iter13 = this->updates.begin(); _iter13 != this->updates.end(); ++_iter13) {
            xfer += (*_iter13).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(mutation_data &a, mutation_data &b)
{
    using ::std::swap;
    swap(a.header, b.header);
    swap(a.updates, b.updates);
    swap(a.__isset, b.__isset);
}

mutation_data::mutation_data(const mutation_data &other14)
{
    header = other14.header;
    updates = other14.updates;
    __isset = other14.__isset;
}
mutation_data::mutation_data(mutation_data &&other15)
{
    header = std::move(other15.header);
    updates = std::move(other15.updates);
    __isset = std::move(other15.__isset);
}
mutation_data &mutation_data::operator=(const mutation_data &other16)
{
    header = other16.header;
    updates = other16.updates;
    __isset = other16.__isset;
    return *this;
}
mutation_data &mutation_data::operator=(mutation_data &&other17)
{
    header = std::move(other17.header);
    updates = std::move(other17.updates);
    __isset = std::move(other17.__isset);
    return *this;
}
void mutation_data::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "mutation_data(";
    out << "header=" << to_string(header);
    out << ", "
        << "updates=" << to_string(updates);
    out << ")";
}

replica_configuration::~replica_configuration() throw() {}

void replica_configuration::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void replica_configuration::__set_ballot(const int64_t val) { this->ballot = val; }

void replica_configuration::__set_primary(const ::dsn::rpc_address &val) { this->primary = val; }

void replica_configuration::__set_status(const partition_status::type val) { this->status = val; }

void replica_configuration::__set_learner_signature(const int64_t val)
{
    this->learner_signature = val;
}

void replica_configuration::__set_split_sync_to_child(const bool val)
{
    this->split_sync_to_child = val;
    __isset.split_sync_to_child = true;
}

uint32_t replica_configuration::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->ballot);
                this->__isset.ballot = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->primary.read(iprot);
                this->__isset.primary = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast18;
                xfer += iprot->readI32(ecast18);
                this->status = (partition_status::type)ecast18;
                this->__isset.status = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->learner_signature);
                this->__isset.learner_signature = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->split_sync_to_child);
                this->__isset.split_sync_to_child = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t replica_configuration::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("replica_configuration");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->ballot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("primary", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->primary.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("learner_signature", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->learner_signature);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.split_sync_to_child) {
        xfer +=
            oprot->writeFieldBegin("split_sync_to_child", ::apache::thrift::protocol::T_BOOL, 6);
        xfer += oprot->writeBool(this->split_sync_to_child);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(replica_configuration &a, replica_configuration &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.ballot, b.ballot);
    swap(a.primary, b.primary);
    swap(a.status, b.status);
    swap(a.learner_signature, b.learner_signature);
    swap(a.split_sync_to_child, b.split_sync_to_child);
    swap(a.__isset, b.__isset);
}

replica_configuration::replica_configuration(const replica_configuration &other19)
{
    pid = other19.pid;
    ballot = other19.ballot;
    primary = other19.primary;
    status = other19.status;
    learner_signature = other19.learner_signature;
    split_sync_to_child = other19.split_sync_to_child;
    __isset = other19.__isset;
}
replica_configuration::replica_configuration(replica_configuration &&other20)
{
    pid = std::move(other20.pid);
    ballot = std::move(other20.ballot);
    primary = std::move(other20.primary);
    status = std::move(other20.status);
    learner_signature = std::move(other20.learner_signature);
    split_sync_to_child = std::move(other20.split_sync_to_child);
    __isset = std::move(other20.__isset);
}
replica_configuration &replica_configuration::operator=(const replica_configuration &other21)
{
    pid = other21.pid;
    ballot = other21.ballot;
    primary = other21.primary;
    status = other21.status;
    learner_signature = other21.learner_signature;
    split_sync_to_child = other21.split_sync_to_child;
    __isset = other21.__isset;
    return *this;
}
replica_configuration &replica_configuration::operator=(replica_configuration &&other22)
{
    pid = std::move(other22.pid);
    ballot = std::move(other22.ballot);
    primary = std::move(other22.primary);
    status = std::move(other22.status);
    learner_signature = std::move(other22.learner_signature);
    split_sync_to_child = std::move(other22.split_sync_to_child);
    __isset = std::move(other22.__isset);
    return *this;
}
void replica_configuration::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "replica_configuration(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "ballot=" << to_string(ballot);
    out << ", "
        << "primary=" << to_string(primary);
    out << ", "
        << "status=" << to_string(status);
    out << ", "
        << "learner_signature=" << to_string(learner_signature);
    out << ", "
        << "split_sync_to_child=";
    (__isset.split_sync_to_child ? (out << to_string(split_sync_to_child)) : (out << "<null>"));
    out << ")";
}

prepare_msg::~prepare_msg() throw() {}

void prepare_msg::__set_config(const replica_configuration &val) { this->config = val; }

void prepare_msg::__set_mu(const mutation_data &val) { this->mu = val; }

uint32_t prepare_msg::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->config.read(iprot);
                this->__isset.config = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->mu.read(iprot);
                this->__isset.mu = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t prepare_msg::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("prepare_msg");

    xfer += oprot->writeFieldBegin("config", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->config.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("mu", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->mu.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(prepare_msg &a, prepare_msg &b)
{
    using ::std::swap;
    swap(a.config, b.config);
    swap(a.mu, b.mu);
    swap(a.__isset, b.__isset);
}

prepare_msg::prepare_msg(const prepare_msg &other23)
{
    config = other23.config;
    mu = other23.mu;
    __isset = other23.__isset;
}
prepare_msg::prepare_msg(prepare_msg &&other24)
{
    config = std::move(other24.config);
    mu = std::move(other24.mu);
    __isset = std::move(other24.__isset);
}
prepare_msg &prepare_msg::operator=(const prepare_msg &other25)
{
    config = other25.config;
    mu = other25.mu;
    __isset = other25.__isset;
    return *this;
}
prepare_msg &prepare_msg::operator=(prepare_msg &&other26)
{
    config = std::move(other26.config);
    mu = std::move(other26.mu);
    __isset = std::move(other26.__isset);
    return *this;
}
void prepare_msg::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "prepare_msg(";
    out << "config=" << to_string(config);
    out << ", "
        << "mu=" << to_string(mu);
    out << ")";
}

read_request_header::~read_request_header() throw() {}

void read_request_header::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void read_request_header::__set_code(const ::dsn::task_code &val) { this->code = val; }

void read_request_header::__set_semantic(const read_semantic::type val) { this->semantic = val; }

void read_request_header::__set_version_decree(const int64_t val) { this->version_decree = val; }

uint32_t read_request_header::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->code.read(iprot);
                this->__isset.code = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast27;
                xfer += iprot->readI32(ecast27);
                this->semantic = (read_semantic::type)ecast27;
                this->__isset.semantic = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->version_decree);
                this->__isset.version_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t read_request_header::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("read_request_header");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->code.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("semantic", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->semantic);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("version_decree", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->version_decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(read_request_header &a, read_request_header &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.code, b.code);
    swap(a.semantic, b.semantic);
    swap(a.version_decree, b.version_decree);
    swap(a.__isset, b.__isset);
}

read_request_header::read_request_header(const read_request_header &other28)
{
    pid = other28.pid;
    code = other28.code;
    semantic = other28.semantic;
    version_decree = other28.version_decree;
    __isset = other28.__isset;
}
read_request_header::read_request_header(read_request_header &&other29)
{
    pid = std::move(other29.pid);
    code = std::move(other29.code);
    semantic = std::move(other29.semantic);
    version_decree = std::move(other29.version_decree);
    __isset = std::move(other29.__isset);
}
read_request_header &read_request_header::operator=(const read_request_header &other30)
{
    pid = other30.pid;
    code = other30.code;
    semantic = other30.semantic;
    version_decree = other30.version_decree;
    __isset = other30.__isset;
    return *this;
}
read_request_header &read_request_header::operator=(read_request_header &&other31)
{
    pid = std::move(other31.pid);
    code = std::move(other31.code);
    semantic = std::move(other31.semantic);
    version_decree = std::move(other31.version_decree);
    __isset = std::move(other31.__isset);
    return *this;
}
void read_request_header::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "read_request_header(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "code=" << to_string(code);
    out << ", "
        << "semantic=" << to_string(semantic);
    out << ", "
        << "version_decree=" << to_string(version_decree);
    out << ")";
}

write_request_header::~write_request_header() throw() {}

void write_request_header::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void write_request_header::__set_code(const ::dsn::task_code &val) { this->code = val; }

uint32_t write_request_header::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->code.read(iprot);
                this->__isset.code = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t write_request_header::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("write_request_header");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->code.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(write_request_header &a, write_request_header &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.code, b.code);
    swap(a.__isset, b.__isset);
}

write_request_header::write_request_header(const write_request_header &other32)
{
    pid = other32.pid;
    code = other32.code;
    __isset = other32.__isset;
}
write_request_header::write_request_header(write_request_header &&other33)
{
    pid = std::move(other33.pid);
    code = std::move(other33.code);
    __isset = std::move(other33.__isset);
}
write_request_header &write_request_header::operator=(const write_request_header &other34)
{
    pid = other34.pid;
    code = other34.code;
    __isset = other34.__isset;
    return *this;
}
write_request_header &write_request_header::operator=(write_request_header &&other35)
{
    pid = std::move(other35.pid);
    code = std::move(other35.code);
    __isset = std::move(other35.__isset);
    return *this;
}
void write_request_header::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "write_request_header(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "code=" << to_string(code);
    out << ")";
}

rw_response_header::~rw_response_header() throw() {}

void rw_response_header::__set_err(const ::dsn::error_code &val) { this->err = val; }

uint32_t rw_response_header::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t rw_response_header::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("rw_response_header");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(rw_response_header &a, rw_response_header &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.__isset, b.__isset);
}

rw_response_header::rw_response_header(const rw_response_header &other36)
{
    err = other36.err;
    __isset = other36.__isset;
}
rw_response_header::rw_response_header(rw_response_header &&other37)
{
    err = std::move(other37.err);
    __isset = std::move(other37.__isset);
}
rw_response_header &rw_response_header::operator=(const rw_response_header &other38)
{
    err = other38.err;
    __isset = other38.__isset;
    return *this;
}
rw_response_header &rw_response_header::operator=(rw_response_header &&other39)
{
    err = std::move(other39.err);
    __isset = std::move(other39.__isset);
    return *this;
}
void rw_response_header::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "rw_response_header(";
    out << "err=" << to_string(err);
    out << ")";
}

prepare_ack::~prepare_ack() throw() {}

void prepare_ack::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void prepare_ack::__set_err(const ::dsn::error_code &val) { this->err = val; }

void prepare_ack::__set_ballot(const int64_t val) { this->ballot = val; }

void prepare_ack::__set_decree(const int64_t val) { this->decree = val; }

void prepare_ack::__set_last_committed_decree_in_app(const int64_t val)
{
    this->last_committed_decree_in_app = val;
}

void prepare_ack::__set_last_committed_decree_in_prepare_list(const int64_t val)
{
    this->last_committed_decree_in_prepare_list = val;
}

uint32_t prepare_ack::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->ballot);
                this->__isset.ballot = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->decree);
                this->__isset.decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_committed_decree_in_app);
                this->__isset.last_committed_decree_in_app = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_committed_decree_in_prepare_list);
                this->__isset.last_committed_decree_in_prepare_list = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t prepare_ack::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("prepare_ack");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->ballot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("decree", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "last_committed_decree_in_app", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->last_committed_decree_in_app);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "last_committed_decree_in_prepare_list", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->last_committed_decree_in_prepare_list);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(prepare_ack &a, prepare_ack &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.err, b.err);
    swap(a.ballot, b.ballot);
    swap(a.decree, b.decree);
    swap(a.last_committed_decree_in_app, b.last_committed_decree_in_app);
    swap(a.last_committed_decree_in_prepare_list, b.last_committed_decree_in_prepare_list);
    swap(a.__isset, b.__isset);
}

prepare_ack::prepare_ack(const prepare_ack &other40)
{
    pid = other40.pid;
    err = other40.err;
    ballot = other40.ballot;
    decree = other40.decree;
    last_committed_decree_in_app = other40.last_committed_decree_in_app;
    last_committed_decree_in_prepare_list = other40.last_committed_decree_in_prepare_list;
    __isset = other40.__isset;
}
prepare_ack::prepare_ack(prepare_ack &&other41)
{
    pid = std::move(other41.pid);
    err = std::move(other41.err);
    ballot = std::move(other41.ballot);
    decree = std::move(other41.decree);
    last_committed_decree_in_app = std::move(other41.last_committed_decree_in_app);
    last_committed_decree_in_prepare_list =
        std::move(other41.last_committed_decree_in_prepare_list);
    __isset = std::move(other41.__isset);
}
prepare_ack &prepare_ack::operator=(const prepare_ack &other42)
{
    pid = other42.pid;
    err = other42.err;
    ballot = other42.ballot;
    decree = other42.decree;
    last_committed_decree_in_app = other42.last_committed_decree_in_app;
    last_committed_decree_in_prepare_list = other42.last_committed_decree_in_prepare_list;
    __isset = other42.__isset;
    return *this;
}
prepare_ack &prepare_ack::operator=(prepare_ack &&other43)
{
    pid = std::move(other43.pid);
    err = std::move(other43.err);
    ballot = std::move(other43.ballot);
    decree = std::move(other43.decree);
    last_committed_decree_in_app = std::move(other43.last_committed_decree_in_app);
    last_committed_decree_in_prepare_list =
        std::move(other43.last_committed_decree_in_prepare_list);
    __isset = std::move(other43.__isset);
    return *this;
}
void prepare_ack::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "prepare_ack(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "err=" << to_string(err);
    out << ", "
        << "ballot=" << to_string(ballot);
    out << ", "
        << "decree=" << to_string(decree);
    out << ", "
        << "last_committed_decree_in_app=" << to_string(last_committed_decree_in_app);
    out << ", "
        << "last_committed_decree_in_prepare_list="
        << to_string(last_committed_decree_in_prepare_list);
    out << ")";
}

learn_state::~learn_state() throw() {}

void learn_state::__set_from_decree_excluded(const int64_t val)
{
    this->from_decree_excluded = val;
}

void learn_state::__set_to_decree_included(const int64_t val) { this->to_decree_included = val; }

void learn_state::__set_meta(const ::dsn::blob &val) { this->meta = val; }

void learn_state::__set_files(const std::vector<std::string> &val) { this->files = val; }

void learn_state::__set_learn_start_decree(const int64_t val)
{
    this->learn_start_decree = val;
    __isset.learn_start_decree = true;
}

uint32_t learn_state::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->from_decree_excluded);
                this->__isset.from_decree_excluded = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->to_decree_included);
                this->__isset.to_decree_included = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->meta.read(iprot);
                this->__isset.meta = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->files.clear();
                    uint32_t _size44;
                    ::apache::thrift::protocol::TType _etype47;
                    xfer += iprot->readListBegin(_etype47, _size44);
                    this->files.resize(_size44);
                    uint32_t _i48;
                    for (_i48 = 0; _i48 < _size44; ++_i48) {
                        xfer += iprot->readString(this->files[_i48]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.files = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->learn_start_decree);
                this->__isset.learn_start_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t learn_state::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("learn_state");

    xfer += oprot->writeFieldBegin("from_decree_excluded", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->from_decree_excluded);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("to_decree_included", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->to_decree_included);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("meta", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->meta.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("files", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING,
                                      static_cast<uint32_t>(this->files.size()));
        std::vector<std::string>::const_iterator _iter49;
        for (_iter49 = this->files.begin(); _iter49 != this->files.end(); ++_iter49) {
            xfer += oprot->writeString((*_iter49));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    if (this->__isset.learn_start_decree) {
        xfer += oprot->writeFieldBegin("learn_start_decree", ::apache::thrift::protocol::T_I64, 5);
        xfer += oprot->writeI64(this->learn_start_decree);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(learn_state &a, learn_state &b)
{
    using ::std::swap;
    swap(a.from_decree_excluded, b.from_decree_excluded);
    swap(a.to_decree_included, b.to_decree_included);
    swap(a.meta, b.meta);
    swap(a.files, b.files);
    swap(a.learn_start_decree, b.learn_start_decree);
    swap(a.__isset, b.__isset);
}

learn_state::learn_state(const learn_state &other50)
{
    from_decree_excluded = other50.from_decree_excluded;
    to_decree_included = other50.to_decree_included;
    meta = other50.meta;
    files = other50.files;
    learn_start_decree = other50.learn_start_decree;
    __isset = other50.__isset;
}
learn_state::learn_state(learn_state &&other51)
{
    from_decree_excluded = std::move(other51.from_decree_excluded);
    to_decree_included = std::move(other51.to_decree_included);
    meta = std::move(other51.meta);
    files = std::move(other51.files);
    learn_start_decree = std::move(other51.learn_start_decree);
    __isset = std::move(other51.__isset);
}
learn_state &learn_state::operator=(const learn_state &other52)
{
    from_decree_excluded = other52.from_decree_excluded;
    to_decree_included = other52.to_decree_included;
    meta = other52.meta;
    files = other52.files;
    learn_start_decree = other52.learn_start_decree;
    __isset = other52.__isset;
    return *this;
}
learn_state &learn_state::operator=(learn_state &&other53)
{
    from_decree_excluded = std::move(other53.from_decree_excluded);
    to_decree_included = std::move(other53.to_decree_included);
    meta = std::move(other53.meta);
    files = std::move(other53.files);
    learn_start_decree = std::move(other53.learn_start_decree);
    __isset = std::move(other53.__isset);
    return *this;
}
void learn_state::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "learn_state(";
    out << "from_decree_excluded=" << to_string(from_decree_excluded);
    out << ", "
        << "to_decree_included=" << to_string(to_decree_included);
    out << ", "
        << "meta=" << to_string(meta);
    out << ", "
        << "files=" << to_string(files);
    out << ", "
        << "learn_start_decree=";
    (__isset.learn_start_decree ? (out << to_string(learn_start_decree)) : (out << "<null>"));
    out << ")";
}

learn_request::~learn_request() throw() {}

void learn_request::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void learn_request::__set_learner(const ::dsn::rpc_address &val) { this->learner = val; }

void learn_request::__set_signature(const int64_t val) { this->signature = val; }

void learn_request::__set_last_committed_decree_in_app(const int64_t val)
{
    this->last_committed_decree_in_app = val;
}

void learn_request::__set_last_committed_decree_in_prepare_list(const int64_t val)
{
    this->last_committed_decree_in_prepare_list = val;
}

void learn_request::__set_app_specific_learn_request(const ::dsn::blob &val)
{
    this->app_specific_learn_request = val;
}

void learn_request::__set_max_gced_decree(const int64_t val)
{
    this->max_gced_decree = val;
    __isset.max_gced_decree = true;
}

uint32_t learn_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->learner.read(iprot);
                this->__isset.learner = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->signature);
                this->__isset.signature = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_committed_decree_in_app);
                this->__isset.last_committed_decree_in_app = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_committed_decree_in_prepare_list);
                this->__isset.last_committed_decree_in_prepare_list = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->app_specific_learn_request.read(iprot);
                this->__isset.app_specific_learn_request = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 7:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->max_gced_decree);
                this->__isset.max_gced_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t learn_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("learn_request");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("learner", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->learner.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("signature", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->signature);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "last_committed_decree_in_app", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->last_committed_decree_in_app);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "last_committed_decree_in_prepare_list", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->last_committed_decree_in_prepare_list);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "app_specific_learn_request", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->app_specific_learn_request.write(oprot);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.max_gced_decree) {
        xfer += oprot->writeFieldBegin("max_gced_decree", ::apache::thrift::protocol::T_I64, 7);
        xfer += oprot->writeI64(this->max_gced_decree);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(learn_request &a, learn_request &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.learner, b.learner);
    swap(a.signature, b.signature);
    swap(a.last_committed_decree_in_app, b.last_committed_decree_in_app);
    swap(a.last_committed_decree_in_prepare_list, b.last_committed_decree_in_prepare_list);
    swap(a.app_specific_learn_request, b.app_specific_learn_request);
    swap(a.max_gced_decree, b.max_gced_decree);
    swap(a.__isset, b.__isset);
}

learn_request::learn_request(const learn_request &other54)
{
    pid = other54.pid;
    learner = other54.learner;
    signature = other54.signature;
    last_committed_decree_in_app = other54.last_committed_decree_in_app;
    last_committed_decree_in_prepare_list = other54.last_committed_decree_in_prepare_list;
    app_specific_learn_request = other54.app_specific_learn_request;
    max_gced_decree = other54.max_gced_decree;
    __isset = other54.__isset;
}
learn_request::learn_request(learn_request &&other55)
{
    pid = std::move(other55.pid);
    learner = std::move(other55.learner);
    signature = std::move(other55.signature);
    last_committed_decree_in_app = std::move(other55.last_committed_decree_in_app);
    last_committed_decree_in_prepare_list =
        std::move(other55.last_committed_decree_in_prepare_list);
    app_specific_learn_request = std::move(other55.app_specific_learn_request);
    max_gced_decree = std::move(other55.max_gced_decree);
    __isset = std::move(other55.__isset);
}
learn_request &learn_request::operator=(const learn_request &other56)
{
    pid = other56.pid;
    learner = other56.learner;
    signature = other56.signature;
    last_committed_decree_in_app = other56.last_committed_decree_in_app;
    last_committed_decree_in_prepare_list = other56.last_committed_decree_in_prepare_list;
    app_specific_learn_request = other56.app_specific_learn_request;
    max_gced_decree = other56.max_gced_decree;
    __isset = other56.__isset;
    return *this;
}
learn_request &learn_request::operator=(learn_request &&other57)
{
    pid = std::move(other57.pid);
    learner = std::move(other57.learner);
    signature = std::move(other57.signature);
    last_committed_decree_in_app = std::move(other57.last_committed_decree_in_app);
    last_committed_decree_in_prepare_list =
        std::move(other57.last_committed_decree_in_prepare_list);
    app_specific_learn_request = std::move(other57.app_specific_learn_request);
    max_gced_decree = std::move(other57.max_gced_decree);
    __isset = std::move(other57.__isset);
    return *this;
}
void learn_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "learn_request(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "learner=" << to_string(learner);
    out << ", "
        << "signature=" << to_string(signature);
    out << ", "
        << "last_committed_decree_in_app=" << to_string(last_committed_decree_in_app);
    out << ", "
        << "last_committed_decree_in_prepare_list="
        << to_string(last_committed_decree_in_prepare_list);
    out << ", "
        << "app_specific_learn_request=" << to_string(app_specific_learn_request);
    out << ", "
        << "max_gced_decree=";
    (__isset.max_gced_decree ? (out << to_string(max_gced_decree)) : (out << "<null>"));
    out << ")";
}

learn_response::~learn_response() throw() {}

void learn_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void learn_response::__set_config(const replica_configuration &val) { this->config = val; }

void learn_response::__set_last_committed_decree(const int64_t val)
{
    this->last_committed_decree = val;
}

void learn_response::__set_prepare_start_decree(const int64_t val)
{
    this->prepare_start_decree = val;
}

void learn_response::__set_type(const learn_type::type val) { this->type = val; }

void learn_response::__set_state(const learn_state &val) { this->state = val; }

void learn_response::__set_address(const ::dsn::rpc_address &val) { this->address = val; }

void learn_response::__set_base_local_dir(const std::string &val) { this->base_local_dir = val; }

uint32_t learn_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->config.read(iprot);
                this->__isset.config = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_committed_decree);
                this->__isset.last_committed_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->prepare_start_decree);
                this->__isset.prepare_start_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast58;
                xfer += iprot->readI32(ecast58);
                this->type = (learn_type::type)ecast58;
                this->__isset.type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->state.read(iprot);
                this->__isset.state = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 7:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->address.read(iprot);
                this->__isset.address = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 8:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->base_local_dir);
                this->__isset.base_local_dir = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t learn_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("learn_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("config", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->config.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("last_committed_decree", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->last_committed_decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("prepare_start_decree", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->prepare_start_decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->state.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->address.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("base_local_dir", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->base_local_dir);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(learn_response &a, learn_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.config, b.config);
    swap(a.last_committed_decree, b.last_committed_decree);
    swap(a.prepare_start_decree, b.prepare_start_decree);
    swap(a.type, b.type);
    swap(a.state, b.state);
    swap(a.address, b.address);
    swap(a.base_local_dir, b.base_local_dir);
    swap(a.__isset, b.__isset);
}

learn_response::learn_response(const learn_response &other59)
{
    err = other59.err;
    config = other59.config;
    last_committed_decree = other59.last_committed_decree;
    prepare_start_decree = other59.prepare_start_decree;
    type = other59.type;
    state = other59.state;
    address = other59.address;
    base_local_dir = other59.base_local_dir;
    __isset = other59.__isset;
}
learn_response::learn_response(learn_response &&other60)
{
    err = std::move(other60.err);
    config = std::move(other60.config);
    last_committed_decree = std::move(other60.last_committed_decree);
    prepare_start_decree = std::move(other60.prepare_start_decree);
    type = std::move(other60.type);
    state = std::move(other60.state);
    address = std::move(other60.address);
    base_local_dir = std::move(other60.base_local_dir);
    __isset = std::move(other60.__isset);
}
learn_response &learn_response::operator=(const learn_response &other61)
{
    err = other61.err;
    config = other61.config;
    last_committed_decree = other61.last_committed_decree;
    prepare_start_decree = other61.prepare_start_decree;
    type = other61.type;
    state = other61.state;
    address = other61.address;
    base_local_dir = other61.base_local_dir;
    __isset = other61.__isset;
    return *this;
}
learn_response &learn_response::operator=(learn_response &&other62)
{
    err = std::move(other62.err);
    config = std::move(other62.config);
    last_committed_decree = std::move(other62.last_committed_decree);
    prepare_start_decree = std::move(other62.prepare_start_decree);
    type = std::move(other62.type);
    state = std::move(other62.state);
    address = std::move(other62.address);
    base_local_dir = std::move(other62.base_local_dir);
    __isset = std::move(other62.__isset);
    return *this;
}
void learn_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "learn_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "config=" << to_string(config);
    out << ", "
        << "last_committed_decree=" << to_string(last_committed_decree);
    out << ", "
        << "prepare_start_decree=" << to_string(prepare_start_decree);
    out << ", "
        << "type=" << to_string(type);
    out << ", "
        << "state=" << to_string(state);
    out << ", "
        << "address=" << to_string(address);
    out << ", "
        << "base_local_dir=" << to_string(base_local_dir);
    out << ")";
}

learn_notify_response::~learn_notify_response() throw() {}

void learn_notify_response::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void learn_notify_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void learn_notify_response::__set_signature(const int64_t val) { this->signature = val; }

uint32_t learn_notify_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->signature);
                this->__isset.signature = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t learn_notify_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("learn_notify_response");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("signature", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->signature);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(learn_notify_response &a, learn_notify_response &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.err, b.err);
    swap(a.signature, b.signature);
    swap(a.__isset, b.__isset);
}

learn_notify_response::learn_notify_response(const learn_notify_response &other63)
{
    pid = other63.pid;
    err = other63.err;
    signature = other63.signature;
    __isset = other63.__isset;
}
learn_notify_response::learn_notify_response(learn_notify_response &&other64)
{
    pid = std::move(other64.pid);
    err = std::move(other64.err);
    signature = std::move(other64.signature);
    __isset = std::move(other64.__isset);
}
learn_notify_response &learn_notify_response::operator=(const learn_notify_response &other65)
{
    pid = other65.pid;
    err = other65.err;
    signature = other65.signature;
    __isset = other65.__isset;
    return *this;
}
learn_notify_response &learn_notify_response::operator=(learn_notify_response &&other66)
{
    pid = std::move(other66.pid);
    err = std::move(other66.err);
    signature = std::move(other66.signature);
    __isset = std::move(other66.__isset);
    return *this;
}
void learn_notify_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "learn_notify_response(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "err=" << to_string(err);
    out << ", "
        << "signature=" << to_string(signature);
    out << ")";
}

group_check_request::~group_check_request() throw() {}

void group_check_request::__set_app(const ::dsn::app_info &val) { this->app = val; }

void group_check_request::__set_node(const ::dsn::rpc_address &val) { this->node = val; }

void group_check_request::__set_config(const replica_configuration &val) { this->config = val; }

void group_check_request::__set_last_committed_decree(const int64_t val)
{
    this->last_committed_decree = val;
}

void group_check_request::__set_confirmed_decree(const int64_t val)
{
    this->confirmed_decree = val;
    __isset.confirmed_decree = true;
}

void group_check_request::__set_child_gpid(const ::dsn::gpid &val)
{
    this->child_gpid = val;
    __isset.child_gpid = true;
}

void group_check_request::__set_primary_split_status(const split_status::type val)
{
    this->primary_split_status = val;
    __isset.primary_split_status = true;
}

uint32_t group_check_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->app.read(iprot);
                this->__isset.app = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->node.read(iprot);
                this->__isset.node = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->config.read(iprot);
                this->__isset.config = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_committed_decree);
                this->__isset.last_committed_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->confirmed_decree);
                this->__isset.confirmed_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->child_gpid.read(iprot);
                this->__isset.child_gpid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 7:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast67;
                xfer += iprot->readI32(ecast67);
                this->primary_split_status = (split_status::type)ecast67;
                this->__isset.primary_split_status = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t group_check_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("group_check_request");

    xfer += oprot->writeFieldBegin("app", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->app.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->node.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("config", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->config.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("last_committed_decree", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->last_committed_decree);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.confirmed_decree) {
        xfer += oprot->writeFieldBegin("confirmed_decree", ::apache::thrift::protocol::T_I64, 5);
        xfer += oprot->writeI64(this->confirmed_decree);
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.child_gpid) {
        xfer += oprot->writeFieldBegin("child_gpid", ::apache::thrift::protocol::T_STRUCT, 6);
        xfer += this->child_gpid.write(oprot);
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.primary_split_status) {
        xfer +=
            oprot->writeFieldBegin("primary_split_status", ::apache::thrift::protocol::T_I32, 7);
        xfer += oprot->writeI32((int32_t)this->primary_split_status);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(group_check_request &a, group_check_request &b)
{
    using ::std::swap;
    swap(a.app, b.app);
    swap(a.node, b.node);
    swap(a.config, b.config);
    swap(a.last_committed_decree, b.last_committed_decree);
    swap(a.confirmed_decree, b.confirmed_decree);
    swap(a.child_gpid, b.child_gpid);
    swap(a.primary_split_status, b.primary_split_status);
    swap(a.__isset, b.__isset);
}

group_check_request::group_check_request(const group_check_request &other68)
{
    app = other68.app;
    node = other68.node;
    config = other68.config;
    last_committed_decree = other68.last_committed_decree;
    confirmed_decree = other68.confirmed_decree;
    child_gpid = other68.child_gpid;
    primary_split_status = other68.primary_split_status;
    __isset = other68.__isset;
}
group_check_request::group_check_request(group_check_request &&other69)
{
    app = std::move(other69.app);
    node = std::move(other69.node);
    config = std::move(other69.config);
    last_committed_decree = std::move(other69.last_committed_decree);
    confirmed_decree = std::move(other69.confirmed_decree);
    child_gpid = std::move(other69.child_gpid);
    primary_split_status = std::move(other69.primary_split_status);
    __isset = std::move(other69.__isset);
}
group_check_request &group_check_request::operator=(const group_check_request &other70)
{
    app = other70.app;
    node = other70.node;
    config = other70.config;
    last_committed_decree = other70.last_committed_decree;
    confirmed_decree = other70.confirmed_decree;
    child_gpid = other70.child_gpid;
    primary_split_status = other70.primary_split_status;
    __isset = other70.__isset;
    return *this;
}
group_check_request &group_check_request::operator=(group_check_request &&other71)
{
    app = std::move(other71.app);
    node = std::move(other71.node);
    config = std::move(other71.config);
    last_committed_decree = std::move(other71.last_committed_decree);
    confirmed_decree = std::move(other71.confirmed_decree);
    child_gpid = std::move(other71.child_gpid);
    primary_split_status = std::move(other71.primary_split_status);
    __isset = std::move(other71.__isset);
    return *this;
}
void group_check_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "group_check_request(";
    out << "app=" << to_string(app);
    out << ", "
        << "node=" << to_string(node);
    out << ", "
        << "config=" << to_string(config);
    out << ", "
        << "last_committed_decree=" << to_string(last_committed_decree);
    out << ", "
        << "confirmed_decree=";
    (__isset.confirmed_decree ? (out << to_string(confirmed_decree)) : (out << "<null>"));
    out << ", "
        << "child_gpid=";
    (__isset.child_gpid ? (out << to_string(child_gpid)) : (out << "<null>"));
    out << ", "
        << "primary_split_status=";
    (__isset.primary_split_status ? (out << to_string(primary_split_status)) : (out << "<null>"));
    out << ")";
}

group_check_response::~group_check_response() throw() {}

void group_check_response::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void group_check_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void group_check_response::__set_last_committed_decree_in_app(const int64_t val)
{
    this->last_committed_decree_in_app = val;
}

void group_check_response::__set_last_committed_decree_in_prepare_list(const int64_t val)
{
    this->last_committed_decree_in_prepare_list = val;
}

void group_check_response::__set_learner_status_(const learner_status::type val)
{
    this->learner_status_ = val;
}

void group_check_response::__set_learner_signature(const int64_t val)
{
    this->learner_signature = val;
}

void group_check_response::__set_node(const ::dsn::rpc_address &val) { this->node = val; }

uint32_t group_check_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_committed_decree_in_app);
                this->__isset.last_committed_decree_in_app = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_committed_decree_in_prepare_list);
                this->__isset.last_committed_decree_in_prepare_list = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast72;
                xfer += iprot->readI32(ecast72);
                this->learner_status_ = (learner_status::type)ecast72;
                this->__isset.learner_status_ = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->learner_signature);
                this->__isset.learner_signature = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 7:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->node.read(iprot);
                this->__isset.node = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t group_check_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("group_check_response");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "last_committed_decree_in_app", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->last_committed_decree_in_app);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "last_committed_decree_in_prepare_list", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->last_committed_decree_in_prepare_list);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("learner_status_", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32((int32_t)this->learner_status_);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("learner_signature", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->learner_signature);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->node.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(group_check_response &a, group_check_response &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.err, b.err);
    swap(a.last_committed_decree_in_app, b.last_committed_decree_in_app);
    swap(a.last_committed_decree_in_prepare_list, b.last_committed_decree_in_prepare_list);
    swap(a.learner_status_, b.learner_status_);
    swap(a.learner_signature, b.learner_signature);
    swap(a.node, b.node);
    swap(a.__isset, b.__isset);
}

group_check_response::group_check_response(const group_check_response &other73)
{
    pid = other73.pid;
    err = other73.err;
    last_committed_decree_in_app = other73.last_committed_decree_in_app;
    last_committed_decree_in_prepare_list = other73.last_committed_decree_in_prepare_list;
    learner_status_ = other73.learner_status_;
    learner_signature = other73.learner_signature;
    node = other73.node;
    __isset = other73.__isset;
}
group_check_response::group_check_response(group_check_response &&other74)
{
    pid = std::move(other74.pid);
    err = std::move(other74.err);
    last_committed_decree_in_app = std::move(other74.last_committed_decree_in_app);
    last_committed_decree_in_prepare_list =
        std::move(other74.last_committed_decree_in_prepare_list);
    learner_status_ = std::move(other74.learner_status_);
    learner_signature = std::move(other74.learner_signature);
    node = std::move(other74.node);
    __isset = std::move(other74.__isset);
}
group_check_response &group_check_response::operator=(const group_check_response &other75)
{
    pid = other75.pid;
    err = other75.err;
    last_committed_decree_in_app = other75.last_committed_decree_in_app;
    last_committed_decree_in_prepare_list = other75.last_committed_decree_in_prepare_list;
    learner_status_ = other75.learner_status_;
    learner_signature = other75.learner_signature;
    node = other75.node;
    __isset = other75.__isset;
    return *this;
}
group_check_response &group_check_response::operator=(group_check_response &&other76)
{
    pid = std::move(other76.pid);
    err = std::move(other76.err);
    last_committed_decree_in_app = std::move(other76.last_committed_decree_in_app);
    last_committed_decree_in_prepare_list =
        std::move(other76.last_committed_decree_in_prepare_list);
    learner_status_ = std::move(other76.learner_status_);
    learner_signature = std::move(other76.learner_signature);
    node = std::move(other76.node);
    __isset = std::move(other76.__isset);
    return *this;
}
void group_check_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "group_check_response(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "err=" << to_string(err);
    out << ", "
        << "last_committed_decree_in_app=" << to_string(last_committed_decree_in_app);
    out << ", "
        << "last_committed_decree_in_prepare_list="
        << to_string(last_committed_decree_in_prepare_list);
    out << ", "
        << "learner_status_=" << to_string(learner_status_);
    out << ", "
        << "learner_signature=" << to_string(learner_signature);
    out << ", "
        << "node=" << to_string(node);
    out << ")";
}

node_info::~node_info() throw() {}

void node_info::__set_status(const node_status::type val) { this->status = val; }

void node_info::__set_address(const ::dsn::rpc_address &val) { this->address = val; }

uint32_t node_info::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast77;
                xfer += iprot->readI32(ecast77);
                this->status = (node_status::type)ecast77;
                this->__isset.status = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->address.read(iprot);
                this->__isset.address = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t node_info::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("node_info");

    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->address.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(node_info &a, node_info &b)
{
    using ::std::swap;
    swap(a.status, b.status);
    swap(a.address, b.address);
    swap(a.__isset, b.__isset);
}

node_info::node_info(const node_info &other78)
{
    status = other78.status;
    address = other78.address;
    __isset = other78.__isset;
}
node_info::node_info(node_info &&other79)
{
    status = std::move(other79.status);
    address = std::move(other79.address);
    __isset = std::move(other79.__isset);
}
node_info &node_info::operator=(const node_info &other80)
{
    status = other80.status;
    address = other80.address;
    __isset = other80.__isset;
    return *this;
}
node_info &node_info::operator=(node_info &&other81)
{
    status = std::move(other81.status);
    address = std::move(other81.address);
    __isset = std::move(other81.__isset);
    return *this;
}
void node_info::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "node_info(";
    out << "status=" << to_string(status);
    out << ", "
        << "address=" << to_string(address);
    out << ")";
}

configuration_update_request::~configuration_update_request() throw() {}

void configuration_update_request::__set_info(const ::dsn::app_info &val) { this->info = val; }

void configuration_update_request::__set_config(const ::dsn::partition_configuration &val)
{
    this->config = val;
}

void configuration_update_request::__set_type(const config_type::type val) { this->type = val; }

void configuration_update_request::__set_node(const ::dsn::rpc_address &val) { this->node = val; }

void configuration_update_request::__set_host_node(const ::dsn::rpc_address &val)
{
    this->host_node = val;
}

uint32_t configuration_update_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->info.read(iprot);
                this->__isset.info = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->config.read(iprot);
                this->__isset.config = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast82;
                xfer += iprot->readI32(ecast82);
                this->type = (config_type::type)ecast82;
                this->__isset.type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->node.read(iprot);
                this->__isset.node = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->host_node.read(iprot);
                this->__isset.host_node = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_update_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_update_request");

    xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->info.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("config", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->config.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->node.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("host_node", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->host_node.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_update_request &a, configuration_update_request &b)
{
    using ::std::swap;
    swap(a.info, b.info);
    swap(a.config, b.config);
    swap(a.type, b.type);
    swap(a.node, b.node);
    swap(a.host_node, b.host_node);
    swap(a.__isset, b.__isset);
}

configuration_update_request::configuration_update_request(
    const configuration_update_request &other83)
{
    info = other83.info;
    config = other83.config;
    type = other83.type;
    node = other83.node;
    host_node = other83.host_node;
    __isset = other83.__isset;
}
configuration_update_request::configuration_update_request(configuration_update_request &&other84)
{
    info = std::move(other84.info);
    config = std::move(other84.config);
    type = std::move(other84.type);
    node = std::move(other84.node);
    host_node = std::move(other84.host_node);
    __isset = std::move(other84.__isset);
}
configuration_update_request &configuration_update_request::
operator=(const configuration_update_request &other85)
{
    info = other85.info;
    config = other85.config;
    type = other85.type;
    node = other85.node;
    host_node = other85.host_node;
    __isset = other85.__isset;
    return *this;
}
configuration_update_request &configuration_update_request::
operator=(configuration_update_request &&other86)
{
    info = std::move(other86.info);
    config = std::move(other86.config);
    type = std::move(other86.type);
    node = std::move(other86.node);
    host_node = std::move(other86.host_node);
    __isset = std::move(other86.__isset);
    return *this;
}
void configuration_update_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_update_request(";
    out << "info=" << to_string(info);
    out << ", "
        << "config=" << to_string(config);
    out << ", "
        << "type=" << to_string(type);
    out << ", "
        << "node=" << to_string(node);
    out << ", "
        << "host_node=" << to_string(host_node);
    out << ")";
}

configuration_update_response::~configuration_update_response() throw() {}

void configuration_update_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void configuration_update_response::__set_config(const ::dsn::partition_configuration &val)
{
    this->config = val;
}

uint32_t configuration_update_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->config.read(iprot);
                this->__isset.config = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_update_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_update_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("config", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->config.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_update_response &a, configuration_update_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.config, b.config);
    swap(a.__isset, b.__isset);
}

configuration_update_response::configuration_update_response(
    const configuration_update_response &other87)
{
    err = other87.err;
    config = other87.config;
    __isset = other87.__isset;
}
configuration_update_response::configuration_update_response(
    configuration_update_response &&other88)
{
    err = std::move(other88.err);
    config = std::move(other88.config);
    __isset = std::move(other88.__isset);
}
configuration_update_response &configuration_update_response::
operator=(const configuration_update_response &other89)
{
    err = other89.err;
    config = other89.config;
    __isset = other89.__isset;
    return *this;
}
configuration_update_response &configuration_update_response::
operator=(configuration_update_response &&other90)
{
    err = std::move(other90.err);
    config = std::move(other90.config);
    __isset = std::move(other90.__isset);
    return *this;
}
void configuration_update_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_update_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "config=" << to_string(config);
    out << ")";
}

replica_server_info::~replica_server_info() throw() {}

void replica_server_info::__set_geo_tags(const std::map<std::string, std::string> &val)
{
    this->geo_tags = val;
}

void replica_server_info::__set_total_capacity_mb(const int64_t val)
{
    this->total_capacity_mb = val;
}

uint32_t replica_server_info::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->geo_tags.clear();
                    uint32_t _size91;
                    ::apache::thrift::protocol::TType _ktype92;
                    ::apache::thrift::protocol::TType _vtype93;
                    xfer += iprot->readMapBegin(_ktype92, _vtype93, _size91);
                    uint32_t _i95;
                    for (_i95 = 0; _i95 < _size91; ++_i95) {
                        std::string _key96;
                        xfer += iprot->readString(_key96);
                        std::string &_val97 = this->geo_tags[_key96];
                        xfer += iprot->readString(_val97);
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.geo_tags = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->total_capacity_mb);
                this->__isset.total_capacity_mb = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t replica_server_info::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("replica_server_info");

    xfer += oprot->writeFieldBegin("geo_tags", ::apache::thrift::protocol::T_MAP, 1);
    {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING,
                                     ::apache::thrift::protocol::T_STRING,
                                     static_cast<uint32_t>(this->geo_tags.size()));
        std::map<std::string, std::string>::const_iterator _iter98;
        for (_iter98 = this->geo_tags.begin(); _iter98 != this->geo_tags.end(); ++_iter98) {
            xfer += oprot->writeString(_iter98->first);
            xfer += oprot->writeString(_iter98->second);
        }
        xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("total_capacity_mb", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->total_capacity_mb);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(replica_server_info &a, replica_server_info &b)
{
    using ::std::swap;
    swap(a.geo_tags, b.geo_tags);
    swap(a.total_capacity_mb, b.total_capacity_mb);
    swap(a.__isset, b.__isset);
}

replica_server_info::replica_server_info(const replica_server_info &other99)
{
    geo_tags = other99.geo_tags;
    total_capacity_mb = other99.total_capacity_mb;
    __isset = other99.__isset;
}
replica_server_info::replica_server_info(replica_server_info &&other100)
{
    geo_tags = std::move(other100.geo_tags);
    total_capacity_mb = std::move(other100.total_capacity_mb);
    __isset = std::move(other100.__isset);
}
replica_server_info &replica_server_info::operator=(const replica_server_info &other101)
{
    geo_tags = other101.geo_tags;
    total_capacity_mb = other101.total_capacity_mb;
    __isset = other101.__isset;
    return *this;
}
replica_server_info &replica_server_info::operator=(replica_server_info &&other102)
{
    geo_tags = std::move(other102.geo_tags);
    total_capacity_mb = std::move(other102.total_capacity_mb);
    __isset = std::move(other102.__isset);
    return *this;
}
void replica_server_info::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "replica_server_info(";
    out << "geo_tags=" << to_string(geo_tags);
    out << ", "
        << "total_capacity_mb=" << to_string(total_capacity_mb);
    out << ")";
}

configuration_query_by_node_request::~configuration_query_by_node_request() throw() {}

void configuration_query_by_node_request::__set_node(const ::dsn::rpc_address &val)
{
    this->node = val;
}

void configuration_query_by_node_request::__set_stored_replicas(
    const std::vector<replica_info> &val)
{
    this->stored_replicas = val;
    __isset.stored_replicas = true;
}

void configuration_query_by_node_request::__set_info(const replica_server_info &val)
{
    this->info = val;
    __isset.info = true;
}

uint32_t configuration_query_by_node_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->node.read(iprot);
                this->__isset.node = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->stored_replicas.clear();
                    uint32_t _size103;
                    ::apache::thrift::protocol::TType _etype106;
                    xfer += iprot->readListBegin(_etype106, _size103);
                    this->stored_replicas.resize(_size103);
                    uint32_t _i107;
                    for (_i107 = 0; _i107 < _size103; ++_i107) {
                        xfer += this->stored_replicas[_i107].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.stored_replicas = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->info.read(iprot);
                this->__isset.info = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_query_by_node_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_query_by_node_request");

    xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->node.write(oprot);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.stored_replicas) {
        xfer += oprot->writeFieldBegin("stored_replicas", ::apache::thrift::protocol::T_LIST, 2);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                          static_cast<uint32_t>(this->stored_replicas.size()));
            std::vector<replica_info>::const_iterator _iter108;
            for (_iter108 = this->stored_replicas.begin(); _iter108 != this->stored_replicas.end();
                 ++_iter108) {
                xfer += (*_iter108).write(oprot);
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.info) {
        xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRUCT, 3);
        xfer += this->info.write(oprot);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_query_by_node_request &a, configuration_query_by_node_request &b)
{
    using ::std::swap;
    swap(a.node, b.node);
    swap(a.stored_replicas, b.stored_replicas);
    swap(a.info, b.info);
    swap(a.__isset, b.__isset);
}

configuration_query_by_node_request::configuration_query_by_node_request(
    const configuration_query_by_node_request &other109)
{
    node = other109.node;
    stored_replicas = other109.stored_replicas;
    info = other109.info;
    __isset = other109.__isset;
}
configuration_query_by_node_request::configuration_query_by_node_request(
    configuration_query_by_node_request &&other110)
{
    node = std::move(other110.node);
    stored_replicas = std::move(other110.stored_replicas);
    info = std::move(other110.info);
    __isset = std::move(other110.__isset);
}
configuration_query_by_node_request &configuration_query_by_node_request::
operator=(const configuration_query_by_node_request &other111)
{
    node = other111.node;
    stored_replicas = other111.stored_replicas;
    info = other111.info;
    __isset = other111.__isset;
    return *this;
}
configuration_query_by_node_request &configuration_query_by_node_request::
operator=(configuration_query_by_node_request &&other112)
{
    node = std::move(other112.node);
    stored_replicas = std::move(other112.stored_replicas);
    info = std::move(other112.info);
    __isset = std::move(other112.__isset);
    return *this;
}
void configuration_query_by_node_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_query_by_node_request(";
    out << "node=" << to_string(node);
    out << ", "
        << "stored_replicas=";
    (__isset.stored_replicas ? (out << to_string(stored_replicas)) : (out << "<null>"));
    out << ", "
        << "info=";
    (__isset.info ? (out << to_string(info)) : (out << "<null>"));
    out << ")";
}

configuration_query_by_node_response::~configuration_query_by_node_response() throw() {}

void configuration_query_by_node_response::__set_err(const ::dsn::error_code &val)
{
    this->err = val;
}

void configuration_query_by_node_response::__set_partitions(
    const std::vector<configuration_update_request> &val)
{
    this->partitions = val;
}

void configuration_query_by_node_response::__set_gc_replicas(const std::vector<replica_info> &val)
{
    this->gc_replicas = val;
    __isset.gc_replicas = true;
}

void configuration_query_by_node_response::__set_splitting_replicas(
    const std::map<::dsn::gpid, split_status::type> &val)
{
    this->splitting_replicas = val;
    __isset.splitting_replicas = true;
}

uint32_t configuration_query_by_node_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->partitions.clear();
                    uint32_t _size113;
                    ::apache::thrift::protocol::TType _etype116;
                    xfer += iprot->readListBegin(_etype116, _size113);
                    this->partitions.resize(_size113);
                    uint32_t _i117;
                    for (_i117 = 0; _i117 < _size113; ++_i117) {
                        xfer += this->partitions[_i117].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.partitions = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->gc_replicas.clear();
                    uint32_t _size118;
                    ::apache::thrift::protocol::TType _etype121;
                    xfer += iprot->readListBegin(_etype121, _size118);
                    this->gc_replicas.resize(_size118);
                    uint32_t _i122;
                    for (_i122 = 0; _i122 < _size118; ++_i122) {
                        xfer += this->gc_replicas[_i122].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.gc_replicas = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->splitting_replicas.clear();
                    uint32_t _size123;
                    ::apache::thrift::protocol::TType _ktype124;
                    ::apache::thrift::protocol::TType _vtype125;
                    xfer += iprot->readMapBegin(_ktype124, _vtype125, _size123);
                    uint32_t _i127;
                    for (_i127 = 0; _i127 < _size123; ++_i127) {
                        ::dsn::gpid _key128;
                        xfer += _key128.read(iprot);
                        split_status::type &_val129 = this->splitting_replicas[_key128];
                        int32_t ecast130;
                        xfer += iprot->readI32(ecast130);
                        _val129 = (split_status::type)ecast130;
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.splitting_replicas = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_query_by_node_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_query_by_node_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("partitions", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->partitions.size()));
        std::vector<configuration_update_request>::const_iterator _iter131;
        for (_iter131 = this->partitions.begin(); _iter131 != this->partitions.end(); ++_iter131) {
            xfer += (*_iter131).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    if (this->__isset.gc_replicas) {
        xfer += oprot->writeFieldBegin("gc_replicas", ::apache::thrift::protocol::T_LIST, 3);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                          static_cast<uint32_t>(this->gc_replicas.size()));
            std::vector<replica_info>::const_iterator _iter132;
            for (_iter132 = this->gc_replicas.begin(); _iter132 != this->gc_replicas.end();
                 ++_iter132) {
                xfer += (*_iter132).write(oprot);
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.splitting_replicas) {
        xfer += oprot->writeFieldBegin("splitting_replicas", ::apache::thrift::protocol::T_MAP, 4);
        {
            xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRUCT,
                                         ::apache::thrift::protocol::T_I32,
                                         static_cast<uint32_t>(this->splitting_replicas.size()));
            std::map<::dsn::gpid, split_status::type>::const_iterator _iter133;
            for (_iter133 = this->splitting_replicas.begin();
                 _iter133 != this->splitting_replicas.end();
                 ++_iter133) {
                xfer += _iter133->first.write(oprot);
                xfer += oprot->writeI32((int32_t)_iter133->second);
            }
            xfer += oprot->writeMapEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_query_by_node_response &a, configuration_query_by_node_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.partitions, b.partitions);
    swap(a.gc_replicas, b.gc_replicas);
    swap(a.splitting_replicas, b.splitting_replicas);
    swap(a.__isset, b.__isset);
}

configuration_query_by_node_response::configuration_query_by_node_response(
    const configuration_query_by_node_response &other134)
{
    err = other134.err;
    partitions = other134.partitions;
    gc_replicas = other134.gc_replicas;
    splitting_replicas = other134.splitting_replicas;
    __isset = other134.__isset;
}
configuration_query_by_node_response::configuration_query_by_node_response(
    configuration_query_by_node_response &&other135)
{
    err = std::move(other135.err);
    partitions = std::move(other135.partitions);
    gc_replicas = std::move(other135.gc_replicas);
    splitting_replicas = std::move(other135.splitting_replicas);
    __isset = std::move(other135.__isset);
}
configuration_query_by_node_response &configuration_query_by_node_response::
operator=(const configuration_query_by_node_response &other136)
{
    err = other136.err;
    partitions = other136.partitions;
    gc_replicas = other136.gc_replicas;
    splitting_replicas = other136.splitting_replicas;
    __isset = other136.__isset;
    return *this;
}
configuration_query_by_node_response &configuration_query_by_node_response::
operator=(configuration_query_by_node_response &&other137)
{
    err = std::move(other137.err);
    partitions = std::move(other137.partitions);
    gc_replicas = std::move(other137.gc_replicas);
    splitting_replicas = std::move(other137.splitting_replicas);
    __isset = std::move(other137.__isset);
    return *this;
}
void configuration_query_by_node_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_query_by_node_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "partitions=" << to_string(partitions);
    out << ", "
        << "gc_replicas=";
    (__isset.gc_replicas ? (out << to_string(gc_replicas)) : (out << "<null>"));
    out << ", "
        << "splitting_replicas=";
    (__isset.splitting_replicas ? (out << to_string(splitting_replicas)) : (out << "<null>"));
    out << ")";
}

create_app_options::~create_app_options() throw() {}

void create_app_options::__set_partition_count(const int32_t val) { this->partition_count = val; }

void create_app_options::__set_replica_count(const int32_t val) { this->replica_count = val; }

void create_app_options::__set_success_if_exist(const bool val) { this->success_if_exist = val; }

void create_app_options::__set_app_type(const std::string &val) { this->app_type = val; }

void create_app_options::__set_is_stateful(const bool val) { this->is_stateful = val; }

void create_app_options::__set_envs(const std::map<std::string, std::string> &val)
{
    this->envs = val;
}

uint32_t create_app_options::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->partition_count);
                this->__isset.partition_count = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->replica_count);
                this->__isset.replica_count = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->success_if_exist);
                this->__isset.success_if_exist = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_type);
                this->__isset.app_type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->is_stateful);
                this->__isset.is_stateful = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->envs.clear();
                    uint32_t _size138;
                    ::apache::thrift::protocol::TType _ktype139;
                    ::apache::thrift::protocol::TType _vtype140;
                    xfer += iprot->readMapBegin(_ktype139, _vtype140, _size138);
                    uint32_t _i142;
                    for (_i142 = 0; _i142 < _size138; ++_i142) {
                        std::string _key143;
                        xfer += iprot->readString(_key143);
                        std::string &_val144 = this->envs[_key143];
                        xfer += iprot->readString(_val144);
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.envs = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t create_app_options::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("create_app_options");

    xfer += oprot->writeFieldBegin("partition_count", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->partition_count);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("replica_count", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->replica_count);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("success_if_exist", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->success_if_exist);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("app_type", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->app_type);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("is_stateful", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->is_stateful);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("envs", ::apache::thrift::protocol::T_MAP, 6);
    {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING,
                                     ::apache::thrift::protocol::T_STRING,
                                     static_cast<uint32_t>(this->envs.size()));
        std::map<std::string, std::string>::const_iterator _iter145;
        for (_iter145 = this->envs.begin(); _iter145 != this->envs.end(); ++_iter145) {
            xfer += oprot->writeString(_iter145->first);
            xfer += oprot->writeString(_iter145->second);
        }
        xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(create_app_options &a, create_app_options &b)
{
    using ::std::swap;
    swap(a.partition_count, b.partition_count);
    swap(a.replica_count, b.replica_count);
    swap(a.success_if_exist, b.success_if_exist);
    swap(a.app_type, b.app_type);
    swap(a.is_stateful, b.is_stateful);
    swap(a.envs, b.envs);
    swap(a.__isset, b.__isset);
}

create_app_options::create_app_options(const create_app_options &other146)
{
    partition_count = other146.partition_count;
    replica_count = other146.replica_count;
    success_if_exist = other146.success_if_exist;
    app_type = other146.app_type;
    is_stateful = other146.is_stateful;
    envs = other146.envs;
    __isset = other146.__isset;
}
create_app_options::create_app_options(create_app_options &&other147)
{
    partition_count = std::move(other147.partition_count);
    replica_count = std::move(other147.replica_count);
    success_if_exist = std::move(other147.success_if_exist);
    app_type = std::move(other147.app_type);
    is_stateful = std::move(other147.is_stateful);
    envs = std::move(other147.envs);
    __isset = std::move(other147.__isset);
}
create_app_options &create_app_options::operator=(const create_app_options &other148)
{
    partition_count = other148.partition_count;
    replica_count = other148.replica_count;
    success_if_exist = other148.success_if_exist;
    app_type = other148.app_type;
    is_stateful = other148.is_stateful;
    envs = other148.envs;
    __isset = other148.__isset;
    return *this;
}
create_app_options &create_app_options::operator=(create_app_options &&other149)
{
    partition_count = std::move(other149.partition_count);
    replica_count = std::move(other149.replica_count);
    success_if_exist = std::move(other149.success_if_exist);
    app_type = std::move(other149.app_type);
    is_stateful = std::move(other149.is_stateful);
    envs = std::move(other149.envs);
    __isset = std::move(other149.__isset);
    return *this;
}
void create_app_options::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "create_app_options(";
    out << "partition_count=" << to_string(partition_count);
    out << ", "
        << "replica_count=" << to_string(replica_count);
    out << ", "
        << "success_if_exist=" << to_string(success_if_exist);
    out << ", "
        << "app_type=" << to_string(app_type);
    out << ", "
        << "is_stateful=" << to_string(is_stateful);
    out << ", "
        << "envs=" << to_string(envs);
    out << ")";
}

configuration_create_app_request::~configuration_create_app_request() throw() {}

void configuration_create_app_request::__set_app_name(const std::string &val)
{
    this->app_name = val;
}

void configuration_create_app_request::__set_options(const create_app_options &val)
{
    this->options = val;
}

uint32_t configuration_create_app_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->options.read(iprot);
                this->__isset.options = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_create_app_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_create_app_request");

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("options", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->options.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_create_app_request &a, configuration_create_app_request &b)
{
    using ::std::swap;
    swap(a.app_name, b.app_name);
    swap(a.options, b.options);
    swap(a.__isset, b.__isset);
}

configuration_create_app_request::configuration_create_app_request(
    const configuration_create_app_request &other150)
{
    app_name = other150.app_name;
    options = other150.options;
    __isset = other150.__isset;
}
configuration_create_app_request::configuration_create_app_request(
    configuration_create_app_request &&other151)
{
    app_name = std::move(other151.app_name);
    options = std::move(other151.options);
    __isset = std::move(other151.__isset);
}
configuration_create_app_request &configuration_create_app_request::
operator=(const configuration_create_app_request &other152)
{
    app_name = other152.app_name;
    options = other152.options;
    __isset = other152.__isset;
    return *this;
}
configuration_create_app_request &configuration_create_app_request::
operator=(configuration_create_app_request &&other153)
{
    app_name = std::move(other153.app_name);
    options = std::move(other153.options);
    __isset = std::move(other153.__isset);
    return *this;
}
void configuration_create_app_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_create_app_request(";
    out << "app_name=" << to_string(app_name);
    out << ", "
        << "options=" << to_string(options);
    out << ")";
}

drop_app_options::~drop_app_options() throw() {}

void drop_app_options::__set_success_if_not_exist(const bool val)
{
    this->success_if_not_exist = val;
}

void drop_app_options::__set_reserve_seconds(const int64_t val)
{
    this->reserve_seconds = val;
    __isset.reserve_seconds = true;
}

uint32_t drop_app_options::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->success_if_not_exist);
                this->__isset.success_if_not_exist = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->reserve_seconds);
                this->__isset.reserve_seconds = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t drop_app_options::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("drop_app_options");

    xfer += oprot->writeFieldBegin("success_if_not_exist", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->success_if_not_exist);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.reserve_seconds) {
        xfer += oprot->writeFieldBegin("reserve_seconds", ::apache::thrift::protocol::T_I64, 2);
        xfer += oprot->writeI64(this->reserve_seconds);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(drop_app_options &a, drop_app_options &b)
{
    using ::std::swap;
    swap(a.success_if_not_exist, b.success_if_not_exist);
    swap(a.reserve_seconds, b.reserve_seconds);
    swap(a.__isset, b.__isset);
}

drop_app_options::drop_app_options(const drop_app_options &other154)
{
    success_if_not_exist = other154.success_if_not_exist;
    reserve_seconds = other154.reserve_seconds;
    __isset = other154.__isset;
}
drop_app_options::drop_app_options(drop_app_options &&other155)
{
    success_if_not_exist = std::move(other155.success_if_not_exist);
    reserve_seconds = std::move(other155.reserve_seconds);
    __isset = std::move(other155.__isset);
}
drop_app_options &drop_app_options::operator=(const drop_app_options &other156)
{
    success_if_not_exist = other156.success_if_not_exist;
    reserve_seconds = other156.reserve_seconds;
    __isset = other156.__isset;
    return *this;
}
drop_app_options &drop_app_options::operator=(drop_app_options &&other157)
{
    success_if_not_exist = std::move(other157.success_if_not_exist);
    reserve_seconds = std::move(other157.reserve_seconds);
    __isset = std::move(other157.__isset);
    return *this;
}
void drop_app_options::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "drop_app_options(";
    out << "success_if_not_exist=" << to_string(success_if_not_exist);
    out << ", "
        << "reserve_seconds=";
    (__isset.reserve_seconds ? (out << to_string(reserve_seconds)) : (out << "<null>"));
    out << ")";
}

configuration_drop_app_request::~configuration_drop_app_request() throw() {}

void configuration_drop_app_request::__set_app_name(const std::string &val)
{
    this->app_name = val;
}

void configuration_drop_app_request::__set_options(const drop_app_options &val)
{
    this->options = val;
}

uint32_t configuration_drop_app_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->options.read(iprot);
                this->__isset.options = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_drop_app_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_drop_app_request");

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("options", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->options.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_drop_app_request &a, configuration_drop_app_request &b)
{
    using ::std::swap;
    swap(a.app_name, b.app_name);
    swap(a.options, b.options);
    swap(a.__isset, b.__isset);
}

configuration_drop_app_request::configuration_drop_app_request(
    const configuration_drop_app_request &other158)
{
    app_name = other158.app_name;
    options = other158.options;
    __isset = other158.__isset;
}
configuration_drop_app_request::configuration_drop_app_request(
    configuration_drop_app_request &&other159)
{
    app_name = std::move(other159.app_name);
    options = std::move(other159.options);
    __isset = std::move(other159.__isset);
}
configuration_drop_app_request &configuration_drop_app_request::
operator=(const configuration_drop_app_request &other160)
{
    app_name = other160.app_name;
    options = other160.options;
    __isset = other160.__isset;
    return *this;
}
configuration_drop_app_request &configuration_drop_app_request::
operator=(configuration_drop_app_request &&other161)
{
    app_name = std::move(other161.app_name);
    options = std::move(other161.options);
    __isset = std::move(other161.__isset);
    return *this;
}
void configuration_drop_app_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_drop_app_request(";
    out << "app_name=" << to_string(app_name);
    out << ", "
        << "options=" << to_string(options);
    out << ")";
}

configuration_list_apps_request::~configuration_list_apps_request() throw() {}

void configuration_list_apps_request::__set_status(const ::dsn::app_status::type val)
{
    this->status = val;
}

uint32_t configuration_list_apps_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast162;
                xfer += iprot->readI32(ecast162);
                this->status = (::dsn::app_status::type)ecast162;
                this->__isset.status = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_list_apps_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_list_apps_request");

    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_list_apps_request &a, configuration_list_apps_request &b)
{
    using ::std::swap;
    swap(a.status, b.status);
    swap(a.__isset, b.__isset);
}

configuration_list_apps_request::configuration_list_apps_request(
    const configuration_list_apps_request &other163)
{
    status = other163.status;
    __isset = other163.__isset;
}
configuration_list_apps_request::configuration_list_apps_request(
    configuration_list_apps_request &&other164)
{
    status = std::move(other164.status);
    __isset = std::move(other164.__isset);
}
configuration_list_apps_request &configuration_list_apps_request::
operator=(const configuration_list_apps_request &other165)
{
    status = other165.status;
    __isset = other165.__isset;
    return *this;
}
configuration_list_apps_request &configuration_list_apps_request::
operator=(configuration_list_apps_request &&other166)
{
    status = std::move(other166.status);
    __isset = std::move(other166.__isset);
    return *this;
}
void configuration_list_apps_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_list_apps_request(";
    out << "status=" << to_string(status);
    out << ")";
}

configuration_list_nodes_request::~configuration_list_nodes_request() throw() {}

void configuration_list_nodes_request::__set_status(const node_status::type val)
{
    this->status = val;
}

uint32_t configuration_list_nodes_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast167;
                xfer += iprot->readI32(ecast167);
                this->status = (node_status::type)ecast167;
                this->__isset.status = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_list_nodes_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_list_nodes_request");

    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_list_nodes_request &a, configuration_list_nodes_request &b)
{
    using ::std::swap;
    swap(a.status, b.status);
    swap(a.__isset, b.__isset);
}

configuration_list_nodes_request::configuration_list_nodes_request(
    const configuration_list_nodes_request &other168)
{
    status = other168.status;
    __isset = other168.__isset;
}
configuration_list_nodes_request::configuration_list_nodes_request(
    configuration_list_nodes_request &&other169)
{
    status = std::move(other169.status);
    __isset = std::move(other169.__isset);
}
configuration_list_nodes_request &configuration_list_nodes_request::
operator=(const configuration_list_nodes_request &other170)
{
    status = other170.status;
    __isset = other170.__isset;
    return *this;
}
configuration_list_nodes_request &configuration_list_nodes_request::
operator=(configuration_list_nodes_request &&other171)
{
    status = std::move(other171.status);
    __isset = std::move(other171.__isset);
    return *this;
}
void configuration_list_nodes_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_list_nodes_request(";
    out << "status=" << to_string(status);
    out << ")";
}

configuration_cluster_info_request::~configuration_cluster_info_request() throw() {}

uint32_t configuration_cluster_info_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        xfer += iprot->skip(ftype);
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_cluster_info_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_cluster_info_request");

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_cluster_info_request &a, configuration_cluster_info_request &b)
{
    using ::std::swap;
    (void)a;
    (void)b;
}

configuration_cluster_info_request::configuration_cluster_info_request(
    const configuration_cluster_info_request &other172)
{
    (void)other172;
}
configuration_cluster_info_request::configuration_cluster_info_request(
    configuration_cluster_info_request &&other173)
{
    (void)other173;
}
configuration_cluster_info_request &configuration_cluster_info_request::
operator=(const configuration_cluster_info_request &other174)
{
    (void)other174;
    return *this;
}
configuration_cluster_info_request &configuration_cluster_info_request::
operator=(configuration_cluster_info_request &&other175)
{
    (void)other175;
    return *this;
}
void configuration_cluster_info_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_cluster_info_request(";
    out << ")";
}

configuration_recall_app_request::~configuration_recall_app_request() throw() {}

void configuration_recall_app_request::__set_app_id(const int32_t val) { this->app_id = val; }

void configuration_recall_app_request::__set_new_app_name(const std::string &val)
{
    this->new_app_name = val;
}

uint32_t configuration_recall_app_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->app_id);
                this->__isset.app_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->new_app_name);
                this->__isset.new_app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_recall_app_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_recall_app_request");

    xfer += oprot->writeFieldBegin("app_id", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->app_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("new_app_name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->new_app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_recall_app_request &a, configuration_recall_app_request &b)
{
    using ::std::swap;
    swap(a.app_id, b.app_id);
    swap(a.new_app_name, b.new_app_name);
    swap(a.__isset, b.__isset);
}

configuration_recall_app_request::configuration_recall_app_request(
    const configuration_recall_app_request &other176)
{
    app_id = other176.app_id;
    new_app_name = other176.new_app_name;
    __isset = other176.__isset;
}
configuration_recall_app_request::configuration_recall_app_request(
    configuration_recall_app_request &&other177)
{
    app_id = std::move(other177.app_id);
    new_app_name = std::move(other177.new_app_name);
    __isset = std::move(other177.__isset);
}
configuration_recall_app_request &configuration_recall_app_request::
operator=(const configuration_recall_app_request &other178)
{
    app_id = other178.app_id;
    new_app_name = other178.new_app_name;
    __isset = other178.__isset;
    return *this;
}
configuration_recall_app_request &configuration_recall_app_request::
operator=(configuration_recall_app_request &&other179)
{
    app_id = std::move(other179.app_id);
    new_app_name = std::move(other179.new_app_name);
    __isset = std::move(other179.__isset);
    return *this;
}
void configuration_recall_app_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_recall_app_request(";
    out << "app_id=" << to_string(app_id);
    out << ", "
        << "new_app_name=" << to_string(new_app_name);
    out << ")";
}

configuration_create_app_response::~configuration_create_app_response() throw() {}

void configuration_create_app_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void configuration_create_app_response::__set_appid(const int32_t val) { this->appid = val; }

uint32_t configuration_create_app_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->appid);
                this->__isset.appid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_create_app_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_create_app_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("appid", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->appid);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_create_app_response &a, configuration_create_app_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.appid, b.appid);
    swap(a.__isset, b.__isset);
}

configuration_create_app_response::configuration_create_app_response(
    const configuration_create_app_response &other180)
{
    err = other180.err;
    appid = other180.appid;
    __isset = other180.__isset;
}
configuration_create_app_response::configuration_create_app_response(
    configuration_create_app_response &&other181)
{
    err = std::move(other181.err);
    appid = std::move(other181.appid);
    __isset = std::move(other181.__isset);
}
configuration_create_app_response &configuration_create_app_response::
operator=(const configuration_create_app_response &other182)
{
    err = other182.err;
    appid = other182.appid;
    __isset = other182.__isset;
    return *this;
}
configuration_create_app_response &configuration_create_app_response::
operator=(configuration_create_app_response &&other183)
{
    err = std::move(other183.err);
    appid = std::move(other183.appid);
    __isset = std::move(other183.__isset);
    return *this;
}
void configuration_create_app_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_create_app_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "appid=" << to_string(appid);
    out << ")";
}

configuration_meta_control_request::~configuration_meta_control_request() throw() {}

void configuration_meta_control_request::__set_level(const meta_function_level::type val)
{
    this->level = val;
}

uint32_t configuration_meta_control_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast184;
                xfer += iprot->readI32(ecast184);
                this->level = (meta_function_level::type)ecast184;
                this->__isset.level = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_meta_control_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_meta_control_request");

    xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->level);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_meta_control_request &a, configuration_meta_control_request &b)
{
    using ::std::swap;
    swap(a.level, b.level);
    swap(a.__isset, b.__isset);
}

configuration_meta_control_request::configuration_meta_control_request(
    const configuration_meta_control_request &other185)
{
    level = other185.level;
    __isset = other185.__isset;
}
configuration_meta_control_request::configuration_meta_control_request(
    configuration_meta_control_request &&other186)
{
    level = std::move(other186.level);
    __isset = std::move(other186.__isset);
}
configuration_meta_control_request &configuration_meta_control_request::
operator=(const configuration_meta_control_request &other187)
{
    level = other187.level;
    __isset = other187.__isset;
    return *this;
}
configuration_meta_control_request &configuration_meta_control_request::
operator=(configuration_meta_control_request &&other188)
{
    level = std::move(other188.level);
    __isset = std::move(other188.__isset);
    return *this;
}
void configuration_meta_control_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_meta_control_request(";
    out << "level=" << to_string(level);
    out << ")";
}

configuration_meta_control_response::~configuration_meta_control_response() throw() {}

void configuration_meta_control_response::__set_err(const ::dsn::error_code &val)
{
    this->err = val;
}

void configuration_meta_control_response::__set_old_level(const meta_function_level::type val)
{
    this->old_level = val;
}

uint32_t configuration_meta_control_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast189;
                xfer += iprot->readI32(ecast189);
                this->old_level = (meta_function_level::type)ecast189;
                this->__isset.old_level = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_meta_control_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_meta_control_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("old_level", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->old_level);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_meta_control_response &a, configuration_meta_control_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.old_level, b.old_level);
    swap(a.__isset, b.__isset);
}

configuration_meta_control_response::configuration_meta_control_response(
    const configuration_meta_control_response &other190)
{
    err = other190.err;
    old_level = other190.old_level;
    __isset = other190.__isset;
}
configuration_meta_control_response::configuration_meta_control_response(
    configuration_meta_control_response &&other191)
{
    err = std::move(other191.err);
    old_level = std::move(other191.old_level);
    __isset = std::move(other191.__isset);
}
configuration_meta_control_response &configuration_meta_control_response::
operator=(const configuration_meta_control_response &other192)
{
    err = other192.err;
    old_level = other192.old_level;
    __isset = other192.__isset;
    return *this;
}
configuration_meta_control_response &configuration_meta_control_response::
operator=(configuration_meta_control_response &&other193)
{
    err = std::move(other193.err);
    old_level = std::move(other193.old_level);
    __isset = std::move(other193.__isset);
    return *this;
}
void configuration_meta_control_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_meta_control_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "old_level=" << to_string(old_level);
    out << ")";
}

configuration_proposal_action::~configuration_proposal_action() throw() {}

void configuration_proposal_action::__set_target(const ::dsn::rpc_address &val)
{
    this->target = val;
}

void configuration_proposal_action::__set_node(const ::dsn::rpc_address &val) { this->node = val; }

void configuration_proposal_action::__set_type(const config_type::type val) { this->type = val; }

uint32_t configuration_proposal_action::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->target.read(iprot);
                this->__isset.target = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->node.read(iprot);
                this->__isset.node = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast194;
                xfer += iprot->readI32(ecast194);
                this->type = (config_type::type)ecast194;
                this->__isset.type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_proposal_action::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_proposal_action");

    xfer += oprot->writeFieldBegin("target", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->target.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->node.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_proposal_action &a, configuration_proposal_action &b)
{
    using ::std::swap;
    swap(a.target, b.target);
    swap(a.node, b.node);
    swap(a.type, b.type);
    swap(a.__isset, b.__isset);
}

configuration_proposal_action::configuration_proposal_action(
    const configuration_proposal_action &other195)
{
    target = other195.target;
    node = other195.node;
    type = other195.type;
    __isset = other195.__isset;
}
configuration_proposal_action::configuration_proposal_action(
    configuration_proposal_action &&other196)
{
    target = std::move(other196.target);
    node = std::move(other196.node);
    type = std::move(other196.type);
    __isset = std::move(other196.__isset);
}
configuration_proposal_action &configuration_proposal_action::
operator=(const configuration_proposal_action &other197)
{
    target = other197.target;
    node = other197.node;
    type = other197.type;
    __isset = other197.__isset;
    return *this;
}
configuration_proposal_action &configuration_proposal_action::
operator=(configuration_proposal_action &&other198)
{
    target = std::move(other198.target);
    node = std::move(other198.node);
    type = std::move(other198.type);
    __isset = std::move(other198.__isset);
    return *this;
}
void configuration_proposal_action::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_proposal_action(";
    out << "target=" << to_string(target);
    out << ", "
        << "node=" << to_string(node);
    out << ", "
        << "type=" << to_string(type);
    out << ")";
}

configuration_balancer_request::~configuration_balancer_request() throw() {}

void configuration_balancer_request::__set_gpid(const ::dsn::gpid &val) { this->gpid = val; }

void configuration_balancer_request::__set_action_list(
    const std::vector<configuration_proposal_action> &val)
{
    this->action_list = val;
}

void configuration_balancer_request::__set_force(const bool val)
{
    this->force = val;
    __isset.force = true;
}

void configuration_balancer_request::__set_balance_type(const balancer_request_type::type val)
{
    this->balance_type = val;
    __isset.balance_type = true;
}

uint32_t configuration_balancer_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->gpid.read(iprot);
                this->__isset.gpid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->action_list.clear();
                    uint32_t _size199;
                    ::apache::thrift::protocol::TType _etype202;
                    xfer += iprot->readListBegin(_etype202, _size199);
                    this->action_list.resize(_size199);
                    uint32_t _i203;
                    for (_i203 = 0; _i203 < _size199; ++_i203) {
                        xfer += this->action_list[_i203].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.action_list = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->force);
                this->__isset.force = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast204;
                xfer += iprot->readI32(ecast204);
                this->balance_type = (balancer_request_type::type)ecast204;
                this->__isset.balance_type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_balancer_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_balancer_request");

    xfer += oprot->writeFieldBegin("gpid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->gpid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("action_list", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->action_list.size()));
        std::vector<configuration_proposal_action>::const_iterator _iter205;
        for (_iter205 = this->action_list.begin(); _iter205 != this->action_list.end();
             ++_iter205) {
            xfer += (*_iter205).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    if (this->__isset.force) {
        xfer += oprot->writeFieldBegin("force", ::apache::thrift::protocol::T_BOOL, 3);
        xfer += oprot->writeBool(this->force);
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.balance_type) {
        xfer += oprot->writeFieldBegin("balance_type", ::apache::thrift::protocol::T_I32, 4);
        xfer += oprot->writeI32((int32_t)this->balance_type);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_balancer_request &a, configuration_balancer_request &b)
{
    using ::std::swap;
    swap(a.gpid, b.gpid);
    swap(a.action_list, b.action_list);
    swap(a.force, b.force);
    swap(a.balance_type, b.balance_type);
    swap(a.__isset, b.__isset);
}

configuration_balancer_request::configuration_balancer_request(
    const configuration_balancer_request &other206)
{
    gpid = other206.gpid;
    action_list = other206.action_list;
    force = other206.force;
    balance_type = other206.balance_type;
    __isset = other206.__isset;
}
configuration_balancer_request::configuration_balancer_request(
    configuration_balancer_request &&other207)
{
    gpid = std::move(other207.gpid);
    action_list = std::move(other207.action_list);
    force = std::move(other207.force);
    balance_type = std::move(other207.balance_type);
    __isset = std::move(other207.__isset);
}
configuration_balancer_request &configuration_balancer_request::
operator=(const configuration_balancer_request &other208)
{
    gpid = other208.gpid;
    action_list = other208.action_list;
    force = other208.force;
    balance_type = other208.balance_type;
    __isset = other208.__isset;
    return *this;
}
configuration_balancer_request &configuration_balancer_request::
operator=(configuration_balancer_request &&other209)
{
    gpid = std::move(other209.gpid);
    action_list = std::move(other209.action_list);
    force = std::move(other209.force);
    balance_type = std::move(other209.balance_type);
    __isset = std::move(other209.__isset);
    return *this;
}
void configuration_balancer_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_balancer_request(";
    out << "gpid=" << to_string(gpid);
    out << ", "
        << "action_list=" << to_string(action_list);
    out << ", "
        << "force=";
    (__isset.force ? (out << to_string(force)) : (out << "<null>"));
    out << ", "
        << "balance_type=";
    (__isset.balance_type ? (out << to_string(balance_type)) : (out << "<null>"));
    out << ")";
}

configuration_balancer_response::~configuration_balancer_response() throw() {}

void configuration_balancer_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

uint32_t configuration_balancer_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_balancer_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_balancer_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_balancer_response &a, configuration_balancer_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.__isset, b.__isset);
}

configuration_balancer_response::configuration_balancer_response(
    const configuration_balancer_response &other210)
{
    err = other210.err;
    __isset = other210.__isset;
}
configuration_balancer_response::configuration_balancer_response(
    configuration_balancer_response &&other211)
{
    err = std::move(other211.err);
    __isset = std::move(other211.__isset);
}
configuration_balancer_response &configuration_balancer_response::
operator=(const configuration_balancer_response &other212)
{
    err = other212.err;
    __isset = other212.__isset;
    return *this;
}
configuration_balancer_response &configuration_balancer_response::
operator=(configuration_balancer_response &&other213)
{
    err = std::move(other213.err);
    __isset = std::move(other213.__isset);
    return *this;
}
void configuration_balancer_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_balancer_response(";
    out << "err=" << to_string(err);
    out << ")";
}

configuration_drop_app_response::~configuration_drop_app_response() throw() {}

void configuration_drop_app_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

uint32_t configuration_drop_app_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_drop_app_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_drop_app_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_drop_app_response &a, configuration_drop_app_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.__isset, b.__isset);
}

configuration_drop_app_response::configuration_drop_app_response(
    const configuration_drop_app_response &other214)
{
    err = other214.err;
    __isset = other214.__isset;
}
configuration_drop_app_response::configuration_drop_app_response(
    configuration_drop_app_response &&other215)
{
    err = std::move(other215.err);
    __isset = std::move(other215.__isset);
}
configuration_drop_app_response &configuration_drop_app_response::
operator=(const configuration_drop_app_response &other216)
{
    err = other216.err;
    __isset = other216.__isset;
    return *this;
}
configuration_drop_app_response &configuration_drop_app_response::
operator=(configuration_drop_app_response &&other217)
{
    err = std::move(other217.err);
    __isset = std::move(other217.__isset);
    return *this;
}
void configuration_drop_app_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_drop_app_response(";
    out << "err=" << to_string(err);
    out << ")";
}

configuration_list_apps_response::~configuration_list_apps_response() throw() {}

void configuration_list_apps_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void configuration_list_apps_response::__set_infos(const std::vector<::dsn::app_info> &val)
{
    this->infos = val;
}

uint32_t configuration_list_apps_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->infos.clear();
                    uint32_t _size218;
                    ::apache::thrift::protocol::TType _etype221;
                    xfer += iprot->readListBegin(_etype221, _size218);
                    this->infos.resize(_size218);
                    uint32_t _i222;
                    for (_i222 = 0; _i222 < _size218; ++_i222) {
                        xfer += this->infos[_i222].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.infos = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_list_apps_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_list_apps_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("infos", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->infos.size()));
        std::vector<::dsn::app_info>::const_iterator _iter223;
        for (_iter223 = this->infos.begin(); _iter223 != this->infos.end(); ++_iter223) {
            xfer += (*_iter223).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_list_apps_response &a, configuration_list_apps_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.infos, b.infos);
    swap(a.__isset, b.__isset);
}

configuration_list_apps_response::configuration_list_apps_response(
    const configuration_list_apps_response &other224)
{
    err = other224.err;
    infos = other224.infos;
    __isset = other224.__isset;
}
configuration_list_apps_response::configuration_list_apps_response(
    configuration_list_apps_response &&other225)
{
    err = std::move(other225.err);
    infos = std::move(other225.infos);
    __isset = std::move(other225.__isset);
}
configuration_list_apps_response &configuration_list_apps_response::
operator=(const configuration_list_apps_response &other226)
{
    err = other226.err;
    infos = other226.infos;
    __isset = other226.__isset;
    return *this;
}
configuration_list_apps_response &configuration_list_apps_response::
operator=(configuration_list_apps_response &&other227)
{
    err = std::move(other227.err);
    infos = std::move(other227.infos);
    __isset = std::move(other227.__isset);
    return *this;
}
void configuration_list_apps_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_list_apps_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "infos=" << to_string(infos);
    out << ")";
}

configuration_list_nodes_response::~configuration_list_nodes_response() throw() {}

void configuration_list_nodes_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void configuration_list_nodes_response::__set_infos(const std::vector<node_info> &val)
{
    this->infos = val;
}

uint32_t configuration_list_nodes_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->infos.clear();
                    uint32_t _size228;
                    ::apache::thrift::protocol::TType _etype231;
                    xfer += iprot->readListBegin(_etype231, _size228);
                    this->infos.resize(_size228);
                    uint32_t _i232;
                    for (_i232 = 0; _i232 < _size228; ++_i232) {
                        xfer += this->infos[_i232].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.infos = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_list_nodes_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_list_nodes_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("infos", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->infos.size()));
        std::vector<node_info>::const_iterator _iter233;
        for (_iter233 = this->infos.begin(); _iter233 != this->infos.end(); ++_iter233) {
            xfer += (*_iter233).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_list_nodes_response &a, configuration_list_nodes_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.infos, b.infos);
    swap(a.__isset, b.__isset);
}

configuration_list_nodes_response::configuration_list_nodes_response(
    const configuration_list_nodes_response &other234)
{
    err = other234.err;
    infos = other234.infos;
    __isset = other234.__isset;
}
configuration_list_nodes_response::configuration_list_nodes_response(
    configuration_list_nodes_response &&other235)
{
    err = std::move(other235.err);
    infos = std::move(other235.infos);
    __isset = std::move(other235.__isset);
}
configuration_list_nodes_response &configuration_list_nodes_response::
operator=(const configuration_list_nodes_response &other236)
{
    err = other236.err;
    infos = other236.infos;
    __isset = other236.__isset;
    return *this;
}
configuration_list_nodes_response &configuration_list_nodes_response::
operator=(configuration_list_nodes_response &&other237)
{
    err = std::move(other237.err);
    infos = std::move(other237.infos);
    __isset = std::move(other237.__isset);
    return *this;
}
void configuration_list_nodes_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_list_nodes_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "infos=" << to_string(infos);
    out << ")";
}

configuration_cluster_info_response::~configuration_cluster_info_response() throw() {}

void configuration_cluster_info_response::__set_err(const ::dsn::error_code &val)
{
    this->err = val;
}

void configuration_cluster_info_response::__set_keys(const std::vector<std::string> &val)
{
    this->keys = val;
}

void configuration_cluster_info_response::__set_values(const std::vector<std::string> &val)
{
    this->values = val;
}

uint32_t configuration_cluster_info_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->keys.clear();
                    uint32_t _size238;
                    ::apache::thrift::protocol::TType _etype241;
                    xfer += iprot->readListBegin(_etype241, _size238);
                    this->keys.resize(_size238);
                    uint32_t _i242;
                    for (_i242 = 0; _i242 < _size238; ++_i242) {
                        xfer += iprot->readString(this->keys[_i242]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.keys = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->values.clear();
                    uint32_t _size243;
                    ::apache::thrift::protocol::TType _etype246;
                    xfer += iprot->readListBegin(_etype246, _size243);
                    this->values.resize(_size243);
                    uint32_t _i247;
                    for (_i247 = 0; _i247 < _size243; ++_i247) {
                        xfer += iprot->readString(this->values[_i247]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.values = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_cluster_info_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_cluster_info_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("keys", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING,
                                      static_cast<uint32_t>(this->keys.size()));
        std::vector<std::string>::const_iterator _iter248;
        for (_iter248 = this->keys.begin(); _iter248 != this->keys.end(); ++_iter248) {
            xfer += oprot->writeString((*_iter248));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 3);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING,
                                      static_cast<uint32_t>(this->values.size()));
        std::vector<std::string>::const_iterator _iter249;
        for (_iter249 = this->values.begin(); _iter249 != this->values.end(); ++_iter249) {
            xfer += oprot->writeString((*_iter249));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_cluster_info_response &a, configuration_cluster_info_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.keys, b.keys);
    swap(a.values, b.values);
    swap(a.__isset, b.__isset);
}

configuration_cluster_info_response::configuration_cluster_info_response(
    const configuration_cluster_info_response &other250)
{
    err = other250.err;
    keys = other250.keys;
    values = other250.values;
    __isset = other250.__isset;
}
configuration_cluster_info_response::configuration_cluster_info_response(
    configuration_cluster_info_response &&other251)
{
    err = std::move(other251.err);
    keys = std::move(other251.keys);
    values = std::move(other251.values);
    __isset = std::move(other251.__isset);
}
configuration_cluster_info_response &configuration_cluster_info_response::
operator=(const configuration_cluster_info_response &other252)
{
    err = other252.err;
    keys = other252.keys;
    values = other252.values;
    __isset = other252.__isset;
    return *this;
}
configuration_cluster_info_response &configuration_cluster_info_response::
operator=(configuration_cluster_info_response &&other253)
{
    err = std::move(other253.err);
    keys = std::move(other253.keys);
    values = std::move(other253.values);
    __isset = std::move(other253.__isset);
    return *this;
}
void configuration_cluster_info_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_cluster_info_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "keys=" << to_string(keys);
    out << ", "
        << "values=" << to_string(values);
    out << ")";
}

configuration_recall_app_response::~configuration_recall_app_response() throw() {}

void configuration_recall_app_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void configuration_recall_app_response::__set_info(const ::dsn::app_info &val) { this->info = val; }

uint32_t configuration_recall_app_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->info.read(iprot);
                this->__isset.info = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_recall_app_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_recall_app_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->info.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_recall_app_response &a, configuration_recall_app_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.info, b.info);
    swap(a.__isset, b.__isset);
}

configuration_recall_app_response::configuration_recall_app_response(
    const configuration_recall_app_response &other254)
{
    err = other254.err;
    info = other254.info;
    __isset = other254.__isset;
}
configuration_recall_app_response::configuration_recall_app_response(
    configuration_recall_app_response &&other255)
{
    err = std::move(other255.err);
    info = std::move(other255.info);
    __isset = std::move(other255.__isset);
}
configuration_recall_app_response &configuration_recall_app_response::
operator=(const configuration_recall_app_response &other256)
{
    err = other256.err;
    info = other256.info;
    __isset = other256.__isset;
    return *this;
}
configuration_recall_app_response &configuration_recall_app_response::
operator=(configuration_recall_app_response &&other257)
{
    err = std::move(other257.err);
    info = std::move(other257.info);
    __isset = std::move(other257.__isset);
    return *this;
}
void configuration_recall_app_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_recall_app_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "info=" << to_string(info);
    out << ")";
}

query_replica_decree_request::~query_replica_decree_request() throw() {}

void query_replica_decree_request::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void query_replica_decree_request::__set_node(const ::dsn::rpc_address &val) { this->node = val; }

uint32_t query_replica_decree_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->node.read(iprot);
                this->__isset.node = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t query_replica_decree_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("query_replica_decree_request");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->node.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(query_replica_decree_request &a, query_replica_decree_request &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.node, b.node);
    swap(a.__isset, b.__isset);
}

query_replica_decree_request::query_replica_decree_request(
    const query_replica_decree_request &other258)
{
    pid = other258.pid;
    node = other258.node;
    __isset = other258.__isset;
}
query_replica_decree_request::query_replica_decree_request(query_replica_decree_request &&other259)
{
    pid = std::move(other259.pid);
    node = std::move(other259.node);
    __isset = std::move(other259.__isset);
}
query_replica_decree_request &query_replica_decree_request::
operator=(const query_replica_decree_request &other260)
{
    pid = other260.pid;
    node = other260.node;
    __isset = other260.__isset;
    return *this;
}
query_replica_decree_request &query_replica_decree_request::
operator=(query_replica_decree_request &&other261)
{
    pid = std::move(other261.pid);
    node = std::move(other261.node);
    __isset = std::move(other261.__isset);
    return *this;
}
void query_replica_decree_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "query_replica_decree_request(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "node=" << to_string(node);
    out << ")";
}

query_replica_decree_response::~query_replica_decree_response() throw() {}

void query_replica_decree_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void query_replica_decree_response::__set_last_decree(const int64_t val)
{
    this->last_decree = val;
}

uint32_t query_replica_decree_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_decree);
                this->__isset.last_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t query_replica_decree_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("query_replica_decree_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("last_decree", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->last_decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(query_replica_decree_response &a, query_replica_decree_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.last_decree, b.last_decree);
    swap(a.__isset, b.__isset);
}

query_replica_decree_response::query_replica_decree_response(
    const query_replica_decree_response &other262)
{
    err = other262.err;
    last_decree = other262.last_decree;
    __isset = other262.__isset;
}
query_replica_decree_response::query_replica_decree_response(
    query_replica_decree_response &&other263)
{
    err = std::move(other263.err);
    last_decree = std::move(other263.last_decree);
    __isset = std::move(other263.__isset);
}
query_replica_decree_response &query_replica_decree_response::
operator=(const query_replica_decree_response &other264)
{
    err = other264.err;
    last_decree = other264.last_decree;
    __isset = other264.__isset;
    return *this;
}
query_replica_decree_response &query_replica_decree_response::
operator=(query_replica_decree_response &&other265)
{
    err = std::move(other265.err);
    last_decree = std::move(other265.last_decree);
    __isset = std::move(other265.__isset);
    return *this;
}
void query_replica_decree_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "query_replica_decree_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "last_decree=" << to_string(last_decree);
    out << ")";
}

replica_info::~replica_info() throw() {}

void replica_info::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void replica_info::__set_ballot(const int64_t val) { this->ballot = val; }

void replica_info::__set_status(const partition_status::type val) { this->status = val; }

void replica_info::__set_last_committed_decree(const int64_t val)
{
    this->last_committed_decree = val;
}

void replica_info::__set_last_prepared_decree(const int64_t val)
{
    this->last_prepared_decree = val;
}

void replica_info::__set_last_durable_decree(const int64_t val) { this->last_durable_decree = val; }

void replica_info::__set_app_type(const std::string &val) { this->app_type = val; }

void replica_info::__set_disk_tag(const std::string &val) { this->disk_tag = val; }

uint32_t replica_info::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->ballot);
                this->__isset.ballot = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast266;
                xfer += iprot->readI32(ecast266);
                this->status = (partition_status::type)ecast266;
                this->__isset.status = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_committed_decree);
                this->__isset.last_committed_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_prepared_decree);
                this->__isset.last_prepared_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_durable_decree);
                this->__isset.last_durable_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 7:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_type);
                this->__isset.app_type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 8:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->disk_tag);
                this->__isset.disk_tag = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t replica_info::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("replica_info");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->ballot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("last_committed_decree", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->last_committed_decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("last_prepared_decree", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->last_prepared_decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("last_durable_decree", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->last_durable_decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("app_type", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->app_type);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("disk_tag", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->disk_tag);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(replica_info &a, replica_info &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.ballot, b.ballot);
    swap(a.status, b.status);
    swap(a.last_committed_decree, b.last_committed_decree);
    swap(a.last_prepared_decree, b.last_prepared_decree);
    swap(a.last_durable_decree, b.last_durable_decree);
    swap(a.app_type, b.app_type);
    swap(a.disk_tag, b.disk_tag);
    swap(a.__isset, b.__isset);
}

replica_info::replica_info(const replica_info &other267)
{
    pid = other267.pid;
    ballot = other267.ballot;
    status = other267.status;
    last_committed_decree = other267.last_committed_decree;
    last_prepared_decree = other267.last_prepared_decree;
    last_durable_decree = other267.last_durable_decree;
    app_type = other267.app_type;
    disk_tag = other267.disk_tag;
    __isset = other267.__isset;
}
replica_info::replica_info(replica_info &&other268)
{
    pid = std::move(other268.pid);
    ballot = std::move(other268.ballot);
    status = std::move(other268.status);
    last_committed_decree = std::move(other268.last_committed_decree);
    last_prepared_decree = std::move(other268.last_prepared_decree);
    last_durable_decree = std::move(other268.last_durable_decree);
    app_type = std::move(other268.app_type);
    disk_tag = std::move(other268.disk_tag);
    __isset = std::move(other268.__isset);
}
replica_info &replica_info::operator=(const replica_info &other269)
{
    pid = other269.pid;
    ballot = other269.ballot;
    status = other269.status;
    last_committed_decree = other269.last_committed_decree;
    last_prepared_decree = other269.last_prepared_decree;
    last_durable_decree = other269.last_durable_decree;
    app_type = other269.app_type;
    disk_tag = other269.disk_tag;
    __isset = other269.__isset;
    return *this;
}
replica_info &replica_info::operator=(replica_info &&other270)
{
    pid = std::move(other270.pid);
    ballot = std::move(other270.ballot);
    status = std::move(other270.status);
    last_committed_decree = std::move(other270.last_committed_decree);
    last_prepared_decree = std::move(other270.last_prepared_decree);
    last_durable_decree = std::move(other270.last_durable_decree);
    app_type = std::move(other270.app_type);
    disk_tag = std::move(other270.disk_tag);
    __isset = std::move(other270.__isset);
    return *this;
}
void replica_info::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "replica_info(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "ballot=" << to_string(ballot);
    out << ", "
        << "status=" << to_string(status);
    out << ", "
        << "last_committed_decree=" << to_string(last_committed_decree);
    out << ", "
        << "last_prepared_decree=" << to_string(last_prepared_decree);
    out << ", "
        << "last_durable_decree=" << to_string(last_durable_decree);
    out << ", "
        << "app_type=" << to_string(app_type);
    out << ", "
        << "disk_tag=" << to_string(disk_tag);
    out << ")";
}

query_replica_info_request::~query_replica_info_request() throw() {}

void query_replica_info_request::__set_node(const ::dsn::rpc_address &val) { this->node = val; }

uint32_t query_replica_info_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->node.read(iprot);
                this->__isset.node = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t query_replica_info_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("query_replica_info_request");

    xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->node.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(query_replica_info_request &a, query_replica_info_request &b)
{
    using ::std::swap;
    swap(a.node, b.node);
    swap(a.__isset, b.__isset);
}

query_replica_info_request::query_replica_info_request(const query_replica_info_request &other271)
{
    node = other271.node;
    __isset = other271.__isset;
}
query_replica_info_request::query_replica_info_request(query_replica_info_request &&other272)
{
    node = std::move(other272.node);
    __isset = std::move(other272.__isset);
}
query_replica_info_request &query_replica_info_request::
operator=(const query_replica_info_request &other273)
{
    node = other273.node;
    __isset = other273.__isset;
    return *this;
}
query_replica_info_request &query_replica_info_request::
operator=(query_replica_info_request &&other274)
{
    node = std::move(other274.node);
    __isset = std::move(other274.__isset);
    return *this;
}
void query_replica_info_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "query_replica_info_request(";
    out << "node=" << to_string(node);
    out << ")";
}

query_replica_info_response::~query_replica_info_response() throw() {}

void query_replica_info_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void query_replica_info_response::__set_replicas(const std::vector<replica_info> &val)
{
    this->replicas = val;
}

uint32_t query_replica_info_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->replicas.clear();
                    uint32_t _size275;
                    ::apache::thrift::protocol::TType _etype278;
                    xfer += iprot->readListBegin(_etype278, _size275);
                    this->replicas.resize(_size275);
                    uint32_t _i279;
                    for (_i279 = 0; _i279 < _size275; ++_i279) {
                        xfer += this->replicas[_i279].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.replicas = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t query_replica_info_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("query_replica_info_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("replicas", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->replicas.size()));
        std::vector<replica_info>::const_iterator _iter280;
        for (_iter280 = this->replicas.begin(); _iter280 != this->replicas.end(); ++_iter280) {
            xfer += (*_iter280).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(query_replica_info_response &a, query_replica_info_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.replicas, b.replicas);
    swap(a.__isset, b.__isset);
}

query_replica_info_response::query_replica_info_response(
    const query_replica_info_response &other281)
{
    err = other281.err;
    replicas = other281.replicas;
    __isset = other281.__isset;
}
query_replica_info_response::query_replica_info_response(query_replica_info_response &&other282)
{
    err = std::move(other282.err);
    replicas = std::move(other282.replicas);
    __isset = std::move(other282.__isset);
}
query_replica_info_response &query_replica_info_response::
operator=(const query_replica_info_response &other283)
{
    err = other283.err;
    replicas = other283.replicas;
    __isset = other283.__isset;
    return *this;
}
query_replica_info_response &query_replica_info_response::
operator=(query_replica_info_response &&other284)
{
    err = std::move(other284.err);
    replicas = std::move(other284.replicas);
    __isset = std::move(other284.__isset);
    return *this;
}
void query_replica_info_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "query_replica_info_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "replicas=" << to_string(replicas);
    out << ")";
}

disk_info::~disk_info() throw() {}

void disk_info::__set_tag(const std::string &val) { this->tag = val; }

void disk_info::__set_full_dir(const std::string &val) { this->full_dir = val; }

void disk_info::__set_disk_capacity_mb(const int64_t val) { this->disk_capacity_mb = val; }

void disk_info::__set_disk_available_mb(const int64_t val) { this->disk_available_mb = val; }

void disk_info::__set_holding_primary_replica_counts(const std::map<int32_t, int32_t> &val)
{
    this->holding_primary_replica_counts = val;
}

void disk_info::__set_holding_secondary_replica_counts(const std::map<int32_t, int32_t> &val)
{
    this->holding_secondary_replica_counts = val;
}

uint32_t disk_info::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->tag);
                this->__isset.tag = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->full_dir);
                this->__isset.full_dir = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->disk_capacity_mb);
                this->__isset.disk_capacity_mb = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->disk_available_mb);
                this->__isset.disk_available_mb = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->holding_primary_replica_counts.clear();
                    uint32_t _size285;
                    ::apache::thrift::protocol::TType _ktype286;
                    ::apache::thrift::protocol::TType _vtype287;
                    xfer += iprot->readMapBegin(_ktype286, _vtype287, _size285);
                    uint32_t _i289;
                    for (_i289 = 0; _i289 < _size285; ++_i289) {
                        int32_t _key290;
                        xfer += iprot->readI32(_key290);
                        int32_t &_val291 = this->holding_primary_replica_counts[_key290];
                        xfer += iprot->readI32(_val291);
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.holding_primary_replica_counts = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->holding_secondary_replica_counts.clear();
                    uint32_t _size292;
                    ::apache::thrift::protocol::TType _ktype293;
                    ::apache::thrift::protocol::TType _vtype294;
                    xfer += iprot->readMapBegin(_ktype293, _vtype294, _size292);
                    uint32_t _i296;
                    for (_i296 = 0; _i296 < _size292; ++_i296) {
                        int32_t _key297;
                        xfer += iprot->readI32(_key297);
                        int32_t &_val298 = this->holding_secondary_replica_counts[_key297];
                        xfer += iprot->readI32(_val298);
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.holding_secondary_replica_counts = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t disk_info::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("disk_info");

    xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->tag);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("full_dir", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->full_dir);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("disk_capacity_mb", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->disk_capacity_mb);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("disk_available_mb", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->disk_available_mb);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "holding_primary_replica_counts", ::apache::thrift::protocol::T_MAP, 5);
    {
        xfer += oprot->writeMapBegin(
            ::apache::thrift::protocol::T_I32,
            ::apache::thrift::protocol::T_I32,
            static_cast<uint32_t>(this->holding_primary_replica_counts.size()));
        std::map<int32_t, int32_t>::const_iterator _iter299;
        for (_iter299 = this->holding_primary_replica_counts.begin();
             _iter299 != this->holding_primary_replica_counts.end();
             ++_iter299) {
            xfer += oprot->writeI32(_iter299->first);
            xfer += oprot->writeI32(_iter299->second);
        }
        xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "holding_secondary_replica_counts", ::apache::thrift::protocol::T_MAP, 6);
    {
        xfer += oprot->writeMapBegin(
            ::apache::thrift::protocol::T_I32,
            ::apache::thrift::protocol::T_I32,
            static_cast<uint32_t>(this->holding_secondary_replica_counts.size()));
        std::map<int32_t, int32_t>::const_iterator _iter300;
        for (_iter300 = this->holding_secondary_replica_counts.begin();
             _iter300 != this->holding_secondary_replica_counts.end();
             ++_iter300) {
            xfer += oprot->writeI32(_iter300->first);
            xfer += oprot->writeI32(_iter300->second);
        }
        xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(disk_info &a, disk_info &b)
{
    using ::std::swap;
    swap(a.tag, b.tag);
    swap(a.full_dir, b.full_dir);
    swap(a.disk_capacity_mb, b.disk_capacity_mb);
    swap(a.disk_available_mb, b.disk_available_mb);
    swap(a.holding_primary_replica_counts, b.holding_primary_replica_counts);
    swap(a.holding_secondary_replica_counts, b.holding_secondary_replica_counts);
    swap(a.__isset, b.__isset);
}

disk_info::disk_info(const disk_info &other301)
{
    tag = other301.tag;
    full_dir = other301.full_dir;
    disk_capacity_mb = other301.disk_capacity_mb;
    disk_available_mb = other301.disk_available_mb;
    holding_primary_replica_counts = other301.holding_primary_replica_counts;
    holding_secondary_replica_counts = other301.holding_secondary_replica_counts;
    __isset = other301.__isset;
}
disk_info::disk_info(disk_info &&other302)
{
    tag = std::move(other302.tag);
    full_dir = std::move(other302.full_dir);
    disk_capacity_mb = std::move(other302.disk_capacity_mb);
    disk_available_mb = std::move(other302.disk_available_mb);
    holding_primary_replica_counts = std::move(other302.holding_primary_replica_counts);
    holding_secondary_replica_counts = std::move(other302.holding_secondary_replica_counts);
    __isset = std::move(other302.__isset);
}
disk_info &disk_info::operator=(const disk_info &other303)
{
    tag = other303.tag;
    full_dir = other303.full_dir;
    disk_capacity_mb = other303.disk_capacity_mb;
    disk_available_mb = other303.disk_available_mb;
    holding_primary_replica_counts = other303.holding_primary_replica_counts;
    holding_secondary_replica_counts = other303.holding_secondary_replica_counts;
    __isset = other303.__isset;
    return *this;
}
disk_info &disk_info::operator=(disk_info &&other304)
{
    tag = std::move(other304.tag);
    full_dir = std::move(other304.full_dir);
    disk_capacity_mb = std::move(other304.disk_capacity_mb);
    disk_available_mb = std::move(other304.disk_available_mb);
    holding_primary_replica_counts = std::move(other304.holding_primary_replica_counts);
    holding_secondary_replica_counts = std::move(other304.holding_secondary_replica_counts);
    __isset = std::move(other304.__isset);
    return *this;
}
void disk_info::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "disk_info(";
    out << "tag=" << to_string(tag);
    out << ", "
        << "full_dir=" << to_string(full_dir);
    out << ", "
        << "disk_capacity_mb=" << to_string(disk_capacity_mb);
    out << ", "
        << "disk_available_mb=" << to_string(disk_available_mb);
    out << ", "
        << "holding_primary_replica_counts=" << to_string(holding_primary_replica_counts);
    out << ", "
        << "holding_secondary_replica_counts=" << to_string(holding_secondary_replica_counts);
    out << ")";
}

query_disk_info_request::~query_disk_info_request() throw() {}

void query_disk_info_request::__set_node(const ::dsn::rpc_address &val) { this->node = val; }

void query_disk_info_request::__set_app_name(const std::string &val) { this->app_name = val; }

uint32_t query_disk_info_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->node.read(iprot);
                this->__isset.node = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t query_disk_info_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("query_disk_info_request");

    xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->node.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(query_disk_info_request &a, query_disk_info_request &b)
{
    using ::std::swap;
    swap(a.node, b.node);
    swap(a.app_name, b.app_name);
    swap(a.__isset, b.__isset);
}

query_disk_info_request::query_disk_info_request(const query_disk_info_request &other305)
{
    node = other305.node;
    app_name = other305.app_name;
    __isset = other305.__isset;
}
query_disk_info_request::query_disk_info_request(query_disk_info_request &&other306)
{
    node = std::move(other306.node);
    app_name = std::move(other306.app_name);
    __isset = std::move(other306.__isset);
}
query_disk_info_request &query_disk_info_request::operator=(const query_disk_info_request &other307)
{
    node = other307.node;
    app_name = other307.app_name;
    __isset = other307.__isset;
    return *this;
}
query_disk_info_request &query_disk_info_request::operator=(query_disk_info_request &&other308)
{
    node = std::move(other308.node);
    app_name = std::move(other308.app_name);
    __isset = std::move(other308.__isset);
    return *this;
}
void query_disk_info_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "query_disk_info_request(";
    out << "node=" << to_string(node);
    out << ", "
        << "app_name=" << to_string(app_name);
    out << ")";
}

query_disk_info_response::~query_disk_info_response() throw() {}

void query_disk_info_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void query_disk_info_response::__set_total_capacity_mb(const int64_t val)
{
    this->total_capacity_mb = val;
}

void query_disk_info_response::__set_total_available_mb(const int64_t val)
{
    this->total_available_mb = val;
}

void query_disk_info_response::__set_disk_infos(const std::vector<disk_info> &val)
{
    this->disk_infos = val;
}

uint32_t query_disk_info_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->total_capacity_mb);
                this->__isset.total_capacity_mb = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->total_available_mb);
                this->__isset.total_available_mb = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->disk_infos.clear();
                    uint32_t _size309;
                    ::apache::thrift::protocol::TType _etype312;
                    xfer += iprot->readListBegin(_etype312, _size309);
                    this->disk_infos.resize(_size309);
                    uint32_t _i313;
                    for (_i313 = 0; _i313 < _size309; ++_i313) {
                        xfer += this->disk_infos[_i313].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.disk_infos = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t query_disk_info_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("query_disk_info_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("total_capacity_mb", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->total_capacity_mb);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("total_available_mb", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->total_available_mb);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("disk_infos", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->disk_infos.size()));
        std::vector<disk_info>::const_iterator _iter314;
        for (_iter314 = this->disk_infos.begin(); _iter314 != this->disk_infos.end(); ++_iter314) {
            xfer += (*_iter314).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(query_disk_info_response &a, query_disk_info_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.total_capacity_mb, b.total_capacity_mb);
    swap(a.total_available_mb, b.total_available_mb);
    swap(a.disk_infos, b.disk_infos);
    swap(a.__isset, b.__isset);
}

query_disk_info_response::query_disk_info_response(const query_disk_info_response &other315)
{
    err = other315.err;
    total_capacity_mb = other315.total_capacity_mb;
    total_available_mb = other315.total_available_mb;
    disk_infos = other315.disk_infos;
    __isset = other315.__isset;
}
query_disk_info_response::query_disk_info_response(query_disk_info_response &&other316)
{
    err = std::move(other316.err);
    total_capacity_mb = std::move(other316.total_capacity_mb);
    total_available_mb = std::move(other316.total_available_mb);
    disk_infos = std::move(other316.disk_infos);
    __isset = std::move(other316.__isset);
}
query_disk_info_response &query_disk_info_response::
operator=(const query_disk_info_response &other317)
{
    err = other317.err;
    total_capacity_mb = other317.total_capacity_mb;
    total_available_mb = other317.total_available_mb;
    disk_infos = other317.disk_infos;
    __isset = other317.__isset;
    return *this;
}
query_disk_info_response &query_disk_info_response::operator=(query_disk_info_response &&other318)
{
    err = std::move(other318.err);
    total_capacity_mb = std::move(other318.total_capacity_mb);
    total_available_mb = std::move(other318.total_available_mb);
    disk_infos = std::move(other318.disk_infos);
    __isset = std::move(other318.__isset);
    return *this;
}
void query_disk_info_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "query_disk_info_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "total_capacity_mb=" << to_string(total_capacity_mb);
    out << ", "
        << "total_available_mb=" << to_string(total_available_mb);
    out << ", "
        << "disk_infos=" << to_string(disk_infos);
    out << ")";
}

query_app_info_request::~query_app_info_request() throw() {}

void query_app_info_request::__set_meta_server(const ::dsn::rpc_address &val)
{
    this->meta_server = val;
}

uint32_t query_app_info_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->meta_server.read(iprot);
                this->__isset.meta_server = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t query_app_info_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("query_app_info_request");

    xfer += oprot->writeFieldBegin("meta_server", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->meta_server.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(query_app_info_request &a, query_app_info_request &b)
{
    using ::std::swap;
    swap(a.meta_server, b.meta_server);
    swap(a.__isset, b.__isset);
}

query_app_info_request::query_app_info_request(const query_app_info_request &other319)
{
    meta_server = other319.meta_server;
    __isset = other319.__isset;
}
query_app_info_request::query_app_info_request(query_app_info_request &&other320)
{
    meta_server = std::move(other320.meta_server);
    __isset = std::move(other320.__isset);
}
query_app_info_request &query_app_info_request::operator=(const query_app_info_request &other321)
{
    meta_server = other321.meta_server;
    __isset = other321.__isset;
    return *this;
}
query_app_info_request &query_app_info_request::operator=(query_app_info_request &&other322)
{
    meta_server = std::move(other322.meta_server);
    __isset = std::move(other322.__isset);
    return *this;
}
void query_app_info_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "query_app_info_request(";
    out << "meta_server=" << to_string(meta_server);
    out << ")";
}

query_app_info_response::~query_app_info_response() throw() {}

void query_app_info_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void query_app_info_response::__set_apps(const std::vector<::dsn::app_info> &val)
{
    this->apps = val;
}

uint32_t query_app_info_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->apps.clear();
                    uint32_t _size323;
                    ::apache::thrift::protocol::TType _etype326;
                    xfer += iprot->readListBegin(_etype326, _size323);
                    this->apps.resize(_size323);
                    uint32_t _i327;
                    for (_i327 = 0; _i327 < _size323; ++_i327) {
                        xfer += this->apps[_i327].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.apps = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t query_app_info_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("query_app_info_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("apps", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->apps.size()));
        std::vector<::dsn::app_info>::const_iterator _iter328;
        for (_iter328 = this->apps.begin(); _iter328 != this->apps.end(); ++_iter328) {
            xfer += (*_iter328).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(query_app_info_response &a, query_app_info_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.apps, b.apps);
    swap(a.__isset, b.__isset);
}

query_app_info_response::query_app_info_response(const query_app_info_response &other329)
{
    err = other329.err;
    apps = other329.apps;
    __isset = other329.__isset;
}
query_app_info_response::query_app_info_response(query_app_info_response &&other330)
{
    err = std::move(other330.err);
    apps = std::move(other330.apps);
    __isset = std::move(other330.__isset);
}
query_app_info_response &query_app_info_response::operator=(const query_app_info_response &other331)
{
    err = other331.err;
    apps = other331.apps;
    __isset = other331.__isset;
    return *this;
}
query_app_info_response &query_app_info_response::operator=(query_app_info_response &&other332)
{
    err = std::move(other332.err);
    apps = std::move(other332.apps);
    __isset = std::move(other332.__isset);
    return *this;
}
void query_app_info_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "query_app_info_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "apps=" << to_string(apps);
    out << ")";
}

configuration_recovery_request::~configuration_recovery_request() throw() {}

void configuration_recovery_request::__set_recovery_set(const std::vector<::dsn::rpc_address> &val)
{
    this->recovery_set = val;
}

void configuration_recovery_request::__set_skip_bad_nodes(const bool val)
{
    this->skip_bad_nodes = val;
}

void configuration_recovery_request::__set_skip_lost_partitions(const bool val)
{
    this->skip_lost_partitions = val;
}

uint32_t configuration_recovery_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->recovery_set.clear();
                    uint32_t _size333;
                    ::apache::thrift::protocol::TType _etype336;
                    xfer += iprot->readListBegin(_etype336, _size333);
                    this->recovery_set.resize(_size333);
                    uint32_t _i337;
                    for (_i337 = 0; _i337 < _size333; ++_i337) {
                        xfer += this->recovery_set[_i337].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.recovery_set = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->skip_bad_nodes);
                this->__isset.skip_bad_nodes = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->skip_lost_partitions);
                this->__isset.skip_lost_partitions = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_recovery_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_recovery_request");

    xfer += oprot->writeFieldBegin("recovery_set", ::apache::thrift::protocol::T_LIST, 1);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->recovery_set.size()));
        std::vector<::dsn::rpc_address>::const_iterator _iter338;
        for (_iter338 = this->recovery_set.begin(); _iter338 != this->recovery_set.end();
             ++_iter338) {
            xfer += (*_iter338).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("skip_bad_nodes", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->skip_bad_nodes);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("skip_lost_partitions", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->skip_lost_partitions);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_recovery_request &a, configuration_recovery_request &b)
{
    using ::std::swap;
    swap(a.recovery_set, b.recovery_set);
    swap(a.skip_bad_nodes, b.skip_bad_nodes);
    swap(a.skip_lost_partitions, b.skip_lost_partitions);
    swap(a.__isset, b.__isset);
}

configuration_recovery_request::configuration_recovery_request(
    const configuration_recovery_request &other339)
{
    recovery_set = other339.recovery_set;
    skip_bad_nodes = other339.skip_bad_nodes;
    skip_lost_partitions = other339.skip_lost_partitions;
    __isset = other339.__isset;
}
configuration_recovery_request::configuration_recovery_request(
    configuration_recovery_request &&other340)
{
    recovery_set = std::move(other340.recovery_set);
    skip_bad_nodes = std::move(other340.skip_bad_nodes);
    skip_lost_partitions = std::move(other340.skip_lost_partitions);
    __isset = std::move(other340.__isset);
}
configuration_recovery_request &configuration_recovery_request::
operator=(const configuration_recovery_request &other341)
{
    recovery_set = other341.recovery_set;
    skip_bad_nodes = other341.skip_bad_nodes;
    skip_lost_partitions = other341.skip_lost_partitions;
    __isset = other341.__isset;
    return *this;
}
configuration_recovery_request &configuration_recovery_request::
operator=(configuration_recovery_request &&other342)
{
    recovery_set = std::move(other342.recovery_set);
    skip_bad_nodes = std::move(other342.skip_bad_nodes);
    skip_lost_partitions = std::move(other342.skip_lost_partitions);
    __isset = std::move(other342.__isset);
    return *this;
}
void configuration_recovery_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_recovery_request(";
    out << "recovery_set=" << to_string(recovery_set);
    out << ", "
        << "skip_bad_nodes=" << to_string(skip_bad_nodes);
    out << ", "
        << "skip_lost_partitions=" << to_string(skip_lost_partitions);
    out << ")";
}

configuration_recovery_response::~configuration_recovery_response() throw() {}

void configuration_recovery_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void configuration_recovery_response::__set_hint_message(const std::string &val)
{
    this->hint_message = val;
}

uint32_t configuration_recovery_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->hint_message);
                this->__isset.hint_message = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_recovery_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_recovery_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("hint_message", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->hint_message);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_recovery_response &a, configuration_recovery_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.hint_message, b.hint_message);
    swap(a.__isset, b.__isset);
}

configuration_recovery_response::configuration_recovery_response(
    const configuration_recovery_response &other343)
{
    err = other343.err;
    hint_message = other343.hint_message;
    __isset = other343.__isset;
}
configuration_recovery_response::configuration_recovery_response(
    configuration_recovery_response &&other344)
{
    err = std::move(other344.err);
    hint_message = std::move(other344.hint_message);
    __isset = std::move(other344.__isset);
}
configuration_recovery_response &configuration_recovery_response::
operator=(const configuration_recovery_response &other345)
{
    err = other345.err;
    hint_message = other345.hint_message;
    __isset = other345.__isset;
    return *this;
}
configuration_recovery_response &configuration_recovery_response::
operator=(configuration_recovery_response &&other346)
{
    err = std::move(other346.err);
    hint_message = std::move(other346.hint_message);
    __isset = std::move(other346.__isset);
    return *this;
}
void configuration_recovery_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_recovery_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "hint_message=" << to_string(hint_message);
    out << ")";
}

policy_info::~policy_info() throw() {}

void policy_info::__set_policy_name(const std::string &val) { this->policy_name = val; }

void policy_info::__set_backup_provider_type(const std::string &val)
{
    this->backup_provider_type = val;
}

uint32_t policy_info::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->policy_name);
                this->__isset.policy_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->backup_provider_type);
                this->__isset.backup_provider_type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t policy_info::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("policy_info");

    xfer += oprot->writeFieldBegin("policy_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->policy_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("backup_provider_type", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->backup_provider_type);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(policy_info &a, policy_info &b)
{
    using ::std::swap;
    swap(a.policy_name, b.policy_name);
    swap(a.backup_provider_type, b.backup_provider_type);
    swap(a.__isset, b.__isset);
}

policy_info::policy_info(const policy_info &other347)
{
    policy_name = other347.policy_name;
    backup_provider_type = other347.backup_provider_type;
    __isset = other347.__isset;
}
policy_info::policy_info(policy_info &&other348)
{
    policy_name = std::move(other348.policy_name);
    backup_provider_type = std::move(other348.backup_provider_type);
    __isset = std::move(other348.__isset);
}
policy_info &policy_info::operator=(const policy_info &other349)
{
    policy_name = other349.policy_name;
    backup_provider_type = other349.backup_provider_type;
    __isset = other349.__isset;
    return *this;
}
policy_info &policy_info::operator=(policy_info &&other350)
{
    policy_name = std::move(other350.policy_name);
    backup_provider_type = std::move(other350.backup_provider_type);
    __isset = std::move(other350.__isset);
    return *this;
}
void policy_info::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "policy_info(";
    out << "policy_name=" << to_string(policy_name);
    out << ", "
        << "backup_provider_type=" << to_string(backup_provider_type);
    out << ")";
}

configuration_restore_request::~configuration_restore_request() throw() {}

void configuration_restore_request::__set_cluster_name(const std::string &val)
{
    this->cluster_name = val;
}

void configuration_restore_request::__set_policy_name(const std::string &val)
{
    this->policy_name = val;
}

void configuration_restore_request::__set_time_stamp(const int64_t val) { this->time_stamp = val; }

void configuration_restore_request::__set_app_name(const std::string &val) { this->app_name = val; }

void configuration_restore_request::__set_app_id(const int32_t val) { this->app_id = val; }

void configuration_restore_request::__set_new_app_name(const std::string &val)
{
    this->new_app_name = val;
}

void configuration_restore_request::__set_backup_provider_name(const std::string &val)
{
    this->backup_provider_name = val;
}

void configuration_restore_request::__set_skip_bad_partition(const bool val)
{
    this->skip_bad_partition = val;
}

uint32_t configuration_restore_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->cluster_name);
                this->__isset.cluster_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->policy_name);
                this->__isset.policy_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->time_stamp);
                this->__isset.time_stamp = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->app_id);
                this->__isset.app_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->new_app_name);
                this->__isset.new_app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 7:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->backup_provider_name);
                this->__isset.backup_provider_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 8:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->skip_bad_partition);
                this->__isset.skip_bad_partition = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_restore_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_restore_request");

    xfer += oprot->writeFieldBegin("cluster_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->cluster_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("policy_name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->policy_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("time_stamp", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->time_stamp);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("app_id", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->app_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("new_app_name", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->new_app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("backup_provider_name", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->backup_provider_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("skip_bad_partition", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->skip_bad_partition);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_restore_request &a, configuration_restore_request &b)
{
    using ::std::swap;
    swap(a.cluster_name, b.cluster_name);
    swap(a.policy_name, b.policy_name);
    swap(a.time_stamp, b.time_stamp);
    swap(a.app_name, b.app_name);
    swap(a.app_id, b.app_id);
    swap(a.new_app_name, b.new_app_name);
    swap(a.backup_provider_name, b.backup_provider_name);
    swap(a.skip_bad_partition, b.skip_bad_partition);
    swap(a.__isset, b.__isset);
}

configuration_restore_request::configuration_restore_request(
    const configuration_restore_request &other351)
{
    cluster_name = other351.cluster_name;
    policy_name = other351.policy_name;
    time_stamp = other351.time_stamp;
    app_name = other351.app_name;
    app_id = other351.app_id;
    new_app_name = other351.new_app_name;
    backup_provider_name = other351.backup_provider_name;
    skip_bad_partition = other351.skip_bad_partition;
    __isset = other351.__isset;
}
configuration_restore_request::configuration_restore_request(
    configuration_restore_request &&other352)
{
    cluster_name = std::move(other352.cluster_name);
    policy_name = std::move(other352.policy_name);
    time_stamp = std::move(other352.time_stamp);
    app_name = std::move(other352.app_name);
    app_id = std::move(other352.app_id);
    new_app_name = std::move(other352.new_app_name);
    backup_provider_name = std::move(other352.backup_provider_name);
    skip_bad_partition = std::move(other352.skip_bad_partition);
    __isset = std::move(other352.__isset);
}
configuration_restore_request &configuration_restore_request::
operator=(const configuration_restore_request &other353)
{
    cluster_name = other353.cluster_name;
    policy_name = other353.policy_name;
    time_stamp = other353.time_stamp;
    app_name = other353.app_name;
    app_id = other353.app_id;
    new_app_name = other353.new_app_name;
    backup_provider_name = other353.backup_provider_name;
    skip_bad_partition = other353.skip_bad_partition;
    __isset = other353.__isset;
    return *this;
}
configuration_restore_request &configuration_restore_request::
operator=(configuration_restore_request &&other354)
{
    cluster_name = std::move(other354.cluster_name);
    policy_name = std::move(other354.policy_name);
    time_stamp = std::move(other354.time_stamp);
    app_name = std::move(other354.app_name);
    app_id = std::move(other354.app_id);
    new_app_name = std::move(other354.new_app_name);
    backup_provider_name = std::move(other354.backup_provider_name);
    skip_bad_partition = std::move(other354.skip_bad_partition);
    __isset = std::move(other354.__isset);
    return *this;
}
void configuration_restore_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_restore_request(";
    out << "cluster_name=" << to_string(cluster_name);
    out << ", "
        << "policy_name=" << to_string(policy_name);
    out << ", "
        << "time_stamp=" << to_string(time_stamp);
    out << ", "
        << "app_name=" << to_string(app_name);
    out << ", "
        << "app_id=" << to_string(app_id);
    out << ", "
        << "new_app_name=" << to_string(new_app_name);
    out << ", "
        << "backup_provider_name=" << to_string(backup_provider_name);
    out << ", "
        << "skip_bad_partition=" << to_string(skip_bad_partition);
    out << ")";
}

backup_request::~backup_request() throw() {}

void backup_request::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void backup_request::__set_policy(const policy_info &val) { this->policy = val; }

void backup_request::__set_app_name(const std::string &val) { this->app_name = val; }

void backup_request::__set_backup_id(const int64_t val) { this->backup_id = val; }

uint32_t backup_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->policy.read(iprot);
                this->__isset.policy = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->backup_id);
                this->__isset.backup_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t backup_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("backup_request");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("policy", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->policy.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("backup_id", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->backup_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(backup_request &a, backup_request &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.policy, b.policy);
    swap(a.app_name, b.app_name);
    swap(a.backup_id, b.backup_id);
    swap(a.__isset, b.__isset);
}

backup_request::backup_request(const backup_request &other355)
{
    pid = other355.pid;
    policy = other355.policy;
    app_name = other355.app_name;
    backup_id = other355.backup_id;
    __isset = other355.__isset;
}
backup_request::backup_request(backup_request &&other356)
{
    pid = std::move(other356.pid);
    policy = std::move(other356.policy);
    app_name = std::move(other356.app_name);
    backup_id = std::move(other356.backup_id);
    __isset = std::move(other356.__isset);
}
backup_request &backup_request::operator=(const backup_request &other357)
{
    pid = other357.pid;
    policy = other357.policy;
    app_name = other357.app_name;
    backup_id = other357.backup_id;
    __isset = other357.__isset;
    return *this;
}
backup_request &backup_request::operator=(backup_request &&other358)
{
    pid = std::move(other358.pid);
    policy = std::move(other358.policy);
    app_name = std::move(other358.app_name);
    backup_id = std::move(other358.backup_id);
    __isset = std::move(other358.__isset);
    return *this;
}
void backup_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "backup_request(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "policy=" << to_string(policy);
    out << ", "
        << "app_name=" << to_string(app_name);
    out << ", "
        << "backup_id=" << to_string(backup_id);
    out << ")";
}

backup_response::~backup_response() throw() {}

void backup_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void backup_response::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void backup_response::__set_progress(const int32_t val) { this->progress = val; }

void backup_response::__set_policy_name(const std::string &val) { this->policy_name = val; }

void backup_response::__set_backup_id(const int64_t val) { this->backup_id = val; }

void backup_response::__set_checkpoint_total_size(const int64_t val)
{
    this->checkpoint_total_size = val;
}

uint32_t backup_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->progress);
                this->__isset.progress = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->policy_name);
                this->__isset.policy_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->backup_id);
                this->__isset.backup_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->checkpoint_total_size);
                this->__isset.checkpoint_total_size = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t backup_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("backup_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("progress", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->progress);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("policy_name", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->policy_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("backup_id", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->backup_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("checkpoint_total_size", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->checkpoint_total_size);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(backup_response &a, backup_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.pid, b.pid);
    swap(a.progress, b.progress);
    swap(a.policy_name, b.policy_name);
    swap(a.backup_id, b.backup_id);
    swap(a.checkpoint_total_size, b.checkpoint_total_size);
    swap(a.__isset, b.__isset);
}

backup_response::backup_response(const backup_response &other359)
{
    err = other359.err;
    pid = other359.pid;
    progress = other359.progress;
    policy_name = other359.policy_name;
    backup_id = other359.backup_id;
    checkpoint_total_size = other359.checkpoint_total_size;
    __isset = other359.__isset;
}
backup_response::backup_response(backup_response &&other360)
{
    err = std::move(other360.err);
    pid = std::move(other360.pid);
    progress = std::move(other360.progress);
    policy_name = std::move(other360.policy_name);
    backup_id = std::move(other360.backup_id);
    checkpoint_total_size = std::move(other360.checkpoint_total_size);
    __isset = std::move(other360.__isset);
}
backup_response &backup_response::operator=(const backup_response &other361)
{
    err = other361.err;
    pid = other361.pid;
    progress = other361.progress;
    policy_name = other361.policy_name;
    backup_id = other361.backup_id;
    checkpoint_total_size = other361.checkpoint_total_size;
    __isset = other361.__isset;
    return *this;
}
backup_response &backup_response::operator=(backup_response &&other362)
{
    err = std::move(other362.err);
    pid = std::move(other362.pid);
    progress = std::move(other362.progress);
    policy_name = std::move(other362.policy_name);
    backup_id = std::move(other362.backup_id);
    checkpoint_total_size = std::move(other362.checkpoint_total_size);
    __isset = std::move(other362.__isset);
    return *this;
}
void backup_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "backup_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "pid=" << to_string(pid);
    out << ", "
        << "progress=" << to_string(progress);
    out << ", "
        << "policy_name=" << to_string(policy_name);
    out << ", "
        << "backup_id=" << to_string(backup_id);
    out << ", "
        << "checkpoint_total_size=" << to_string(checkpoint_total_size);
    out << ")";
}

configuration_modify_backup_policy_request::~configuration_modify_backup_policy_request() throw() {}

void configuration_modify_backup_policy_request::__set_policy_name(const std::string &val)
{
    this->policy_name = val;
}

void configuration_modify_backup_policy_request::__set_add_appids(const std::vector<int32_t> &val)
{
    this->add_appids = val;
    __isset.add_appids = true;
}

void configuration_modify_backup_policy_request::__set_removal_appids(
    const std::vector<int32_t> &val)
{
    this->removal_appids = val;
    __isset.removal_appids = true;
}

void configuration_modify_backup_policy_request::__set_new_backup_interval_sec(const int64_t val)
{
    this->new_backup_interval_sec = val;
    __isset.new_backup_interval_sec = true;
}

void configuration_modify_backup_policy_request::__set_backup_history_count_to_keep(
    const int32_t val)
{
    this->backup_history_count_to_keep = val;
    __isset.backup_history_count_to_keep = true;
}

void configuration_modify_backup_policy_request::__set_is_disable(const bool val)
{
    this->is_disable = val;
    __isset.is_disable = true;
}

void configuration_modify_backup_policy_request::__set_start_time(const std::string &val)
{
    this->start_time = val;
    __isset.start_time = true;
}

uint32_t
configuration_modify_backup_policy_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->policy_name);
                this->__isset.policy_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->add_appids.clear();
                    uint32_t _size363;
                    ::apache::thrift::protocol::TType _etype366;
                    xfer += iprot->readListBegin(_etype366, _size363);
                    this->add_appids.resize(_size363);
                    uint32_t _i367;
                    for (_i367 = 0; _i367 < _size363; ++_i367) {
                        xfer += iprot->readI32(this->add_appids[_i367]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.add_appids = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->removal_appids.clear();
                    uint32_t _size368;
                    ::apache::thrift::protocol::TType _etype371;
                    xfer += iprot->readListBegin(_etype371, _size368);
                    this->removal_appids.resize(_size368);
                    uint32_t _i372;
                    for (_i372 = 0; _i372 < _size368; ++_i372) {
                        xfer += iprot->readI32(this->removal_appids[_i372]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.removal_appids = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->new_backup_interval_sec);
                this->__isset.new_backup_interval_sec = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->backup_history_count_to_keep);
                this->__isset.backup_history_count_to_keep = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->is_disable);
                this->__isset.is_disable = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 7:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->start_time);
                this->__isset.start_time = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_modify_backup_policy_request::write(
    ::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_modify_backup_policy_request");

    xfer += oprot->writeFieldBegin("policy_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->policy_name);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.add_appids) {
        xfer += oprot->writeFieldBegin("add_appids", ::apache::thrift::protocol::T_LIST, 2);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32,
                                          static_cast<uint32_t>(this->add_appids.size()));
            std::vector<int32_t>::const_iterator _iter373;
            for (_iter373 = this->add_appids.begin(); _iter373 != this->add_appids.end();
                 ++_iter373) {
                xfer += oprot->writeI32((*_iter373));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.removal_appids) {
        xfer += oprot->writeFieldBegin("removal_appids", ::apache::thrift::protocol::T_LIST, 3);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32,
                                          static_cast<uint32_t>(this->removal_appids.size()));
            std::vector<int32_t>::const_iterator _iter374;
            for (_iter374 = this->removal_appids.begin(); _iter374 != this->removal_appids.end();
                 ++_iter374) {
                xfer += oprot->writeI32((*_iter374));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.new_backup_interval_sec) {
        xfer +=
            oprot->writeFieldBegin("new_backup_interval_sec", ::apache::thrift::protocol::T_I64, 4);
        xfer += oprot->writeI64(this->new_backup_interval_sec);
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.backup_history_count_to_keep) {
        xfer += oprot->writeFieldBegin(
            "backup_history_count_to_keep", ::apache::thrift::protocol::T_I32, 5);
        xfer += oprot->writeI32(this->backup_history_count_to_keep);
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.is_disable) {
        xfer += oprot->writeFieldBegin("is_disable", ::apache::thrift::protocol::T_BOOL, 6);
        xfer += oprot->writeBool(this->is_disable);
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.start_time) {
        xfer += oprot->writeFieldBegin("start_time", ::apache::thrift::protocol::T_STRING, 7);
        xfer += oprot->writeString(this->start_time);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_modify_backup_policy_request &a,
          configuration_modify_backup_policy_request &b)
{
    using ::std::swap;
    swap(a.policy_name, b.policy_name);
    swap(a.add_appids, b.add_appids);
    swap(a.removal_appids, b.removal_appids);
    swap(a.new_backup_interval_sec, b.new_backup_interval_sec);
    swap(a.backup_history_count_to_keep, b.backup_history_count_to_keep);
    swap(a.is_disable, b.is_disable);
    swap(a.start_time, b.start_time);
    swap(a.__isset, b.__isset);
}

configuration_modify_backup_policy_request::configuration_modify_backup_policy_request(
    const configuration_modify_backup_policy_request &other375)
{
    policy_name = other375.policy_name;
    add_appids = other375.add_appids;
    removal_appids = other375.removal_appids;
    new_backup_interval_sec = other375.new_backup_interval_sec;
    backup_history_count_to_keep = other375.backup_history_count_to_keep;
    is_disable = other375.is_disable;
    start_time = other375.start_time;
    __isset = other375.__isset;
}
configuration_modify_backup_policy_request::configuration_modify_backup_policy_request(
    configuration_modify_backup_policy_request &&other376)
{
    policy_name = std::move(other376.policy_name);
    add_appids = std::move(other376.add_appids);
    removal_appids = std::move(other376.removal_appids);
    new_backup_interval_sec = std::move(other376.new_backup_interval_sec);
    backup_history_count_to_keep = std::move(other376.backup_history_count_to_keep);
    is_disable = std::move(other376.is_disable);
    start_time = std::move(other376.start_time);
    __isset = std::move(other376.__isset);
}
configuration_modify_backup_policy_request &configuration_modify_backup_policy_request::
operator=(const configuration_modify_backup_policy_request &other377)
{
    policy_name = other377.policy_name;
    add_appids = other377.add_appids;
    removal_appids = other377.removal_appids;
    new_backup_interval_sec = other377.new_backup_interval_sec;
    backup_history_count_to_keep = other377.backup_history_count_to_keep;
    is_disable = other377.is_disable;
    start_time = other377.start_time;
    __isset = other377.__isset;
    return *this;
}
configuration_modify_backup_policy_request &configuration_modify_backup_policy_request::
operator=(configuration_modify_backup_policy_request &&other378)
{
    policy_name = std::move(other378.policy_name);
    add_appids = std::move(other378.add_appids);
    removal_appids = std::move(other378.removal_appids);
    new_backup_interval_sec = std::move(other378.new_backup_interval_sec);
    backup_history_count_to_keep = std::move(other378.backup_history_count_to_keep);
    is_disable = std::move(other378.is_disable);
    start_time = std::move(other378.start_time);
    __isset = std::move(other378.__isset);
    return *this;
}
void configuration_modify_backup_policy_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_modify_backup_policy_request(";
    out << "policy_name=" << to_string(policy_name);
    out << ", "
        << "add_appids=";
    (__isset.add_appids ? (out << to_string(add_appids)) : (out << "<null>"));
    out << ", "
        << "removal_appids=";
    (__isset.removal_appids ? (out << to_string(removal_appids)) : (out << "<null>"));
    out << ", "
        << "new_backup_interval_sec=";
    (__isset.new_backup_interval_sec ? (out << to_string(new_backup_interval_sec))
                                     : (out << "<null>"));
    out << ", "
        << "backup_history_count_to_keep=";
    (__isset.backup_history_count_to_keep ? (out << to_string(backup_history_count_to_keep))
                                          : (out << "<null>"));
    out << ", "
        << "is_disable=";
    (__isset.is_disable ? (out << to_string(is_disable)) : (out << "<null>"));
    out << ", "
        << "start_time=";
    (__isset.start_time ? (out << to_string(start_time)) : (out << "<null>"));
    out << ")";
}

configuration_modify_backup_policy_response::~configuration_modify_backup_policy_response() throw()
{
}

void configuration_modify_backup_policy_response::__set_err(const ::dsn::error_code &val)
{
    this->err = val;
}

void configuration_modify_backup_policy_response::__set_hint_message(const std::string &val)
{
    this->hint_message = val;
}

uint32_t
configuration_modify_backup_policy_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->hint_message);
                this->__isset.hint_message = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_modify_backup_policy_response::write(
    ::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_modify_backup_policy_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("hint_message", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->hint_message);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_modify_backup_policy_response &a,
          configuration_modify_backup_policy_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.hint_message, b.hint_message);
    swap(a.__isset, b.__isset);
}

configuration_modify_backup_policy_response::configuration_modify_backup_policy_response(
    const configuration_modify_backup_policy_response &other379)
{
    err = other379.err;
    hint_message = other379.hint_message;
    __isset = other379.__isset;
}
configuration_modify_backup_policy_response::configuration_modify_backup_policy_response(
    configuration_modify_backup_policy_response &&other380)
{
    err = std::move(other380.err);
    hint_message = std::move(other380.hint_message);
    __isset = std::move(other380.__isset);
}
configuration_modify_backup_policy_response &configuration_modify_backup_policy_response::
operator=(const configuration_modify_backup_policy_response &other381)
{
    err = other381.err;
    hint_message = other381.hint_message;
    __isset = other381.__isset;
    return *this;
}
configuration_modify_backup_policy_response &configuration_modify_backup_policy_response::
operator=(configuration_modify_backup_policy_response &&other382)
{
    err = std::move(other382.err);
    hint_message = std::move(other382.hint_message);
    __isset = std::move(other382.__isset);
    return *this;
}
void configuration_modify_backup_policy_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_modify_backup_policy_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "hint_message=" << to_string(hint_message);
    out << ")";
}

configuration_add_backup_policy_request::~configuration_add_backup_policy_request() throw() {}

void configuration_add_backup_policy_request::__set_backup_provider_type(const std::string &val)
{
    this->backup_provider_type = val;
}

void configuration_add_backup_policy_request::__set_policy_name(const std::string &val)
{
    this->policy_name = val;
}

void configuration_add_backup_policy_request::__set_app_ids(const std::vector<int32_t> &val)
{
    this->app_ids = val;
}

void configuration_add_backup_policy_request::__set_backup_interval_seconds(const int64_t val)
{
    this->backup_interval_seconds = val;
}

void configuration_add_backup_policy_request::__set_backup_history_count_to_keep(const int32_t val)
{
    this->backup_history_count_to_keep = val;
}

void configuration_add_backup_policy_request::__set_start_time(const std::string &val)
{
    this->start_time = val;
}

uint32_t configuration_add_backup_policy_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->backup_provider_type);
                this->__isset.backup_provider_type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->policy_name);
                this->__isset.policy_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->app_ids.clear();
                    uint32_t _size383;
                    ::apache::thrift::protocol::TType _etype386;
                    xfer += iprot->readListBegin(_etype386, _size383);
                    this->app_ids.resize(_size383);
                    uint32_t _i387;
                    for (_i387 = 0; _i387 < _size383; ++_i387) {
                        xfer += iprot->readI32(this->app_ids[_i387]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.app_ids = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->backup_interval_seconds);
                this->__isset.backup_interval_seconds = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->backup_history_count_to_keep);
                this->__isset.backup_history_count_to_keep = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->start_time);
                this->__isset.start_time = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_add_backup_policy_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_add_backup_policy_request");

    xfer += oprot->writeFieldBegin("backup_provider_type", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->backup_provider_type);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("policy_name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->policy_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("app_ids", ::apache::thrift::protocol::T_LIST, 3);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32,
                                      static_cast<uint32_t>(this->app_ids.size()));
        std::vector<int32_t>::const_iterator _iter388;
        for (_iter388 = this->app_ids.begin(); _iter388 != this->app_ids.end(); ++_iter388) {
            xfer += oprot->writeI32((*_iter388));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("backup_interval_seconds", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->backup_interval_seconds);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "backup_history_count_to_keep", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->backup_history_count_to_keep);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("start_time", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->start_time);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_add_backup_policy_request &a, configuration_add_backup_policy_request &b)
{
    using ::std::swap;
    swap(a.backup_provider_type, b.backup_provider_type);
    swap(a.policy_name, b.policy_name);
    swap(a.app_ids, b.app_ids);
    swap(a.backup_interval_seconds, b.backup_interval_seconds);
    swap(a.backup_history_count_to_keep, b.backup_history_count_to_keep);
    swap(a.start_time, b.start_time);
    swap(a.__isset, b.__isset);
}

configuration_add_backup_policy_request::configuration_add_backup_policy_request(
    const configuration_add_backup_policy_request &other389)
{
    backup_provider_type = other389.backup_provider_type;
    policy_name = other389.policy_name;
    app_ids = other389.app_ids;
    backup_interval_seconds = other389.backup_interval_seconds;
    backup_history_count_to_keep = other389.backup_history_count_to_keep;
    start_time = other389.start_time;
    __isset = other389.__isset;
}
configuration_add_backup_policy_request::configuration_add_backup_policy_request(
    configuration_add_backup_policy_request &&other390)
{
    backup_provider_type = std::move(other390.backup_provider_type);
    policy_name = std::move(other390.policy_name);
    app_ids = std::move(other390.app_ids);
    backup_interval_seconds = std::move(other390.backup_interval_seconds);
    backup_history_count_to_keep = std::move(other390.backup_history_count_to_keep);
    start_time = std::move(other390.start_time);
    __isset = std::move(other390.__isset);
}
configuration_add_backup_policy_request &configuration_add_backup_policy_request::
operator=(const configuration_add_backup_policy_request &other391)
{
    backup_provider_type = other391.backup_provider_type;
    policy_name = other391.policy_name;
    app_ids = other391.app_ids;
    backup_interval_seconds = other391.backup_interval_seconds;
    backup_history_count_to_keep = other391.backup_history_count_to_keep;
    start_time = other391.start_time;
    __isset = other391.__isset;
    return *this;
}
configuration_add_backup_policy_request &configuration_add_backup_policy_request::
operator=(configuration_add_backup_policy_request &&other392)
{
    backup_provider_type = std::move(other392.backup_provider_type);
    policy_name = std::move(other392.policy_name);
    app_ids = std::move(other392.app_ids);
    backup_interval_seconds = std::move(other392.backup_interval_seconds);
    backup_history_count_to_keep = std::move(other392.backup_history_count_to_keep);
    start_time = std::move(other392.start_time);
    __isset = std::move(other392.__isset);
    return *this;
}
void configuration_add_backup_policy_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_add_backup_policy_request(";
    out << "backup_provider_type=" << to_string(backup_provider_type);
    out << ", "
        << "policy_name=" << to_string(policy_name);
    out << ", "
        << "app_ids=" << to_string(app_ids);
    out << ", "
        << "backup_interval_seconds=" << to_string(backup_interval_seconds);
    out << ", "
        << "backup_history_count_to_keep=" << to_string(backup_history_count_to_keep);
    out << ", "
        << "start_time=" << to_string(start_time);
    out << ")";
}

configuration_add_backup_policy_response::~configuration_add_backup_policy_response() throw() {}

void configuration_add_backup_policy_response::__set_err(const ::dsn::error_code &val)
{
    this->err = val;
}

void configuration_add_backup_policy_response::__set_hint_message(const std::string &val)
{
    this->hint_message = val;
}

uint32_t
configuration_add_backup_policy_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->hint_message);
                this->__isset.hint_message = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_add_backup_policy_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_add_backup_policy_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("hint_message", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->hint_message);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_add_backup_policy_response &a, configuration_add_backup_policy_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.hint_message, b.hint_message);
    swap(a.__isset, b.__isset);
}

configuration_add_backup_policy_response::configuration_add_backup_policy_response(
    const configuration_add_backup_policy_response &other393)
{
    err = other393.err;
    hint_message = other393.hint_message;
    __isset = other393.__isset;
}
configuration_add_backup_policy_response::configuration_add_backup_policy_response(
    configuration_add_backup_policy_response &&other394)
{
    err = std::move(other394.err);
    hint_message = std::move(other394.hint_message);
    __isset = std::move(other394.__isset);
}
configuration_add_backup_policy_response &configuration_add_backup_policy_response::
operator=(const configuration_add_backup_policy_response &other395)
{
    err = other395.err;
    hint_message = other395.hint_message;
    __isset = other395.__isset;
    return *this;
}
configuration_add_backup_policy_response &configuration_add_backup_policy_response::
operator=(configuration_add_backup_policy_response &&other396)
{
    err = std::move(other396.err);
    hint_message = std::move(other396.hint_message);
    __isset = std::move(other396.__isset);
    return *this;
}
void configuration_add_backup_policy_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_add_backup_policy_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "hint_message=" << to_string(hint_message);
    out << ")";
}

policy_entry::~policy_entry() throw() {}

void policy_entry::__set_policy_name(const std::string &val) { this->policy_name = val; }

void policy_entry::__set_backup_provider_type(const std::string &val)
{
    this->backup_provider_type = val;
}

void policy_entry::__set_backup_interval_seconds(const std::string &val)
{
    this->backup_interval_seconds = val;
}

void policy_entry::__set_app_ids(const std::set<int32_t> &val) { this->app_ids = val; }

void policy_entry::__set_backup_history_count_to_keep(const int32_t val)
{
    this->backup_history_count_to_keep = val;
}

void policy_entry::__set_start_time(const std::string &val) { this->start_time = val; }

void policy_entry::__set_is_disable(const bool val) { this->is_disable = val; }

uint32_t policy_entry::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->policy_name);
                this->__isset.policy_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->backup_provider_type);
                this->__isset.backup_provider_type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->backup_interval_seconds);
                this->__isset.backup_interval_seconds = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_SET) {
                {
                    this->app_ids.clear();
                    uint32_t _size397;
                    ::apache::thrift::protocol::TType _etype400;
                    xfer += iprot->readSetBegin(_etype400, _size397);
                    uint32_t _i401;
                    for (_i401 = 0; _i401 < _size397; ++_i401) {
                        int32_t _elem402;
                        xfer += iprot->readI32(_elem402);
                        this->app_ids.insert(_elem402);
                    }
                    xfer += iprot->readSetEnd();
                }
                this->__isset.app_ids = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->backup_history_count_to_keep);
                this->__isset.backup_history_count_to_keep = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->start_time);
                this->__isset.start_time = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 7:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->is_disable);
                this->__isset.is_disable = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t policy_entry::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("policy_entry");

    xfer += oprot->writeFieldBegin("policy_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->policy_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("backup_provider_type", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->backup_provider_type);
    xfer += oprot->writeFieldEnd();

    xfer +=
        oprot->writeFieldBegin("backup_interval_seconds", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->backup_interval_seconds);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("app_ids", ::apache::thrift::protocol::T_SET, 4);
    {
        xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32,
                                     static_cast<uint32_t>(this->app_ids.size()));
        std::set<int32_t>::const_iterator _iter403;
        for (_iter403 = this->app_ids.begin(); _iter403 != this->app_ids.end(); ++_iter403) {
            xfer += oprot->writeI32((*_iter403));
        }
        xfer += oprot->writeSetEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin(
        "backup_history_count_to_keep", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->backup_history_count_to_keep);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("start_time", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->start_time);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("is_disable", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->is_disable);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(policy_entry &a, policy_entry &b)
{
    using ::std::swap;
    swap(a.policy_name, b.policy_name);
    swap(a.backup_provider_type, b.backup_provider_type);
    swap(a.backup_interval_seconds, b.backup_interval_seconds);
    swap(a.app_ids, b.app_ids);
    swap(a.backup_history_count_to_keep, b.backup_history_count_to_keep);
    swap(a.start_time, b.start_time);
    swap(a.is_disable, b.is_disable);
    swap(a.__isset, b.__isset);
}

policy_entry::policy_entry(const policy_entry &other404)
{
    policy_name = other404.policy_name;
    backup_provider_type = other404.backup_provider_type;
    backup_interval_seconds = other404.backup_interval_seconds;
    app_ids = other404.app_ids;
    backup_history_count_to_keep = other404.backup_history_count_to_keep;
    start_time = other404.start_time;
    is_disable = other404.is_disable;
    __isset = other404.__isset;
}
policy_entry::policy_entry(policy_entry &&other405)
{
    policy_name = std::move(other405.policy_name);
    backup_provider_type = std::move(other405.backup_provider_type);
    backup_interval_seconds = std::move(other405.backup_interval_seconds);
    app_ids = std::move(other405.app_ids);
    backup_history_count_to_keep = std::move(other405.backup_history_count_to_keep);
    start_time = std::move(other405.start_time);
    is_disable = std::move(other405.is_disable);
    __isset = std::move(other405.__isset);
}
policy_entry &policy_entry::operator=(const policy_entry &other406)
{
    policy_name = other406.policy_name;
    backup_provider_type = other406.backup_provider_type;
    backup_interval_seconds = other406.backup_interval_seconds;
    app_ids = other406.app_ids;
    backup_history_count_to_keep = other406.backup_history_count_to_keep;
    start_time = other406.start_time;
    is_disable = other406.is_disable;
    __isset = other406.__isset;
    return *this;
}
policy_entry &policy_entry::operator=(policy_entry &&other407)
{
    policy_name = std::move(other407.policy_name);
    backup_provider_type = std::move(other407.backup_provider_type);
    backup_interval_seconds = std::move(other407.backup_interval_seconds);
    app_ids = std::move(other407.app_ids);
    backup_history_count_to_keep = std::move(other407.backup_history_count_to_keep);
    start_time = std::move(other407.start_time);
    is_disable = std::move(other407.is_disable);
    __isset = std::move(other407.__isset);
    return *this;
}
void policy_entry::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "policy_entry(";
    out << "policy_name=" << to_string(policy_name);
    out << ", "
        << "backup_provider_type=" << to_string(backup_provider_type);
    out << ", "
        << "backup_interval_seconds=" << to_string(backup_interval_seconds);
    out << ", "
        << "app_ids=" << to_string(app_ids);
    out << ", "
        << "backup_history_count_to_keep=" << to_string(backup_history_count_to_keep);
    out << ", "
        << "start_time=" << to_string(start_time);
    out << ", "
        << "is_disable=" << to_string(is_disable);
    out << ")";
}

backup_entry::~backup_entry() throw() {}

void backup_entry::__set_backup_id(const int64_t val) { this->backup_id = val; }

void backup_entry::__set_start_time_ms(const int64_t val) { this->start_time_ms = val; }

void backup_entry::__set_end_time_ms(const int64_t val) { this->end_time_ms = val; }

void backup_entry::__set_app_ids(const std::set<int32_t> &val) { this->app_ids = val; }

uint32_t backup_entry::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->backup_id);
                this->__isset.backup_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->start_time_ms);
                this->__isset.start_time_ms = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->end_time_ms);
                this->__isset.end_time_ms = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_SET) {
                {
                    this->app_ids.clear();
                    uint32_t _size408;
                    ::apache::thrift::protocol::TType _etype411;
                    xfer += iprot->readSetBegin(_etype411, _size408);
                    uint32_t _i412;
                    for (_i412 = 0; _i412 < _size408; ++_i412) {
                        int32_t _elem413;
                        xfer += iprot->readI32(_elem413);
                        this->app_ids.insert(_elem413);
                    }
                    xfer += iprot->readSetEnd();
                }
                this->__isset.app_ids = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t backup_entry::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("backup_entry");

    xfer += oprot->writeFieldBegin("backup_id", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->backup_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("start_time_ms", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->start_time_ms);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("end_time_ms", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->end_time_ms);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("app_ids", ::apache::thrift::protocol::T_SET, 4);
    {
        xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32,
                                     static_cast<uint32_t>(this->app_ids.size()));
        std::set<int32_t>::const_iterator _iter414;
        for (_iter414 = this->app_ids.begin(); _iter414 != this->app_ids.end(); ++_iter414) {
            xfer += oprot->writeI32((*_iter414));
        }
        xfer += oprot->writeSetEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(backup_entry &a, backup_entry &b)
{
    using ::std::swap;
    swap(a.backup_id, b.backup_id);
    swap(a.start_time_ms, b.start_time_ms);
    swap(a.end_time_ms, b.end_time_ms);
    swap(a.app_ids, b.app_ids);
    swap(a.__isset, b.__isset);
}

backup_entry::backup_entry(const backup_entry &other415)
{
    backup_id = other415.backup_id;
    start_time_ms = other415.start_time_ms;
    end_time_ms = other415.end_time_ms;
    app_ids = other415.app_ids;
    __isset = other415.__isset;
}
backup_entry::backup_entry(backup_entry &&other416)
{
    backup_id = std::move(other416.backup_id);
    start_time_ms = std::move(other416.start_time_ms);
    end_time_ms = std::move(other416.end_time_ms);
    app_ids = std::move(other416.app_ids);
    __isset = std::move(other416.__isset);
}
backup_entry &backup_entry::operator=(const backup_entry &other417)
{
    backup_id = other417.backup_id;
    start_time_ms = other417.start_time_ms;
    end_time_ms = other417.end_time_ms;
    app_ids = other417.app_ids;
    __isset = other417.__isset;
    return *this;
}
backup_entry &backup_entry::operator=(backup_entry &&other418)
{
    backup_id = std::move(other418.backup_id);
    start_time_ms = std::move(other418.start_time_ms);
    end_time_ms = std::move(other418.end_time_ms);
    app_ids = std::move(other418.app_ids);
    __isset = std::move(other418.__isset);
    return *this;
}
void backup_entry::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "backup_entry(";
    out << "backup_id=" << to_string(backup_id);
    out << ", "
        << "start_time_ms=" << to_string(start_time_ms);
    out << ", "
        << "end_time_ms=" << to_string(end_time_ms);
    out << ", "
        << "app_ids=" << to_string(app_ids);
    out << ")";
}

configuration_query_backup_policy_request::~configuration_query_backup_policy_request() throw() {}

void configuration_query_backup_policy_request::__set_policy_names(
    const std::vector<std::string> &val)
{
    this->policy_names = val;
}

void configuration_query_backup_policy_request::__set_backup_info_count(const int32_t val)
{
    this->backup_info_count = val;
}

uint32_t
configuration_query_backup_policy_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->policy_names.clear();
                    uint32_t _size419;
                    ::apache::thrift::protocol::TType _etype422;
                    xfer += iprot->readListBegin(_etype422, _size419);
                    this->policy_names.resize(_size419);
                    uint32_t _i423;
                    for (_i423 = 0; _i423 < _size419; ++_i423) {
                        xfer += iprot->readString(this->policy_names[_i423]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.policy_names = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->backup_info_count);
                this->__isset.backup_info_count = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_query_backup_policy_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_query_backup_policy_request");

    xfer += oprot->writeFieldBegin("policy_names", ::apache::thrift::protocol::T_LIST, 1);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING,
                                      static_cast<uint32_t>(this->policy_names.size()));
        std::vector<std::string>::const_iterator _iter424;
        for (_iter424 = this->policy_names.begin(); _iter424 != this->policy_names.end();
             ++_iter424) {
            xfer += oprot->writeString((*_iter424));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("backup_info_count", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->backup_info_count);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_query_backup_policy_request &a,
          configuration_query_backup_policy_request &b)
{
    using ::std::swap;
    swap(a.policy_names, b.policy_names);
    swap(a.backup_info_count, b.backup_info_count);
    swap(a.__isset, b.__isset);
}

configuration_query_backup_policy_request::configuration_query_backup_policy_request(
    const configuration_query_backup_policy_request &other425)
{
    policy_names = other425.policy_names;
    backup_info_count = other425.backup_info_count;
    __isset = other425.__isset;
}
configuration_query_backup_policy_request::configuration_query_backup_policy_request(
    configuration_query_backup_policy_request &&other426)
{
    policy_names = std::move(other426.policy_names);
    backup_info_count = std::move(other426.backup_info_count);
    __isset = std::move(other426.__isset);
}
configuration_query_backup_policy_request &configuration_query_backup_policy_request::
operator=(const configuration_query_backup_policy_request &other427)
{
    policy_names = other427.policy_names;
    backup_info_count = other427.backup_info_count;
    __isset = other427.__isset;
    return *this;
}
configuration_query_backup_policy_request &configuration_query_backup_policy_request::
operator=(configuration_query_backup_policy_request &&other428)
{
    policy_names = std::move(other428.policy_names);
    backup_info_count = std::move(other428.backup_info_count);
    __isset = std::move(other428.__isset);
    return *this;
}
void configuration_query_backup_policy_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_query_backup_policy_request(";
    out << "policy_names=" << to_string(policy_names);
    out << ", "
        << "backup_info_count=" << to_string(backup_info_count);
    out << ")";
}

configuration_query_backup_policy_response::~configuration_query_backup_policy_response() throw() {}

void configuration_query_backup_policy_response::__set_err(const ::dsn::error_code &val)
{
    this->err = val;
}

void configuration_query_backup_policy_response::__set_policys(const std::vector<policy_entry> &val)
{
    this->policys = val;
}

void configuration_query_backup_policy_response::__set_backup_infos(
    const std::vector<std::vector<backup_entry>> &val)
{
    this->backup_infos = val;
}

void configuration_query_backup_policy_response::__set_hint_msg(const std::string &val)
{
    this->hint_msg = val;
    __isset.hint_msg = true;
}

uint32_t
configuration_query_backup_policy_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->policys.clear();
                    uint32_t _size429;
                    ::apache::thrift::protocol::TType _etype432;
                    xfer += iprot->readListBegin(_etype432, _size429);
                    this->policys.resize(_size429);
                    uint32_t _i433;
                    for (_i433 = 0; _i433 < _size429; ++_i433) {
                        xfer += this->policys[_i433].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.policys = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->backup_infos.clear();
                    uint32_t _size434;
                    ::apache::thrift::protocol::TType _etype437;
                    xfer += iprot->readListBegin(_etype437, _size434);
                    this->backup_infos.resize(_size434);
                    uint32_t _i438;
                    for (_i438 = 0; _i438 < _size434; ++_i438) {
                        {
                            this->backup_infos[_i438].clear();
                            uint32_t _size439;
                            ::apache::thrift::protocol::TType _etype442;
                            xfer += iprot->readListBegin(_etype442, _size439);
                            this->backup_infos[_i438].resize(_size439);
                            uint32_t _i443;
                            for (_i443 = 0; _i443 < _size439; ++_i443) {
                                xfer += this->backup_infos[_i438][_i443].read(iprot);
                            }
                            xfer += iprot->readListEnd();
                        }
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.backup_infos = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->hint_msg);
                this->__isset.hint_msg = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_query_backup_policy_response::write(
    ::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_query_backup_policy_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("policys", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->policys.size()));
        std::vector<policy_entry>::const_iterator _iter444;
        for (_iter444 = this->policys.begin(); _iter444 != this->policys.end(); ++_iter444) {
            xfer += (*_iter444).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("backup_infos", ::apache::thrift::protocol::T_LIST, 3);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST,
                                      static_cast<uint32_t>(this->backup_infos.size()));
        std::vector<std::vector<backup_entry>>::const_iterator _iter445;
        for (_iter445 = this->backup_infos.begin(); _iter445 != this->backup_infos.end();
             ++_iter445) {
            {
                xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                              static_cast<uint32_t>((*_iter445).size()));
                std::vector<backup_entry>::const_iterator _iter446;
                for (_iter446 = (*_iter445).begin(); _iter446 != (*_iter445).end(); ++_iter446) {
                    xfer += (*_iter446).write(oprot);
                }
                xfer += oprot->writeListEnd();
            }
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    if (this->__isset.hint_msg) {
        xfer += oprot->writeFieldBegin("hint_msg", ::apache::thrift::protocol::T_STRING, 4);
        xfer += oprot->writeString(this->hint_msg);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_query_backup_policy_response &a,
          configuration_query_backup_policy_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.policys, b.policys);
    swap(a.backup_infos, b.backup_infos);
    swap(a.hint_msg, b.hint_msg);
    swap(a.__isset, b.__isset);
}

configuration_query_backup_policy_response::configuration_query_backup_policy_response(
    const configuration_query_backup_policy_response &other447)
{
    err = other447.err;
    policys = other447.policys;
    backup_infos = other447.backup_infos;
    hint_msg = other447.hint_msg;
    __isset = other447.__isset;
}
configuration_query_backup_policy_response::configuration_query_backup_policy_response(
    configuration_query_backup_policy_response &&other448)
{
    err = std::move(other448.err);
    policys = std::move(other448.policys);
    backup_infos = std::move(other448.backup_infos);
    hint_msg = std::move(other448.hint_msg);
    __isset = std::move(other448.__isset);
}
configuration_query_backup_policy_response &configuration_query_backup_policy_response::
operator=(const configuration_query_backup_policy_response &other449)
{
    err = other449.err;
    policys = other449.policys;
    backup_infos = other449.backup_infos;
    hint_msg = other449.hint_msg;
    __isset = other449.__isset;
    return *this;
}
configuration_query_backup_policy_response &configuration_query_backup_policy_response::
operator=(configuration_query_backup_policy_response &&other450)
{
    err = std::move(other450.err);
    policys = std::move(other450.policys);
    backup_infos = std::move(other450.backup_infos);
    hint_msg = std::move(other450.hint_msg);
    __isset = std::move(other450.__isset);
    return *this;
}
void configuration_query_backup_policy_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_query_backup_policy_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "policys=" << to_string(policys);
    out << ", "
        << "backup_infos=" << to_string(backup_infos);
    out << ", "
        << "hint_msg=";
    (__isset.hint_msg ? (out << to_string(hint_msg)) : (out << "<null>"));
    out << ")";
}

configuration_report_restore_status_request::~configuration_report_restore_status_request() throw()
{
}

void configuration_report_restore_status_request::__set_pid(const ::dsn::gpid &val)
{
    this->pid = val;
}

void configuration_report_restore_status_request::__set_restore_status(const ::dsn::error_code &val)
{
    this->restore_status = val;
}

void configuration_report_restore_status_request::__set_progress(const int32_t val)
{
    this->progress = val;
}

void configuration_report_restore_status_request::__set_reason(const std::string &val)
{
    this->reason = val;
    __isset.reason = true;
}

uint32_t
configuration_report_restore_status_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->restore_status.read(iprot);
                this->__isset.restore_status = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->progress);
                this->__isset.progress = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->reason);
                this->__isset.reason = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_report_restore_status_request::write(
    ::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_report_restore_status_request");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("restore_status", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->restore_status.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("progress", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->progress);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.reason) {
        xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRING, 4);
        xfer += oprot->writeString(this->reason);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_report_restore_status_request &a,
          configuration_report_restore_status_request &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.restore_status, b.restore_status);
    swap(a.progress, b.progress);
    swap(a.reason, b.reason);
    swap(a.__isset, b.__isset);
}

configuration_report_restore_status_request::configuration_report_restore_status_request(
    const configuration_report_restore_status_request &other451)
{
    pid = other451.pid;
    restore_status = other451.restore_status;
    progress = other451.progress;
    reason = other451.reason;
    __isset = other451.__isset;
}
configuration_report_restore_status_request::configuration_report_restore_status_request(
    configuration_report_restore_status_request &&other452)
{
    pid = std::move(other452.pid);
    restore_status = std::move(other452.restore_status);
    progress = std::move(other452.progress);
    reason = std::move(other452.reason);
    __isset = std::move(other452.__isset);
}
configuration_report_restore_status_request &configuration_report_restore_status_request::
operator=(const configuration_report_restore_status_request &other453)
{
    pid = other453.pid;
    restore_status = other453.restore_status;
    progress = other453.progress;
    reason = other453.reason;
    __isset = other453.__isset;
    return *this;
}
configuration_report_restore_status_request &configuration_report_restore_status_request::
operator=(configuration_report_restore_status_request &&other454)
{
    pid = std::move(other454.pid);
    restore_status = std::move(other454.restore_status);
    progress = std::move(other454.progress);
    reason = std::move(other454.reason);
    __isset = std::move(other454.__isset);
    return *this;
}
void configuration_report_restore_status_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_report_restore_status_request(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "restore_status=" << to_string(restore_status);
    out << ", "
        << "progress=" << to_string(progress);
    out << ", "
        << "reason=";
    (__isset.reason ? (out << to_string(reason)) : (out << "<null>"));
    out << ")";
}

configuration_report_restore_status_response::
    ~configuration_report_restore_status_response() throw()
{
}

void configuration_report_restore_status_response::__set_err(const ::dsn::error_code &val)
{
    this->err = val;
}

uint32_t
configuration_report_restore_status_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t configuration_report_restore_status_response::write(
    ::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_report_restore_status_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_report_restore_status_response &a,
          configuration_report_restore_status_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.__isset, b.__isset);
}

configuration_report_restore_status_response::configuration_report_restore_status_response(
    const configuration_report_restore_status_response &other455)
{
    err = other455.err;
    __isset = other455.__isset;
}
configuration_report_restore_status_response::configuration_report_restore_status_response(
    configuration_report_restore_status_response &&other456)
{
    err = std::move(other456.err);
    __isset = std::move(other456.__isset);
}
configuration_report_restore_status_response &configuration_report_restore_status_response::
operator=(const configuration_report_restore_status_response &other457)
{
    err = other457.err;
    __isset = other457.__isset;
    return *this;
}
configuration_report_restore_status_response &configuration_report_restore_status_response::
operator=(configuration_report_restore_status_response &&other458)
{
    err = std::move(other458.err);
    __isset = std::move(other458.__isset);
    return *this;
}
void configuration_report_restore_status_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_report_restore_status_response(";
    out << "err=" << to_string(err);
    out << ")";
}

configuration_query_restore_request::~configuration_query_restore_request() throw() {}

void configuration_query_restore_request::__set_restore_app_id(const int32_t val)
{
    this->restore_app_id = val;
}

uint32_t configuration_query_restore_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->restore_app_id);
                this->__isset.restore_app_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_query_restore_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_query_restore_request");

    xfer += oprot->writeFieldBegin("restore_app_id", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->restore_app_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_query_restore_request &a, configuration_query_restore_request &b)
{
    using ::std::swap;
    swap(a.restore_app_id, b.restore_app_id);
    swap(a.__isset, b.__isset);
}

configuration_query_restore_request::configuration_query_restore_request(
    const configuration_query_restore_request &other459)
{
    restore_app_id = other459.restore_app_id;
    __isset = other459.__isset;
}
configuration_query_restore_request::configuration_query_restore_request(
    configuration_query_restore_request &&other460)
{
    restore_app_id = std::move(other460.restore_app_id);
    __isset = std::move(other460.__isset);
}
configuration_query_restore_request &configuration_query_restore_request::
operator=(const configuration_query_restore_request &other461)
{
    restore_app_id = other461.restore_app_id;
    __isset = other461.__isset;
    return *this;
}
configuration_query_restore_request &configuration_query_restore_request::
operator=(configuration_query_restore_request &&other462)
{
    restore_app_id = std::move(other462.restore_app_id);
    __isset = std::move(other462.__isset);
    return *this;
}
void configuration_query_restore_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_query_restore_request(";
    out << "restore_app_id=" << to_string(restore_app_id);
    out << ")";
}

configuration_query_restore_response::~configuration_query_restore_response() throw() {}

void configuration_query_restore_response::__set_err(const ::dsn::error_code &val)
{
    this->err = val;
}

void configuration_query_restore_response::__set_restore_status(
    const std::vector<::dsn::error_code> &val)
{
    this->restore_status = val;
}

void configuration_query_restore_response::__set_restore_progress(const std::vector<int32_t> &val)
{
    this->restore_progress = val;
}

uint32_t configuration_query_restore_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->restore_status.clear();
                    uint32_t _size463;
                    ::apache::thrift::protocol::TType _etype466;
                    xfer += iprot->readListBegin(_etype466, _size463);
                    this->restore_status.resize(_size463);
                    uint32_t _i467;
                    for (_i467 = 0; _i467 < _size463; ++_i467) {
                        xfer += this->restore_status[_i467].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.restore_status = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->restore_progress.clear();
                    uint32_t _size468;
                    ::apache::thrift::protocol::TType _etype471;
                    xfer += iprot->readListBegin(_etype471, _size468);
                    this->restore_progress.resize(_size468);
                    uint32_t _i472;
                    for (_i472 = 0; _i472 < _size468; ++_i472) {
                        xfer += iprot->readI32(this->restore_progress[_i472]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.restore_progress = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_query_restore_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_query_restore_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("restore_status", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->restore_status.size()));
        std::vector<::dsn::error_code>::const_iterator _iter473;
        for (_iter473 = this->restore_status.begin(); _iter473 != this->restore_status.end();
             ++_iter473) {
            xfer += (*_iter473).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("restore_progress", ::apache::thrift::protocol::T_LIST, 3);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32,
                                      static_cast<uint32_t>(this->restore_progress.size()));
        std::vector<int32_t>::const_iterator _iter474;
        for (_iter474 = this->restore_progress.begin(); _iter474 != this->restore_progress.end();
             ++_iter474) {
            xfer += oprot->writeI32((*_iter474));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_query_restore_response &a, configuration_query_restore_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.restore_status, b.restore_status);
    swap(a.restore_progress, b.restore_progress);
    swap(a.__isset, b.__isset);
}

configuration_query_restore_response::configuration_query_restore_response(
    const configuration_query_restore_response &other475)
{
    err = other475.err;
    restore_status = other475.restore_status;
    restore_progress = other475.restore_progress;
    __isset = other475.__isset;
}
configuration_query_restore_response::configuration_query_restore_response(
    configuration_query_restore_response &&other476)
{
    err = std::move(other476.err);
    restore_status = std::move(other476.restore_status);
    restore_progress = std::move(other476.restore_progress);
    __isset = std::move(other476.__isset);
}
configuration_query_restore_response &configuration_query_restore_response::
operator=(const configuration_query_restore_response &other477)
{
    err = other477.err;
    restore_status = other477.restore_status;
    restore_progress = other477.restore_progress;
    __isset = other477.__isset;
    return *this;
}
configuration_query_restore_response &configuration_query_restore_response::
operator=(configuration_query_restore_response &&other478)
{
    err = std::move(other478.err);
    restore_status = std::move(other478.restore_status);
    restore_progress = std::move(other478.restore_progress);
    __isset = std::move(other478.__isset);
    return *this;
}
void configuration_query_restore_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_query_restore_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "restore_status=" << to_string(restore_status);
    out << ", "
        << "restore_progress=" << to_string(restore_progress);
    out << ")";
}

configuration_update_app_env_request::~configuration_update_app_env_request() throw() {}

void configuration_update_app_env_request::__set_app_name(const std::string &val)
{
    this->app_name = val;
}

void configuration_update_app_env_request::__set_op(const app_env_operation::type val)
{
    this->op = val;
}

void configuration_update_app_env_request::__set_keys(const std::vector<std::string> &val)
{
    this->keys = val;
    __isset.keys = true;
}

void configuration_update_app_env_request::__set_values(const std::vector<std::string> &val)
{
    this->values = val;
    __isset.values = true;
}

void configuration_update_app_env_request::__set_clear_prefix(const std::string &val)
{
    this->clear_prefix = val;
    __isset.clear_prefix = true;
}

uint32_t configuration_update_app_env_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast479;
                xfer += iprot->readI32(ecast479);
                this->op = (app_env_operation::type)ecast479;
                this->__isset.op = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->keys.clear();
                    uint32_t _size480;
                    ::apache::thrift::protocol::TType _etype483;
                    xfer += iprot->readListBegin(_etype483, _size480);
                    this->keys.resize(_size480);
                    uint32_t _i484;
                    for (_i484 = 0; _i484 < _size480; ++_i484) {
                        xfer += iprot->readString(this->keys[_i484]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.keys = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->values.clear();
                    uint32_t _size485;
                    ::apache::thrift::protocol::TType _etype488;
                    xfer += iprot->readListBegin(_etype488, _size485);
                    this->values.resize(_size485);
                    uint32_t _i489;
                    for (_i489 = 0; _i489 < _size485; ++_i489) {
                        xfer += iprot->readString(this->values[_i489]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.values = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->clear_prefix);
                this->__isset.clear_prefix = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_update_app_env_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_update_app_env_request");

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("op", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->op);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.keys) {
        xfer += oprot->writeFieldBegin("keys", ::apache::thrift::protocol::T_LIST, 3);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING,
                                          static_cast<uint32_t>(this->keys.size()));
            std::vector<std::string>::const_iterator _iter490;
            for (_iter490 = this->keys.begin(); _iter490 != this->keys.end(); ++_iter490) {
                xfer += oprot->writeString((*_iter490));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.values) {
        xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 4);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING,
                                          static_cast<uint32_t>(this->values.size()));
            std::vector<std::string>::const_iterator _iter491;
            for (_iter491 = this->values.begin(); _iter491 != this->values.end(); ++_iter491) {
                xfer += oprot->writeString((*_iter491));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.clear_prefix) {
        xfer += oprot->writeFieldBegin("clear_prefix", ::apache::thrift::protocol::T_STRING, 5);
        xfer += oprot->writeString(this->clear_prefix);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_update_app_env_request &a, configuration_update_app_env_request &b)
{
    using ::std::swap;
    swap(a.app_name, b.app_name);
    swap(a.op, b.op);
    swap(a.keys, b.keys);
    swap(a.values, b.values);
    swap(a.clear_prefix, b.clear_prefix);
    swap(a.__isset, b.__isset);
}

configuration_update_app_env_request::configuration_update_app_env_request(
    const configuration_update_app_env_request &other492)
{
    app_name = other492.app_name;
    op = other492.op;
    keys = other492.keys;
    values = other492.values;
    clear_prefix = other492.clear_prefix;
    __isset = other492.__isset;
}
configuration_update_app_env_request::configuration_update_app_env_request(
    configuration_update_app_env_request &&other493)
{
    app_name = std::move(other493.app_name);
    op = std::move(other493.op);
    keys = std::move(other493.keys);
    values = std::move(other493.values);
    clear_prefix = std::move(other493.clear_prefix);
    __isset = std::move(other493.__isset);
}
configuration_update_app_env_request &configuration_update_app_env_request::
operator=(const configuration_update_app_env_request &other494)
{
    app_name = other494.app_name;
    op = other494.op;
    keys = other494.keys;
    values = other494.values;
    clear_prefix = other494.clear_prefix;
    __isset = other494.__isset;
    return *this;
}
configuration_update_app_env_request &configuration_update_app_env_request::
operator=(configuration_update_app_env_request &&other495)
{
    app_name = std::move(other495.app_name);
    op = std::move(other495.op);
    keys = std::move(other495.keys);
    values = std::move(other495.values);
    clear_prefix = std::move(other495.clear_prefix);
    __isset = std::move(other495.__isset);
    return *this;
}
void configuration_update_app_env_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_update_app_env_request(";
    out << "app_name=" << to_string(app_name);
    out << ", "
        << "op=" << to_string(op);
    out << ", "
        << "keys=";
    (__isset.keys ? (out << to_string(keys)) : (out << "<null>"));
    out << ", "
        << "values=";
    (__isset.values ? (out << to_string(values)) : (out << "<null>"));
    out << ", "
        << "clear_prefix=";
    (__isset.clear_prefix ? (out << to_string(clear_prefix)) : (out << "<null>"));
    out << ")";
}

configuration_update_app_env_response::~configuration_update_app_env_response() throw() {}

void configuration_update_app_env_response::__set_err(const ::dsn::error_code &val)
{
    this->err = val;
}

void configuration_update_app_env_response::__set_hint_message(const std::string &val)
{
    this->hint_message = val;
}

uint32_t configuration_update_app_env_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->hint_message);
                this->__isset.hint_message = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t
configuration_update_app_env_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("configuration_update_app_env_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("hint_message", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->hint_message);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(configuration_update_app_env_response &a, configuration_update_app_env_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.hint_message, b.hint_message);
    swap(a.__isset, b.__isset);
}

configuration_update_app_env_response::configuration_update_app_env_response(
    const configuration_update_app_env_response &other496)
{
    err = other496.err;
    hint_message = other496.hint_message;
    __isset = other496.__isset;
}
configuration_update_app_env_response::configuration_update_app_env_response(
    configuration_update_app_env_response &&other497)
{
    err = std::move(other497.err);
    hint_message = std::move(other497.hint_message);
    __isset = std::move(other497.__isset);
}
configuration_update_app_env_response &configuration_update_app_env_response::
operator=(const configuration_update_app_env_response &other498)
{
    err = other498.err;
    hint_message = other498.hint_message;
    __isset = other498.__isset;
    return *this;
}
configuration_update_app_env_response &configuration_update_app_env_response::
operator=(configuration_update_app_env_response &&other499)
{
    err = std::move(other499.err);
    hint_message = std::move(other499.hint_message);
    __isset = std::move(other499.__isset);
    return *this;
}
void configuration_update_app_env_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "configuration_update_app_env_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "hint_message=" << to_string(hint_message);
    out << ")";
}

duplication_add_request::~duplication_add_request() throw() {}

void duplication_add_request::__set_app_name(const std::string &val) { this->app_name = val; }

void duplication_add_request::__set_remote_cluster_name(const std::string &val)
{
    this->remote_cluster_name = val;
}

void duplication_add_request::__set_freezed(const bool val) { this->freezed = val; }

uint32_t duplication_add_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->remote_cluster_name);
                this->__isset.remote_cluster_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->freezed);
                this->__isset.freezed = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t duplication_add_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("duplication_add_request");

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("remote_cluster_name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->remote_cluster_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("freezed", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->freezed);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(duplication_add_request &a, duplication_add_request &b)
{
    using ::std::swap;
    swap(a.app_name, b.app_name);
    swap(a.remote_cluster_name, b.remote_cluster_name);
    swap(a.freezed, b.freezed);
    swap(a.__isset, b.__isset);
}

duplication_add_request::duplication_add_request(const duplication_add_request &other500)
{
    app_name = other500.app_name;
    remote_cluster_name = other500.remote_cluster_name;
    freezed = other500.freezed;
    __isset = other500.__isset;
}
duplication_add_request::duplication_add_request(duplication_add_request &&other501)
{
    app_name = std::move(other501.app_name);
    remote_cluster_name = std::move(other501.remote_cluster_name);
    freezed = std::move(other501.freezed);
    __isset = std::move(other501.__isset);
}
duplication_add_request &duplication_add_request::operator=(const duplication_add_request &other502)
{
    app_name = other502.app_name;
    remote_cluster_name = other502.remote_cluster_name;
    freezed = other502.freezed;
    __isset = other502.__isset;
    return *this;
}
duplication_add_request &duplication_add_request::operator=(duplication_add_request &&other503)
{
    app_name = std::move(other503.app_name);
    remote_cluster_name = std::move(other503.remote_cluster_name);
    freezed = std::move(other503.freezed);
    __isset = std::move(other503.__isset);
    return *this;
}
void duplication_add_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "duplication_add_request(";
    out << "app_name=" << to_string(app_name);
    out << ", "
        << "remote_cluster_name=" << to_string(remote_cluster_name);
    out << ", "
        << "freezed=" << to_string(freezed);
    out << ")";
}

duplication_add_response::~duplication_add_response() throw() {}

void duplication_add_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void duplication_add_response::__set_appid(const int32_t val) { this->appid = val; }

void duplication_add_response::__set_dupid(const int32_t val) { this->dupid = val; }

void duplication_add_response::__set_hint(const std::string &val)
{
    this->hint = val;
    __isset.hint = true;
}

uint32_t duplication_add_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->appid);
                this->__isset.appid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->dupid);
                this->__isset.dupid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->hint);
                this->__isset.hint = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t duplication_add_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("duplication_add_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("appid", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->appid);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("dupid", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->dupid);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.hint) {
        xfer += oprot->writeFieldBegin("hint", ::apache::thrift::protocol::T_STRING, 4);
        xfer += oprot->writeString(this->hint);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(duplication_add_response &a, duplication_add_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.appid, b.appid);
    swap(a.dupid, b.dupid);
    swap(a.hint, b.hint);
    swap(a.__isset, b.__isset);
}

duplication_add_response::duplication_add_response(const duplication_add_response &other504)
{
    err = other504.err;
    appid = other504.appid;
    dupid = other504.dupid;
    hint = other504.hint;
    __isset = other504.__isset;
}
duplication_add_response::duplication_add_response(duplication_add_response &&other505)
{
    err = std::move(other505.err);
    appid = std::move(other505.appid);
    dupid = std::move(other505.dupid);
    hint = std::move(other505.hint);
    __isset = std::move(other505.__isset);
}
duplication_add_response &duplication_add_response::
operator=(const duplication_add_response &other506)
{
    err = other506.err;
    appid = other506.appid;
    dupid = other506.dupid;
    hint = other506.hint;
    __isset = other506.__isset;
    return *this;
}
duplication_add_response &duplication_add_response::operator=(duplication_add_response &&other507)
{
    err = std::move(other507.err);
    appid = std::move(other507.appid);
    dupid = std::move(other507.dupid);
    hint = std::move(other507.hint);
    __isset = std::move(other507.__isset);
    return *this;
}
void duplication_add_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "duplication_add_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "appid=" << to_string(appid);
    out << ", "
        << "dupid=" << to_string(dupid);
    out << ", "
        << "hint=";
    (__isset.hint ? (out << to_string(hint)) : (out << "<null>"));
    out << ")";
}

duplication_modify_request::~duplication_modify_request() throw() {}

void duplication_modify_request::__set_app_name(const std::string &val) { this->app_name = val; }

void duplication_modify_request::__set_dupid(const int32_t val) { this->dupid = val; }

void duplication_modify_request::__set_status(const duplication_status::type val)
{
    this->status = val;
    __isset.status = true;
}

void duplication_modify_request::__set_fail_mode(const duplication_fail_mode::type val)
{
    this->fail_mode = val;
    __isset.fail_mode = true;
}

uint32_t duplication_modify_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->dupid);
                this->__isset.dupid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast508;
                xfer += iprot->readI32(ecast508);
                this->status = (duplication_status::type)ecast508;
                this->__isset.status = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast509;
                xfer += iprot->readI32(ecast509);
                this->fail_mode = (duplication_fail_mode::type)ecast509;
                this->__isset.fail_mode = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t duplication_modify_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("duplication_modify_request");

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("dupid", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->dupid);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.status) {
        xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
        xfer += oprot->writeI32((int32_t)this->status);
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.fail_mode) {
        xfer += oprot->writeFieldBegin("fail_mode", ::apache::thrift::protocol::T_I32, 4);
        xfer += oprot->writeI32((int32_t)this->fail_mode);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(duplication_modify_request &a, duplication_modify_request &b)
{
    using ::std::swap;
    swap(a.app_name, b.app_name);
    swap(a.dupid, b.dupid);
    swap(a.status, b.status);
    swap(a.fail_mode, b.fail_mode);
    swap(a.__isset, b.__isset);
}

duplication_modify_request::duplication_modify_request(const duplication_modify_request &other510)
{
    app_name = other510.app_name;
    dupid = other510.dupid;
    status = other510.status;
    fail_mode = other510.fail_mode;
    __isset = other510.__isset;
}
duplication_modify_request::duplication_modify_request(duplication_modify_request &&other511)
{
    app_name = std::move(other511.app_name);
    dupid = std::move(other511.dupid);
    status = std::move(other511.status);
    fail_mode = std::move(other511.fail_mode);
    __isset = std::move(other511.__isset);
}
duplication_modify_request &duplication_modify_request::
operator=(const duplication_modify_request &other512)
{
    app_name = other512.app_name;
    dupid = other512.dupid;
    status = other512.status;
    fail_mode = other512.fail_mode;
    __isset = other512.__isset;
    return *this;
}
duplication_modify_request &duplication_modify_request::
operator=(duplication_modify_request &&other513)
{
    app_name = std::move(other513.app_name);
    dupid = std::move(other513.dupid);
    status = std::move(other513.status);
    fail_mode = std::move(other513.fail_mode);
    __isset = std::move(other513.__isset);
    return *this;
}
void duplication_modify_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "duplication_modify_request(";
    out << "app_name=" << to_string(app_name);
    out << ", "
        << "dupid=" << to_string(dupid);
    out << ", "
        << "status=";
    (__isset.status ? (out << to_string(status)) : (out << "<null>"));
    out << ", "
        << "fail_mode=";
    (__isset.fail_mode ? (out << to_string(fail_mode)) : (out << "<null>"));
    out << ")";
}

duplication_modify_response::~duplication_modify_response() throw() {}

void duplication_modify_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void duplication_modify_response::__set_appid(const int32_t val) { this->appid = val; }

uint32_t duplication_modify_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->appid);
                this->__isset.appid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t duplication_modify_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("duplication_modify_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("appid", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->appid);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(duplication_modify_response &a, duplication_modify_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.appid, b.appid);
    swap(a.__isset, b.__isset);
}

duplication_modify_response::duplication_modify_response(
    const duplication_modify_response &other514)
{
    err = other514.err;
    appid = other514.appid;
    __isset = other514.__isset;
}
duplication_modify_response::duplication_modify_response(duplication_modify_response &&other515)
{
    err = std::move(other515.err);
    appid = std::move(other515.appid);
    __isset = std::move(other515.__isset);
}
duplication_modify_response &duplication_modify_response::
operator=(const duplication_modify_response &other516)
{
    err = other516.err;
    appid = other516.appid;
    __isset = other516.__isset;
    return *this;
}
duplication_modify_response &duplication_modify_response::
operator=(duplication_modify_response &&other517)
{
    err = std::move(other517.err);
    appid = std::move(other517.appid);
    __isset = std::move(other517.__isset);
    return *this;
}
void duplication_modify_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "duplication_modify_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "appid=" << to_string(appid);
    out << ")";
}

duplication_entry::~duplication_entry() throw() {}

void duplication_entry::__set_dupid(const int32_t val) { this->dupid = val; }

void duplication_entry::__set_status(const duplication_status::type val) { this->status = val; }

void duplication_entry::__set_remote(const std::string &val) { this->remote = val; }

void duplication_entry::__set_create_ts(const int64_t val) { this->create_ts = val; }

void duplication_entry::__set_progress(const std::map<int32_t, int64_t> &val)
{
    this->progress = val;
    __isset.progress = true;
}

void duplication_entry::__set_fail_mode(const duplication_fail_mode::type val)
{
    this->fail_mode = val;
    __isset.fail_mode = true;
}

uint32_t duplication_entry::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->dupid);
                this->__isset.dupid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast518;
                xfer += iprot->readI32(ecast518);
                this->status = (duplication_status::type)ecast518;
                this->__isset.status = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->remote);
                this->__isset.remote = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->create_ts);
                this->__isset.create_ts = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->progress.clear();
                    uint32_t _size519;
                    ::apache::thrift::protocol::TType _ktype520;
                    ::apache::thrift::protocol::TType _vtype521;
                    xfer += iprot->readMapBegin(_ktype520, _vtype521, _size519);
                    uint32_t _i523;
                    for (_i523 = 0; _i523 < _size519; ++_i523) {
                        int32_t _key524;
                        xfer += iprot->readI32(_key524);
                        int64_t &_val525 = this->progress[_key524];
                        xfer += iprot->readI64(_val525);
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.progress = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 7:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast526;
                xfer += iprot->readI32(ecast526);
                this->fail_mode = (duplication_fail_mode::type)ecast526;
                this->__isset.fail_mode = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t duplication_entry::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("duplication_entry");

    xfer += oprot->writeFieldBegin("dupid", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->dupid);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("remote", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->remote);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("create_ts", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->create_ts);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.progress) {
        xfer += oprot->writeFieldBegin("progress", ::apache::thrift::protocol::T_MAP, 5);
        {
            xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32,
                                         ::apache::thrift::protocol::T_I64,
                                         static_cast<uint32_t>(this->progress.size()));
            std::map<int32_t, int64_t>::const_iterator _iter527;
            for (_iter527 = this->progress.begin(); _iter527 != this->progress.end(); ++_iter527) {
                xfer += oprot->writeI32(_iter527->first);
                xfer += oprot->writeI64(_iter527->second);
            }
            xfer += oprot->writeMapEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.fail_mode) {
        xfer += oprot->writeFieldBegin("fail_mode", ::apache::thrift::protocol::T_I32, 7);
        xfer += oprot->writeI32((int32_t)this->fail_mode);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(duplication_entry &a, duplication_entry &b)
{
    using ::std::swap;
    swap(a.dupid, b.dupid);
    swap(a.status, b.status);
    swap(a.remote, b.remote);
    swap(a.create_ts, b.create_ts);
    swap(a.progress, b.progress);
    swap(a.fail_mode, b.fail_mode);
    swap(a.__isset, b.__isset);
}

duplication_entry::duplication_entry(const duplication_entry &other528)
{
    dupid = other528.dupid;
    status = other528.status;
    remote = other528.remote;
    create_ts = other528.create_ts;
    progress = other528.progress;
    fail_mode = other528.fail_mode;
    __isset = other528.__isset;
}
duplication_entry::duplication_entry(duplication_entry &&other529)
{
    dupid = std::move(other529.dupid);
    status = std::move(other529.status);
    remote = std::move(other529.remote);
    create_ts = std::move(other529.create_ts);
    progress = std::move(other529.progress);
    fail_mode = std::move(other529.fail_mode);
    __isset = std::move(other529.__isset);
}
duplication_entry &duplication_entry::operator=(const duplication_entry &other530)
{
    dupid = other530.dupid;
    status = other530.status;
    remote = other530.remote;
    create_ts = other530.create_ts;
    progress = other530.progress;
    fail_mode = other530.fail_mode;
    __isset = other530.__isset;
    return *this;
}
duplication_entry &duplication_entry::operator=(duplication_entry &&other531)
{
    dupid = std::move(other531.dupid);
    status = std::move(other531.status);
    remote = std::move(other531.remote);
    create_ts = std::move(other531.create_ts);
    progress = std::move(other531.progress);
    fail_mode = std::move(other531.fail_mode);
    __isset = std::move(other531.__isset);
    return *this;
}
void duplication_entry::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "duplication_entry(";
    out << "dupid=" << to_string(dupid);
    out << ", "
        << "status=" << to_string(status);
    out << ", "
        << "remote=" << to_string(remote);
    out << ", "
        << "create_ts=" << to_string(create_ts);
    out << ", "
        << "progress=";
    (__isset.progress ? (out << to_string(progress)) : (out << "<null>"));
    out << ", "
        << "fail_mode=";
    (__isset.fail_mode ? (out << to_string(fail_mode)) : (out << "<null>"));
    out << ")";
}

duplication_query_request::~duplication_query_request() throw() {}

void duplication_query_request::__set_app_name(const std::string &val) { this->app_name = val; }

uint32_t duplication_query_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t duplication_query_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("duplication_query_request");

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(duplication_query_request &a, duplication_query_request &b)
{
    using ::std::swap;
    swap(a.app_name, b.app_name);
    swap(a.__isset, b.__isset);
}

duplication_query_request::duplication_query_request(const duplication_query_request &other532)
{
    app_name = other532.app_name;
    __isset = other532.__isset;
}
duplication_query_request::duplication_query_request(duplication_query_request &&other533)
{
    app_name = std::move(other533.app_name);
    __isset = std::move(other533.__isset);
}
duplication_query_request &duplication_query_request::
operator=(const duplication_query_request &other534)
{
    app_name = other534.app_name;
    __isset = other534.__isset;
    return *this;
}
duplication_query_request &duplication_query_request::
operator=(duplication_query_request &&other535)
{
    app_name = std::move(other535.app_name);
    __isset = std::move(other535.__isset);
    return *this;
}
void duplication_query_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "duplication_query_request(";
    out << "app_name=" << to_string(app_name);
    out << ")";
}

duplication_query_response::~duplication_query_response() throw() {}

void duplication_query_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void duplication_query_response::__set_appid(const int32_t val) { this->appid = val; }

void duplication_query_response::__set_entry_list(const std::vector<duplication_entry> &val)
{
    this->entry_list = val;
}

uint32_t duplication_query_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->appid);
                this->__isset.appid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->entry_list.clear();
                    uint32_t _size536;
                    ::apache::thrift::protocol::TType _etype539;
                    xfer += iprot->readListBegin(_etype539, _size536);
                    this->entry_list.resize(_size536);
                    uint32_t _i540;
                    for (_i540 = 0; _i540 < _size536; ++_i540) {
                        xfer += this->entry_list[_i540].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.entry_list = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t duplication_query_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("duplication_query_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("appid", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->appid);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("entry_list", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->entry_list.size()));
        std::vector<duplication_entry>::const_iterator _iter541;
        for (_iter541 = this->entry_list.begin(); _iter541 != this->entry_list.end(); ++_iter541) {
            xfer += (*_iter541).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(duplication_query_response &a, duplication_query_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.appid, b.appid);
    swap(a.entry_list, b.entry_list);
    swap(a.__isset, b.__isset);
}

duplication_query_response::duplication_query_response(const duplication_query_response &other542)
{
    err = other542.err;
    appid = other542.appid;
    entry_list = other542.entry_list;
    __isset = other542.__isset;
}
duplication_query_response::duplication_query_response(duplication_query_response &&other543)
{
    err = std::move(other543.err);
    appid = std::move(other543.appid);
    entry_list = std::move(other543.entry_list);
    __isset = std::move(other543.__isset);
}
duplication_query_response &duplication_query_response::
operator=(const duplication_query_response &other544)
{
    err = other544.err;
    appid = other544.appid;
    entry_list = other544.entry_list;
    __isset = other544.__isset;
    return *this;
}
duplication_query_response &duplication_query_response::
operator=(duplication_query_response &&other545)
{
    err = std::move(other545.err);
    appid = std::move(other545.appid);
    entry_list = std::move(other545.entry_list);
    __isset = std::move(other545.__isset);
    return *this;
}
void duplication_query_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "duplication_query_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "appid=" << to_string(appid);
    out << ", "
        << "entry_list=" << to_string(entry_list);
    out << ")";
}

duplication_confirm_entry::~duplication_confirm_entry() throw() {}

void duplication_confirm_entry::__set_dupid(const int32_t val) { this->dupid = val; }

void duplication_confirm_entry::__set_confirmed_decree(const int64_t val)
{
    this->confirmed_decree = val;
}

uint32_t duplication_confirm_entry::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->dupid);
                this->__isset.dupid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->confirmed_decree);
                this->__isset.confirmed_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t duplication_confirm_entry::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("duplication_confirm_entry");

    xfer += oprot->writeFieldBegin("dupid", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->dupid);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("confirmed_decree", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->confirmed_decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(duplication_confirm_entry &a, duplication_confirm_entry &b)
{
    using ::std::swap;
    swap(a.dupid, b.dupid);
    swap(a.confirmed_decree, b.confirmed_decree);
    swap(a.__isset, b.__isset);
}

duplication_confirm_entry::duplication_confirm_entry(const duplication_confirm_entry &other546)
{
    dupid = other546.dupid;
    confirmed_decree = other546.confirmed_decree;
    __isset = other546.__isset;
}
duplication_confirm_entry::duplication_confirm_entry(duplication_confirm_entry &&other547)
{
    dupid = std::move(other547.dupid);
    confirmed_decree = std::move(other547.confirmed_decree);
    __isset = std::move(other547.__isset);
}
duplication_confirm_entry &duplication_confirm_entry::
operator=(const duplication_confirm_entry &other548)
{
    dupid = other548.dupid;
    confirmed_decree = other548.confirmed_decree;
    __isset = other548.__isset;
    return *this;
}
duplication_confirm_entry &duplication_confirm_entry::
operator=(duplication_confirm_entry &&other549)
{
    dupid = std::move(other549.dupid);
    confirmed_decree = std::move(other549.confirmed_decree);
    __isset = std::move(other549.__isset);
    return *this;
}
void duplication_confirm_entry::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "duplication_confirm_entry(";
    out << "dupid=" << to_string(dupid);
    out << ", "
        << "confirmed_decree=" << to_string(confirmed_decree);
    out << ")";
}

duplication_sync_request::~duplication_sync_request() throw() {}

void duplication_sync_request::__set_node(const ::dsn::rpc_address &val) { this->node = val; }

void duplication_sync_request::__set_confirm_list(
    const std::map<::dsn::gpid, std::vector<duplication_confirm_entry>> &val)
{
    this->confirm_list = val;
}

uint32_t duplication_sync_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->node.read(iprot);
                this->__isset.node = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->confirm_list.clear();
                    uint32_t _size550;
                    ::apache::thrift::protocol::TType _ktype551;
                    ::apache::thrift::protocol::TType _vtype552;
                    xfer += iprot->readMapBegin(_ktype551, _vtype552, _size550);
                    uint32_t _i554;
                    for (_i554 = 0; _i554 < _size550; ++_i554) {
                        ::dsn::gpid _key555;
                        xfer += _key555.read(iprot);
                        std::vector<duplication_confirm_entry> &_val556 =
                            this->confirm_list[_key555];
                        {
                            _val556.clear();
                            uint32_t _size557;
                            ::apache::thrift::protocol::TType _etype560;
                            xfer += iprot->readListBegin(_etype560, _size557);
                            _val556.resize(_size557);
                            uint32_t _i561;
                            for (_i561 = 0; _i561 < _size557; ++_i561) {
                                xfer += _val556[_i561].read(iprot);
                            }
                            xfer += iprot->readListEnd();
                        }
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.confirm_list = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t duplication_sync_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("duplication_sync_request");

    xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->node.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("confirm_list", ::apache::thrift::protocol::T_MAP, 2);
    {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRUCT,
                                     ::apache::thrift::protocol::T_LIST,
                                     static_cast<uint32_t>(this->confirm_list.size()));
        std::map<::dsn::gpid, std::vector<duplication_confirm_entry>>::const_iterator _iter562;
        for (_iter562 = this->confirm_list.begin(); _iter562 != this->confirm_list.end();
             ++_iter562) {
            xfer += _iter562->first.write(oprot);
            {
                xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                              static_cast<uint32_t>(_iter562->second.size()));
                std::vector<duplication_confirm_entry>::const_iterator _iter563;
                for (_iter563 = _iter562->second.begin(); _iter563 != _iter562->second.end();
                     ++_iter563) {
                    xfer += (*_iter563).write(oprot);
                }
                xfer += oprot->writeListEnd();
            }
        }
        xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(duplication_sync_request &a, duplication_sync_request &b)
{
    using ::std::swap;
    swap(a.node, b.node);
    swap(a.confirm_list, b.confirm_list);
    swap(a.__isset, b.__isset);
}

duplication_sync_request::duplication_sync_request(const duplication_sync_request &other564)
{
    node = other564.node;
    confirm_list = other564.confirm_list;
    __isset = other564.__isset;
}
duplication_sync_request::duplication_sync_request(duplication_sync_request &&other565)
{
    node = std::move(other565.node);
    confirm_list = std::move(other565.confirm_list);
    __isset = std::move(other565.__isset);
}
duplication_sync_request &duplication_sync_request::
operator=(const duplication_sync_request &other566)
{
    node = other566.node;
    confirm_list = other566.confirm_list;
    __isset = other566.__isset;
    return *this;
}
duplication_sync_request &duplication_sync_request::operator=(duplication_sync_request &&other567)
{
    node = std::move(other567.node);
    confirm_list = std::move(other567.confirm_list);
    __isset = std::move(other567.__isset);
    return *this;
}
void duplication_sync_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "duplication_sync_request(";
    out << "node=" << to_string(node);
    out << ", "
        << "confirm_list=" << to_string(confirm_list);
    out << ")";
}

duplication_sync_response::~duplication_sync_response() throw() {}

void duplication_sync_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void duplication_sync_response::__set_dup_map(
    const std::map<int32_t, std::map<int32_t, duplication_entry>> &val)
{
    this->dup_map = val;
}

uint32_t duplication_sync_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->dup_map.clear();
                    uint32_t _size568;
                    ::apache::thrift::protocol::TType _ktype569;
                    ::apache::thrift::protocol::TType _vtype570;
                    xfer += iprot->readMapBegin(_ktype569, _vtype570, _size568);
                    uint32_t _i572;
                    for (_i572 = 0; _i572 < _size568; ++_i572) {
                        int32_t _key573;
                        xfer += iprot->readI32(_key573);
                        std::map<int32_t, duplication_entry> &_val574 = this->dup_map[_key573];
                        {
                            _val574.clear();
                            uint32_t _size575;
                            ::apache::thrift::protocol::TType _ktype576;
                            ::apache::thrift::protocol::TType _vtype577;
                            xfer += iprot->readMapBegin(_ktype576, _vtype577, _size575);
                            uint32_t _i579;
                            for (_i579 = 0; _i579 < _size575; ++_i579) {
                                int32_t _key580;
                                xfer += iprot->readI32(_key580);
                                duplication_entry &_val581 = _val574[_key580];
                                xfer += _val581.read(iprot);
                            }
                            xfer += iprot->readMapEnd();
                        }
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.dup_map = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t duplication_sync_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("duplication_sync_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("dup_map", ::apache::thrift::protocol::T_MAP, 2);
    {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32,
                                     ::apache::thrift::protocol::T_MAP,
                                     static_cast<uint32_t>(this->dup_map.size()));
        std::map<int32_t, std::map<int32_t, duplication_entry>>::const_iterator _iter582;
        for (_iter582 = this->dup_map.begin(); _iter582 != this->dup_map.end(); ++_iter582) {
            xfer += oprot->writeI32(_iter582->first);
            {
                xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32,
                                             ::apache::thrift::protocol::T_STRUCT,
                                             static_cast<uint32_t>(_iter582->second.size()));
                std::map<int32_t, duplication_entry>::const_iterator _iter583;
                for (_iter583 = _iter582->second.begin(); _iter583 != _iter582->second.end();
                     ++_iter583) {
                    xfer += oprot->writeI32(_iter583->first);
                    xfer += _iter583->second.write(oprot);
                }
                xfer += oprot->writeMapEnd();
            }
        }
        xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(duplication_sync_response &a, duplication_sync_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.dup_map, b.dup_map);
    swap(a.__isset, b.__isset);
}

duplication_sync_response::duplication_sync_response(const duplication_sync_response &other584)
{
    err = other584.err;
    dup_map = other584.dup_map;
    __isset = other584.__isset;
}
duplication_sync_response::duplication_sync_response(duplication_sync_response &&other585)
{
    err = std::move(other585.err);
    dup_map = std::move(other585.dup_map);
    __isset = std::move(other585.__isset);
}
duplication_sync_response &duplication_sync_response::
operator=(const duplication_sync_response &other586)
{
    err = other586.err;
    dup_map = other586.dup_map;
    __isset = other586.__isset;
    return *this;
}
duplication_sync_response &duplication_sync_response::
operator=(duplication_sync_response &&other587)
{
    err = std::move(other587.err);
    dup_map = std::move(other587.dup_map);
    __isset = std::move(other587.__isset);
    return *this;
}
void duplication_sync_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "duplication_sync_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "dup_map=" << to_string(dup_map);
    out << ")";
}

ddd_diagnose_request::~ddd_diagnose_request() throw() {}

void ddd_diagnose_request::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

uint32_t ddd_diagnose_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t ddd_diagnose_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("ddd_diagnose_request");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(ddd_diagnose_request &a, ddd_diagnose_request &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.__isset, b.__isset);
}

ddd_diagnose_request::ddd_diagnose_request(const ddd_diagnose_request &other588)
{
    pid = other588.pid;
    __isset = other588.__isset;
}
ddd_diagnose_request::ddd_diagnose_request(ddd_diagnose_request &&other589)
{
    pid = std::move(other589.pid);
    __isset = std::move(other589.__isset);
}
ddd_diagnose_request &ddd_diagnose_request::operator=(const ddd_diagnose_request &other590)
{
    pid = other590.pid;
    __isset = other590.__isset;
    return *this;
}
ddd_diagnose_request &ddd_diagnose_request::operator=(ddd_diagnose_request &&other591)
{
    pid = std::move(other591.pid);
    __isset = std::move(other591.__isset);
    return *this;
}
void ddd_diagnose_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "ddd_diagnose_request(";
    out << "pid=" << to_string(pid);
    out << ")";
}

ddd_node_info::~ddd_node_info() throw() {}

void ddd_node_info::__set_node(const ::dsn::rpc_address &val) { this->node = val; }

void ddd_node_info::__set_drop_time_ms(const int64_t val) { this->drop_time_ms = val; }

void ddd_node_info::__set_is_alive(const bool val) { this->is_alive = val; }

void ddd_node_info::__set_is_collected(const bool val) { this->is_collected = val; }

void ddd_node_info::__set_ballot(const int64_t val) { this->ballot = val; }

void ddd_node_info::__set_last_committed_decree(const int64_t val)
{
    this->last_committed_decree = val;
}

void ddd_node_info::__set_last_prepared_decree(const int64_t val)
{
    this->last_prepared_decree = val;
}

uint32_t ddd_node_info::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->node.read(iprot);
                this->__isset.node = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->drop_time_ms);
                this->__isset.drop_time_ms = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->is_alive);
                this->__isset.is_alive = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_BOOL) {
                xfer += iprot->readBool(this->is_collected);
                this->__isset.is_collected = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->ballot);
                this->__isset.ballot = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_committed_decree);
                this->__isset.last_committed_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 7:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->last_prepared_decree);
                this->__isset.last_prepared_decree = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t ddd_node_info::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("ddd_node_info");

    xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->node.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("drop_time_ms", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->drop_time_ms);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("is_alive", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->is_alive);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("is_collected", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->is_collected);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->ballot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("last_committed_decree", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->last_committed_decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("last_prepared_decree", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->last_prepared_decree);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(ddd_node_info &a, ddd_node_info &b)
{
    using ::std::swap;
    swap(a.node, b.node);
    swap(a.drop_time_ms, b.drop_time_ms);
    swap(a.is_alive, b.is_alive);
    swap(a.is_collected, b.is_collected);
    swap(a.ballot, b.ballot);
    swap(a.last_committed_decree, b.last_committed_decree);
    swap(a.last_prepared_decree, b.last_prepared_decree);
    swap(a.__isset, b.__isset);
}

ddd_node_info::ddd_node_info(const ddd_node_info &other592)
{
    node = other592.node;
    drop_time_ms = other592.drop_time_ms;
    is_alive = other592.is_alive;
    is_collected = other592.is_collected;
    ballot = other592.ballot;
    last_committed_decree = other592.last_committed_decree;
    last_prepared_decree = other592.last_prepared_decree;
    __isset = other592.__isset;
}
ddd_node_info::ddd_node_info(ddd_node_info &&other593)
{
    node = std::move(other593.node);
    drop_time_ms = std::move(other593.drop_time_ms);
    is_alive = std::move(other593.is_alive);
    is_collected = std::move(other593.is_collected);
    ballot = std::move(other593.ballot);
    last_committed_decree = std::move(other593.last_committed_decree);
    last_prepared_decree = std::move(other593.last_prepared_decree);
    __isset = std::move(other593.__isset);
}
ddd_node_info &ddd_node_info::operator=(const ddd_node_info &other594)
{
    node = other594.node;
    drop_time_ms = other594.drop_time_ms;
    is_alive = other594.is_alive;
    is_collected = other594.is_collected;
    ballot = other594.ballot;
    last_committed_decree = other594.last_committed_decree;
    last_prepared_decree = other594.last_prepared_decree;
    __isset = other594.__isset;
    return *this;
}
ddd_node_info &ddd_node_info::operator=(ddd_node_info &&other595)
{
    node = std::move(other595.node);
    drop_time_ms = std::move(other595.drop_time_ms);
    is_alive = std::move(other595.is_alive);
    is_collected = std::move(other595.is_collected);
    ballot = std::move(other595.ballot);
    last_committed_decree = std::move(other595.last_committed_decree);
    last_prepared_decree = std::move(other595.last_prepared_decree);
    __isset = std::move(other595.__isset);
    return *this;
}
void ddd_node_info::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "ddd_node_info(";
    out << "node=" << to_string(node);
    out << ", "
        << "drop_time_ms=" << to_string(drop_time_ms);
    out << ", "
        << "is_alive=" << to_string(is_alive);
    out << ", "
        << "is_collected=" << to_string(is_collected);
    out << ", "
        << "ballot=" << to_string(ballot);
    out << ", "
        << "last_committed_decree=" << to_string(last_committed_decree);
    out << ", "
        << "last_prepared_decree=" << to_string(last_prepared_decree);
    out << ")";
}

ddd_partition_info::~ddd_partition_info() throw() {}

void ddd_partition_info::__set_config(const ::dsn::partition_configuration &val)
{
    this->config = val;
}

void ddd_partition_info::__set_dropped(const std::vector<ddd_node_info> &val)
{
    this->dropped = val;
}

void ddd_partition_info::__set_reason(const std::string &val) { this->reason = val; }

uint32_t ddd_partition_info::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->config.read(iprot);
                this->__isset.config = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->dropped.clear();
                    uint32_t _size596;
                    ::apache::thrift::protocol::TType _etype599;
                    xfer += iprot->readListBegin(_etype599, _size596);
                    this->dropped.resize(_size596);
                    uint32_t _i600;
                    for (_i600 = 0; _i600 < _size596; ++_i600) {
                        xfer += this->dropped[_i600].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.dropped = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->reason);
                this->__isset.reason = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t ddd_partition_info::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("ddd_partition_info");

    xfer += oprot->writeFieldBegin("config", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->config.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("dropped", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->dropped.size()));
        std::vector<ddd_node_info>::const_iterator _iter601;
        for (_iter601 = this->dropped.begin(); _iter601 != this->dropped.end(); ++_iter601) {
            xfer += (*_iter601).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->reason);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(ddd_partition_info &a, ddd_partition_info &b)
{
    using ::std::swap;
    swap(a.config, b.config);
    swap(a.dropped, b.dropped);
    swap(a.reason, b.reason);
    swap(a.__isset, b.__isset);
}

ddd_partition_info::ddd_partition_info(const ddd_partition_info &other602)
{
    config = other602.config;
    dropped = other602.dropped;
    reason = other602.reason;
    __isset = other602.__isset;
}
ddd_partition_info::ddd_partition_info(ddd_partition_info &&other603)
{
    config = std::move(other603.config);
    dropped = std::move(other603.dropped);
    reason = std::move(other603.reason);
    __isset = std::move(other603.__isset);
}
ddd_partition_info &ddd_partition_info::operator=(const ddd_partition_info &other604)
{
    config = other604.config;
    dropped = other604.dropped;
    reason = other604.reason;
    __isset = other604.__isset;
    return *this;
}
ddd_partition_info &ddd_partition_info::operator=(ddd_partition_info &&other605)
{
    config = std::move(other605.config);
    dropped = std::move(other605.dropped);
    reason = std::move(other605.reason);
    __isset = std::move(other605.__isset);
    return *this;
}
void ddd_partition_info::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "ddd_partition_info(";
    out << "config=" << to_string(config);
    out << ", "
        << "dropped=" << to_string(dropped);
    out << ", "
        << "reason=" << to_string(reason);
    out << ")";
}

ddd_diagnose_response::~ddd_diagnose_response() throw() {}

void ddd_diagnose_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void ddd_diagnose_response::__set_partitions(const std::vector<ddd_partition_info> &val)
{
    this->partitions = val;
}

uint32_t ddd_diagnose_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->partitions.clear();
                    uint32_t _size606;
                    ::apache::thrift::protocol::TType _etype609;
                    xfer += iprot->readListBegin(_etype609, _size606);
                    this->partitions.resize(_size606);
                    uint32_t _i610;
                    for (_i610 = 0; _i610 < _size606; ++_i610) {
                        xfer += this->partitions[_i610].read(iprot);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.partitions = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t ddd_diagnose_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("ddd_diagnose_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("partitions", ::apache::thrift::protocol::T_LIST, 2);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT,
                                      static_cast<uint32_t>(this->partitions.size()));
        std::vector<ddd_partition_info>::const_iterator _iter611;
        for (_iter611 = this->partitions.begin(); _iter611 != this->partitions.end(); ++_iter611) {
            xfer += (*_iter611).write(oprot);
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(ddd_diagnose_response &a, ddd_diagnose_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.partitions, b.partitions);
    swap(a.__isset, b.__isset);
}

ddd_diagnose_response::ddd_diagnose_response(const ddd_diagnose_response &other612)
{
    err = other612.err;
    partitions = other612.partitions;
    __isset = other612.__isset;
}
ddd_diagnose_response::ddd_diagnose_response(ddd_diagnose_response &&other613)
{
    err = std::move(other613.err);
    partitions = std::move(other613.partitions);
    __isset = std::move(other613.__isset);
}
ddd_diagnose_response &ddd_diagnose_response::operator=(const ddd_diagnose_response &other614)
{
    err = other614.err;
    partitions = other614.partitions;
    __isset = other614.__isset;
    return *this;
}
ddd_diagnose_response &ddd_diagnose_response::operator=(ddd_diagnose_response &&other615)
{
    err = std::move(other615.err);
    partitions = std::move(other615.partitions);
    __isset = std::move(other615.__isset);
    return *this;
}
void ddd_diagnose_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "ddd_diagnose_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "partitions=" << to_string(partitions);
    out << ")";
}

start_partition_split_request::~start_partition_split_request() throw() {}

void start_partition_split_request::__set_app_name(const std::string &val) { this->app_name = val; }

void start_partition_split_request::__set_new_partition_count(const int32_t val)
{
    this->new_partition_count = val;
}

uint32_t start_partition_split_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->new_partition_count);
                this->__isset.new_partition_count = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t start_partition_split_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("start_partition_split_request");

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("new_partition_count", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->new_partition_count);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(start_partition_split_request &a, start_partition_split_request &b)
{
    using ::std::swap;
    swap(a.app_name, b.app_name);
    swap(a.new_partition_count, b.new_partition_count);
    swap(a.__isset, b.__isset);
}

start_partition_split_request::start_partition_split_request(
    const start_partition_split_request &other616)
{
    app_name = other616.app_name;
    new_partition_count = other616.new_partition_count;
    __isset = other616.__isset;
}
start_partition_split_request::start_partition_split_request(
    start_partition_split_request &&other617)
{
    app_name = std::move(other617.app_name);
    new_partition_count = std::move(other617.new_partition_count);
    __isset = std::move(other617.__isset);
}
start_partition_split_request &start_partition_split_request::
operator=(const start_partition_split_request &other618)
{
    app_name = other618.app_name;
    new_partition_count = other618.new_partition_count;
    __isset = other618.__isset;
    return *this;
}
start_partition_split_request &start_partition_split_request::
operator=(start_partition_split_request &&other619)
{
    app_name = std::move(other619.app_name);
    new_partition_count = std::move(other619.new_partition_count);
    __isset = std::move(other619.__isset);
    return *this;
}
void start_partition_split_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "start_partition_split_request(";
    out << "app_name=" << to_string(app_name);
    out << ", "
        << "new_partition_count=" << to_string(new_partition_count);
    out << ")";
}

start_partition_split_response::~start_partition_split_response() throw() {}

void start_partition_split_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void start_partition_split_response::__set_hint_msg(const std::string &val)
{
    this->hint_msg = val;
}

uint32_t start_partition_split_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->hint_msg);
                this->__isset.hint_msg = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t start_partition_split_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("start_partition_split_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("hint_msg", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->hint_msg);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(start_partition_split_response &a, start_partition_split_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.hint_msg, b.hint_msg);
    swap(a.__isset, b.__isset);
}

start_partition_split_response::start_partition_split_response(
    const start_partition_split_response &other620)
{
    err = other620.err;
    hint_msg = other620.hint_msg;
    __isset = other620.__isset;
}
start_partition_split_response::start_partition_split_response(
    start_partition_split_response &&other621)
{
    err = std::move(other621.err);
    hint_msg = std::move(other621.hint_msg);
    __isset = std::move(other621.__isset);
}
start_partition_split_response &start_partition_split_response::
operator=(const start_partition_split_response &other622)
{
    err = other622.err;
    hint_msg = other622.hint_msg;
    __isset = other622.__isset;
    return *this;
}
start_partition_split_response &start_partition_split_response::
operator=(start_partition_split_response &&other623)
{
    err = std::move(other623.err);
    hint_msg = std::move(other623.hint_msg);
    __isset = std::move(other623.__isset);
    return *this;
}
void start_partition_split_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "start_partition_split_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "hint_msg=" << to_string(hint_msg);
    out << ")";
}

control_split_request::~control_split_request() throw() {}

void control_split_request::__set_app_name(const std::string &val) { this->app_name = val; }

void control_split_request::__set_control_type(const split_control_type::type val)
{
    this->control_type = val;
}

void control_split_request::__set_parent_pidx(const int32_t val) { this->parent_pidx = val; }

void control_split_request::__set_old_partition_count(const int32_t val)
{
    this->old_partition_count = val;
    __isset.old_partition_count = true;
}

uint32_t control_split_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast624;
                xfer += iprot->readI32(ecast624);
                this->control_type = (split_control_type::type)ecast624;
                this->__isset.control_type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->parent_pidx);
                this->__isset.parent_pidx = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->old_partition_count);
                this->__isset.old_partition_count = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t control_split_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("control_split_request");

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("control_type", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->control_type);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("parent_pidx", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->parent_pidx);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.old_partition_count) {
        xfer += oprot->writeFieldBegin("old_partition_count", ::apache::thrift::protocol::T_I32, 4);
        xfer += oprot->writeI32(this->old_partition_count);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(control_split_request &a, control_split_request &b)
{
    using ::std::swap;
    swap(a.app_name, b.app_name);
    swap(a.control_type, b.control_type);
    swap(a.parent_pidx, b.parent_pidx);
    swap(a.old_partition_count, b.old_partition_count);
    swap(a.__isset, b.__isset);
}

control_split_request::control_split_request(const control_split_request &other625)
{
    app_name = other625.app_name;
    control_type = other625.control_type;
    parent_pidx = other625.parent_pidx;
    old_partition_count = other625.old_partition_count;
    __isset = other625.__isset;
}
control_split_request::control_split_request(control_split_request &&other626)
{
    app_name = std::move(other626.app_name);
    control_type = std::move(other626.control_type);
    parent_pidx = std::move(other626.parent_pidx);
    old_partition_count = std::move(other626.old_partition_count);
    __isset = std::move(other626.__isset);
}
control_split_request &control_split_request::operator=(const control_split_request &other627)
{
    app_name = other627.app_name;
    control_type = other627.control_type;
    parent_pidx = other627.parent_pidx;
    old_partition_count = other627.old_partition_count;
    __isset = other627.__isset;
    return *this;
}
control_split_request &control_split_request::operator=(control_split_request &&other628)
{
    app_name = std::move(other628.app_name);
    control_type = std::move(other628.control_type);
    parent_pidx = std::move(other628.parent_pidx);
    old_partition_count = std::move(other628.old_partition_count);
    __isset = std::move(other628.__isset);
    return *this;
}
void control_split_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "control_split_request(";
    out << "app_name=" << to_string(app_name);
    out << ", "
        << "control_type=" << to_string(control_type);
    out << ", "
        << "parent_pidx=" << to_string(parent_pidx);
    out << ", "
        << "old_partition_count=";
    (__isset.old_partition_count ? (out << to_string(old_partition_count)) : (out << "<null>"));
    out << ")";
}

control_split_response::~control_split_response() throw() {}

void control_split_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void control_split_response::__set_hint_msg(const std::string &val) { this->hint_msg = val; }

uint32_t control_split_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->hint_msg);
                this->__isset.hint_msg = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t control_split_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("control_split_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("hint_msg", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->hint_msg);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(control_split_response &a, control_split_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.hint_msg, b.hint_msg);
    swap(a.__isset, b.__isset);
}

control_split_response::control_split_response(const control_split_response &other629)
{
    err = other629.err;
    hint_msg = other629.hint_msg;
    __isset = other629.__isset;
}
control_split_response::control_split_response(control_split_response &&other630)
{
    err = std::move(other630.err);
    hint_msg = std::move(other630.hint_msg);
    __isset = std::move(other630.__isset);
}
control_split_response &control_split_response::operator=(const control_split_response &other631)
{
    err = other631.err;
    hint_msg = other631.hint_msg;
    __isset = other631.__isset;
    return *this;
}
control_split_response &control_split_response::operator=(control_split_response &&other632)
{
    err = std::move(other632.err);
    hint_msg = std::move(other632.hint_msg);
    __isset = std::move(other632.__isset);
    return *this;
}
void control_split_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "control_split_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "hint_msg=" << to_string(hint_msg);
    out << ")";
}

stop_split_request::~stop_split_request() throw() {}

void stop_split_request::__set_pid(const ::dsn::gpid &val) { this->pid = val; }

void stop_split_request::__set_partition_count(const int32_t val) { this->partition_count = val; }

void stop_split_request::__set_type(const split_control_type::type val) { this->type = val; }

uint32_t stop_split_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->partition_count);
                this->__isset.partition_count = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                int32_t ecast633;
                xfer += iprot->readI32(ecast633);
                this->type = (split_control_type::type)ecast633;
                this->__isset.type = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t stop_split_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("stop_split_request");

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("partition_count", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->partition_count);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(stop_split_request &a, stop_split_request &b)
{
    using ::std::swap;
    swap(a.pid, b.pid);
    swap(a.partition_count, b.partition_count);
    swap(a.type, b.type);
    swap(a.__isset, b.__isset);
}

stop_split_request::stop_split_request(const stop_split_request &other634)
{
    pid = other634.pid;
    partition_count = other634.partition_count;
    type = other634.type;
    __isset = other634.__isset;
}
stop_split_request::stop_split_request(stop_split_request &&other635)
{
    pid = std::move(other635.pid);
    partition_count = std::move(other635.partition_count);
    type = std::move(other635.type);
    __isset = std::move(other635.__isset);
}
stop_split_request &stop_split_request::operator=(const stop_split_request &other636)
{
    pid = other636.pid;
    partition_count = other636.partition_count;
    type = other636.type;
    __isset = other636.__isset;
    return *this;
}
stop_split_request &stop_split_request::operator=(stop_split_request &&other637)
{
    pid = std::move(other637.pid);
    partition_count = std::move(other637.partition_count);
    type = std::move(other637.type);
    __isset = std::move(other637.__isset);
    return *this;
}
void stop_split_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "stop_split_request(";
    out << "pid=" << to_string(pid);
    out << ", "
        << "partition_count=" << to_string(partition_count);
    out << ", "
        << "type=" << to_string(type);
    out << ")";
}

stop_split_response::~stop_split_response() throw() {}

void stop_split_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

uint32_t stop_split_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t stop_split_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("stop_split_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(stop_split_response &a, stop_split_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.__isset, b.__isset);
}

stop_split_response::stop_split_response(const stop_split_response &other638)
{
    err = other638.err;
    __isset = other638.__isset;
}
stop_split_response::stop_split_response(stop_split_response &&other639)
{
    err = std::move(other639.err);
    __isset = std::move(other639.__isset);
}
stop_split_response &stop_split_response::operator=(const stop_split_response &other640)
{
    err = other640.err;
    __isset = other640.__isset;
    return *this;
}
stop_split_response &stop_split_response::operator=(stop_split_response &&other641)
{
    err = std::move(other641.err);
    __isset = std::move(other641.__isset);
    return *this;
}
void stop_split_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "stop_split_response(";
    out << "err=" << to_string(err);
    out << ")";
}

query_split_request::~query_split_request() throw() {}

void query_split_request::__set_app_name(const std::string &val) { this->app_name = val; }

uint32_t query_split_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->app_name);
                this->__isset.app_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t query_split_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("query_split_request");

    xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->app_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(query_split_request &a, query_split_request &b)
{
    using ::std::swap;
    swap(a.app_name, b.app_name);
    swap(a.__isset, b.__isset);
}

query_split_request::query_split_request(const query_split_request &other642)
{
    app_name = other642.app_name;
    __isset = other642.__isset;
}
query_split_request::query_split_request(query_split_request &&other643)
{
    app_name = std::move(other643.app_name);
    __isset = std::move(other643.__isset);
}
query_split_request &query_split_request::operator=(const query_split_request &other644)
{
    app_name = other644.app_name;
    __isset = other644.__isset;
    return *this;
}
query_split_request &query_split_request::operator=(query_split_request &&other645)
{
    app_name = std::move(other645.app_name);
    __isset = std::move(other645.__isset);
    return *this;
}
void query_split_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "query_split_request(";
    out << "app_name=" << to_string(app_name);
    out << ")";
}

query_split_response::~query_split_response() throw() {}

void query_split_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void query_split_response::__set_hint_msg(const std::string &val) { this->hint_msg = val; }

void query_split_response::__set_new_partition_count(const int32_t val)
{
    this->new_partition_count = val;
}

void query_split_response::__set_status(const std::map<int32_t, split_status::type> &val)
{
    this->status = val;
}

uint32_t query_split_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->hint_msg);
                this->__isset.hint_msg = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->new_partition_count);
                this->__isset.new_partition_count = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->status.clear();
                    uint32_t _size646;
                    ::apache::thrift::protocol::TType _ktype647;
                    ::apache::thrift::protocol::TType _vtype648;
                    xfer += iprot->readMapBegin(_ktype647, _vtype648, _size646);
                    uint32_t _i650;
                    for (_i650 = 0; _i650 < _size646; ++_i650) {
                        int32_t _key651;
                        xfer += iprot->readI32(_key651);
                        split_status::type &_val652 = this->status[_key651];
                        int32_t ecast653;
                        xfer += iprot->readI32(ecast653);
                        _val652 = (split_status::type)ecast653;
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.status = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t query_split_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("query_split_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("hint_msg", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->hint_msg);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("new_partition_count", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->new_partition_count);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_MAP, 4);
    {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32,
                                     ::apache::thrift::protocol::T_I32,
                                     static_cast<uint32_t>(this->status.size()));
        std::map<int32_t, split_status::type>::const_iterator _iter654;
        for (_iter654 = this->status.begin(); _iter654 != this->status.end(); ++_iter654) {
            xfer += oprot->writeI32(_iter654->first);
            xfer += oprot->writeI32((int32_t)_iter654->second);
        }
        xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(query_split_response &a, query_split_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.hint_msg, b.hint_msg);
    swap(a.new_partition_count, b.new_partition_count);
    swap(a.status, b.status);
    swap(a.__isset, b.__isset);
}

query_split_response::query_split_response(const query_split_response &other655)
{
    err = other655.err;
    hint_msg = other655.hint_msg;
    new_partition_count = other655.new_partition_count;
    status = other655.status;
    __isset = other655.__isset;
}
query_split_response::query_split_response(query_split_response &&other656)
{
    err = std::move(other656.err);
    hint_msg = std::move(other656.hint_msg);
    new_partition_count = std::move(other656.new_partition_count);
    status = std::move(other656.status);
    __isset = std::move(other656.__isset);
}
query_split_response &query_split_response::operator=(const query_split_response &other657)
{
    err = other657.err;
    hint_msg = other657.hint_msg;
    new_partition_count = other657.new_partition_count;
    status = other657.status;
    __isset = other657.__isset;
    return *this;
}
query_split_response &query_split_response::operator=(query_split_response &&other658)
{
    err = std::move(other658.err);
    hint_msg = std::move(other658.hint_msg);
    new_partition_count = std::move(other658.new_partition_count);
    status = std::move(other658.status);
    __isset = std::move(other658.__isset);
    return *this;
}
void query_split_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "query_split_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "hint_msg=" << to_string(hint_msg);
    out << ", "
        << "new_partition_count=" << to_string(new_partition_count);
    out << ", "
        << "status=" << to_string(status);
    out << ")";
}

notify_catch_up_request::~notify_catch_up_request() throw() {}

void notify_catch_up_request::__set_parent_gpid(const ::dsn::gpid &val) { this->parent_gpid = val; }

void notify_catch_up_request::__set_child_gpid(const ::dsn::gpid &val) { this->child_gpid = val; }

void notify_catch_up_request::__set_child_ballot(const int64_t val) { this->child_ballot = val; }

void notify_catch_up_request::__set_child_address(const ::dsn::rpc_address &val)
{
    this->child_address = val;
}

uint32_t notify_catch_up_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->parent_gpid.read(iprot);
                this->__isset.parent_gpid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->child_gpid.read(iprot);
                this->__isset.child_gpid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->child_ballot);
                this->__isset.child_ballot = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->child_address.read(iprot);
                this->__isset.child_address = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t notify_catch_up_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("notify_catch_up_request");

    xfer += oprot->writeFieldBegin("parent_gpid", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->parent_gpid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("child_gpid", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->child_gpid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("child_ballot", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->child_ballot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("child_address", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->child_address.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(notify_catch_up_request &a, notify_catch_up_request &b)
{
    using ::std::swap;
    swap(a.parent_gpid, b.parent_gpid);
    swap(a.child_gpid, b.child_gpid);
    swap(a.child_ballot, b.child_ballot);
    swap(a.child_address, b.child_address);
    swap(a.__isset, b.__isset);
}

notify_catch_up_request::notify_catch_up_request(const notify_catch_up_request &other659)
{
    parent_gpid = other659.parent_gpid;
    child_gpid = other659.child_gpid;
    child_ballot = other659.child_ballot;
    child_address = other659.child_address;
    __isset = other659.__isset;
}
notify_catch_up_request::notify_catch_up_request(notify_catch_up_request &&other660)
{
    parent_gpid = std::move(other660.parent_gpid);
    child_gpid = std::move(other660.child_gpid);
    child_ballot = std::move(other660.child_ballot);
    child_address = std::move(other660.child_address);
    __isset = std::move(other660.__isset);
}
notify_catch_up_request &notify_catch_up_request::operator=(const notify_catch_up_request &other661)
{
    parent_gpid = other661.parent_gpid;
    child_gpid = other661.child_gpid;
    child_ballot = other661.child_ballot;
    child_address = other661.child_address;
    __isset = other661.__isset;
    return *this;
}
notify_catch_up_request &notify_catch_up_request::operator=(notify_catch_up_request &&other662)
{
    parent_gpid = std::move(other662.parent_gpid);
    child_gpid = std::move(other662.child_gpid);
    child_ballot = std::move(other662.child_ballot);
    child_address = std::move(other662.child_address);
    __isset = std::move(other662.__isset);
    return *this;
}
void notify_catch_up_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "notify_catch_up_request(";
    out << "parent_gpid=" << to_string(parent_gpid);
    out << ", "
        << "child_gpid=" << to_string(child_gpid);
    out << ", "
        << "child_ballot=" << to_string(child_ballot);
    out << ", "
        << "child_address=" << to_string(child_address);
    out << ")";
}

notify_cacth_up_response::~notify_cacth_up_response() throw() {}

void notify_cacth_up_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

uint32_t notify_cacth_up_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t notify_cacth_up_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("notify_cacth_up_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(notify_cacth_up_response &a, notify_cacth_up_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.__isset, b.__isset);
}

notify_cacth_up_response::notify_cacth_up_response(const notify_cacth_up_response &other663)
{
    err = other663.err;
    __isset = other663.__isset;
}
notify_cacth_up_response::notify_cacth_up_response(notify_cacth_up_response &&other664)
{
    err = std::move(other664.err);
    __isset = std::move(other664.__isset);
}
notify_cacth_up_response &notify_cacth_up_response::
operator=(const notify_cacth_up_response &other665)
{
    err = other665.err;
    __isset = other665.__isset;
    return *this;
}
notify_cacth_up_response &notify_cacth_up_response::operator=(notify_cacth_up_response &&other666)
{
    err = std::move(other666.err);
    __isset = std::move(other666.__isset);
    return *this;
}
void notify_cacth_up_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "notify_cacth_up_response(";
    out << "err=" << to_string(err);
    out << ")";
}

update_child_group_partition_count_request::~update_child_group_partition_count_request() throw() {}

void update_child_group_partition_count_request::__set_target_address(const ::dsn::rpc_address &val)
{
    this->target_address = val;
}

void update_child_group_partition_count_request::__set_new_partition_count(const int32_t val)
{
    this->new_partition_count = val;
}

void update_child_group_partition_count_request::__set_pid(const ::dsn::gpid &val)
{
    this->pid = val;
}

void update_child_group_partition_count_request::__set_ballot(const int64_t val)
{
    this->ballot = val;
}

uint32_t
update_child_group_partition_count_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->target_address.read(iprot);
                this->__isset.target_address = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I32) {
                xfer += iprot->readI32(this->new_partition_count);
                this->__isset.new_partition_count = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->pid.read(iprot);
                this->__isset.pid = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->ballot);
                this->__isset.ballot = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t update_child_group_partition_count_request::write(
    ::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("update_child_group_partition_count_request");

    xfer += oprot->writeFieldBegin("target_address", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->target_address.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("new_partition_count", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->new_partition_count);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->pid.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("ballot", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->ballot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(update_child_group_partition_count_request &a,
          update_child_group_partition_count_request &b)
{
    using ::std::swap;
    swap(a.target_address, b.target_address);
    swap(a.new_partition_count, b.new_partition_count);
    swap(a.pid, b.pid);
    swap(a.ballot, b.ballot);
    swap(a.__isset, b.__isset);
}

update_child_group_partition_count_request::update_child_group_partition_count_request(
    const update_child_group_partition_count_request &other667)
{
    target_address = other667.target_address;
    new_partition_count = other667.new_partition_count;
    pid = other667.pid;
    ballot = other667.ballot;
    __isset = other667.__isset;
}
update_child_group_partition_count_request::update_child_group_partition_count_request(
    update_child_group_partition_count_request &&other668)
{
    target_address = std::move(other668.target_address);
    new_partition_count = std::move(other668.new_partition_count);
    pid = std::move(other668.pid);
    ballot = std::move(other668.ballot);
    __isset = std::move(other668.__isset);
}
update_child_group_partition_count_request &update_child_group_partition_count_request::
operator=(const update_child_group_partition_count_request &other669)
{
    target_address = other669.target_address;
    new_partition_count = other669.new_partition_count;
    pid = other669.pid;
    ballot = other669.ballot;
    __isset = other669.__isset;
    return *this;
}
update_child_group_partition_count_request &update_child_group_partition_count_request::
operator=(update_child_group_partition_count_request &&other670)
{
    target_address = std::move(other670.target_address);
    new_partition_count = std::move(other670.new_partition_count);
    pid = std::move(other670.pid);
    ballot = std::move(other670.ballot);
    __isset = std::move(other670.__isset);
    return *this;
}
void update_child_group_partition_count_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "update_child_group_partition_count_request(";
    out << "target_address=" << to_string(target_address);
    out << ", "
        << "new_partition_count=" << to_string(new_partition_count);
    out << ", "
        << "pid=" << to_string(pid);
    out << ", "
        << "ballot=" << to_string(ballot);
    out << ")";
}

update_child_group_partition_count_response::~update_child_group_partition_count_response() throw()
{
}

void update_child_group_partition_count_response::__set_err(const ::dsn::error_code &val)
{
    this->err = val;
}

uint32_t
update_child_group_partition_count_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t update_child_group_partition_count_response::write(
    ::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("update_child_group_partition_count_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(update_child_group_partition_count_response &a,
          update_child_group_partition_count_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.__isset, b.__isset);
}

update_child_group_partition_count_response::update_child_group_partition_count_response(
    const update_child_group_partition_count_response &other671)
{
    err = other671.err;
    __isset = other671.__isset;
}
update_child_group_partition_count_response::update_child_group_partition_count_response(
    update_child_group_partition_count_response &&other672)
{
    err = std::move(other672.err);
    __isset = std::move(other672.__isset);
}
update_child_group_partition_count_response &update_child_group_partition_count_response::
operator=(const update_child_group_partition_count_response &other673)
{
    err = other673.err;
    __isset = other673.__isset;
    return *this;
}
update_child_group_partition_count_response &update_child_group_partition_count_response::
operator=(update_child_group_partition_count_response &&other674)
{
    err = std::move(other674.err);
    __isset = std::move(other674.__isset);
    return *this;
}
void update_child_group_partition_count_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "update_child_group_partition_count_response(";
    out << "err=" << to_string(err);
    out << ")";
}

register_child_request::~register_child_request() throw() {}

void register_child_request::__set_app(const ::dsn::app_info &val) { this->app = val; }

void register_child_request::__set_parent_config(const ::dsn::partition_configuration &val)
{
    this->parent_config = val;
}

void register_child_request::__set_child_config(const ::dsn::partition_configuration &val)
{
    this->child_config = val;
}

void register_child_request::__set_primary_address(const ::dsn::rpc_address &val)
{
    this->primary_address = val;
}

uint32_t register_child_request::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->app.read(iprot);
                this->__isset.app = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->parent_config.read(iprot);
                this->__isset.parent_config = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->child_config.read(iprot);
                this->__isset.child_config = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->primary_address.read(iprot);
                this->__isset.primary_address = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t register_child_request::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("register_child_request");

    xfer += oprot->writeFieldBegin("app", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->app.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("parent_config", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->parent_config.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("child_config", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->child_config.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("primary_address", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->primary_address.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(register_child_request &a, register_child_request &b)
{
    using ::std::swap;
    swap(a.app, b.app);
    swap(a.parent_config, b.parent_config);
    swap(a.child_config, b.child_config);
    swap(a.primary_address, b.primary_address);
    swap(a.__isset, b.__isset);
}

register_child_request::register_child_request(const register_child_request &other675)
{
    app = other675.app;
    parent_config = other675.parent_config;
    child_config = other675.child_config;
    primary_address = other675.primary_address;
    __isset = other675.__isset;
}
register_child_request::register_child_request(register_child_request &&other676)
{
    app = std::move(other676.app);
    parent_config = std::move(other676.parent_config);
    child_config = std::move(other676.child_config);
    primary_address = std::move(other676.primary_address);
    __isset = std::move(other676.__isset);
}
register_child_request &register_child_request::operator=(const register_child_request &other677)
{
    app = other677.app;
    parent_config = other677.parent_config;
    child_config = other677.child_config;
    primary_address = other677.primary_address;
    __isset = other677.__isset;
    return *this;
}
register_child_request &register_child_request::operator=(register_child_request &&other678)
{
    app = std::move(other678.app);
    parent_config = std::move(other678.parent_config);
    child_config = std::move(other678.child_config);
    primary_address = std::move(other678.primary_address);
    __isset = std::move(other678.__isset);
    return *this;
}
void register_child_request::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "register_child_request(";
    out << "app=" << to_string(app);
    out << ", "
        << "parent_config=" << to_string(parent_config);
    out << ", "
        << "child_config=" << to_string(child_config);
    out << ", "
        << "primary_address=" << to_string(primary_address);
    out << ")";
}

register_child_response::~register_child_response() throw() {}

void register_child_response::__set_err(const ::dsn::error_code &val) { this->err = val; }

void register_child_response::__set_app(const ::dsn::app_info &val) { this->app = val; }

void register_child_response::__set_parent_config(const ::dsn::partition_configuration &val)
{
    this->parent_config = val;
}

void register_child_response::__set_child_config(const ::dsn::partition_configuration &val)
{
    this->child_config = val;
}

uint32_t register_child_response::read(::apache::thrift::protocol::TProtocol *iprot)
{

    apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->err.read(iprot);
                this->__isset.err = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->app.read(iprot);
                this->__isset.app = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->parent_config.read(iprot);
                this->__isset.parent_config = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->child_config.read(iprot);
                this->__isset.child_config = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t register_child_response::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("register_child_response");

    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->err.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("app", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->app.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("parent_config", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->parent_config.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("child_config", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->child_config.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(register_child_response &a, register_child_response &b)
{
    using ::std::swap;
    swap(a.err, b.err);
    swap(a.app, b.app);
    swap(a.parent_config, b.parent_config);
    swap(a.child_config, b.child_config);
    swap(a.__isset, b.__isset);
}

register_child_response::register_child_response(const register_child_response &other679)
{
    err = other679.err;
    app = other679.app;
    parent_config = other679.parent_config;
    child_config = other679.child_config;
    __isset = other679.__isset;
}
register_child_response::register_child_response(register_child_response &&other680)
{
    err = std::move(other680.err);
    app = std::move(other680.app);
    parent_config = std::move(other680.parent_config);
    child_config = std::move(other680.child_config);
    __isset = std::move(other680.__isset);
}
register_child_response &register_child_response::operator=(const register_child_response &other681)
{
    err = other681.err;
    app = other681.app;
    parent_config = other681.parent_config;
    child_config = other681.child_config;
    __isset = other681.__isset;
    return *this;
}
register_child_response &register_child_response::operator=(register_child_response &&other682)
{
    err = std::move(other682.err);
    app = std::move(other682.app);
    parent_config = std::move(other682.parent_config);
    child_config = std::move(other682.child_config);
    __isset = std::move(other682.__isset);
    return *this;
}
void register_child_response::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "register_child_response(";
    out << "err=" << to_string(err);
    out << ", "
        << "app=" << to_string(app);
    out << ", "
        << "parent_config=" << to_string(parent_config);
    out << ", "
        << "child_config=" << to_string(child_config);
    out << ")";
}
}
} // namespace
